/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Bool swig_types[0]
#define SWIGTYPE_p_CustomRect swig_types[1]
#define SWIGTYPE_p_FILE swig_types[2]
#define SWIGTYPE_p_GlyphRangesBuilder swig_types[3]
#define SWIGTYPE_p_ImBitVector swig_types[4]
#define SWIGTYPE_p_ImChunkStreamT_ImGuiWindowSettings_t swig_types[5]
#define SWIGTYPE_p_ImColor swig_types[6]
#define SWIGTYPE_p_ImDrawChannel swig_types[7]
#define SWIGTYPE_p_ImDrawCmd swig_types[8]
#define SWIGTYPE_p_ImDrawData swig_types[9]
#define SWIGTYPE_p_ImDrawDataBuilder swig_types[10]
#define SWIGTYPE_p_ImDrawList swig_types[11]
#define SWIGTYPE_p_ImDrawListSharedData swig_types[12]
#define SWIGTYPE_p_ImDrawListSplitter swig_types[13]
#define SWIGTYPE_p_ImDrawVert swig_types[14]
#define SWIGTYPE_p_ImFont swig_types[15]
#define SWIGTYPE_p_ImFontAtlas swig_types[16]
#define SWIGTYPE_p_ImFontAtlasCustomRect swig_types[17]
#define SWIGTYPE_p_ImFontConfig swig_types[18]
#define SWIGTYPE_p_ImFontGlyph swig_types[19]
#define SWIGTYPE_p_ImFontGlyphRangesBuilder swig_types[20]
#define SWIGTYPE_p_ImGuiColorMod swig_types[21]
#define SWIGTYPE_p_ImGuiColumnData swig_types[22]
#define SWIGTYPE_p_ImGuiColumns swig_types[23]
#define SWIGTYPE_p_ImGuiContext swig_types[24]
#define SWIGTYPE_p_ImGuiContextHook swig_types[25]
#define SWIGTYPE_p_ImGuiDataTypeInfo swig_types[26]
#define SWIGTYPE_p_ImGuiDataTypeTempStorage swig_types[27]
#define SWIGTYPE_p_ImGuiDockContext swig_types[28]
#define SWIGTYPE_p_ImGuiDockNode swig_types[29]
#define SWIGTYPE_p_ImGuiGroupData swig_types[30]
#define SWIGTYPE_p_ImGuiIO swig_types[31]
#define SWIGTYPE_p_ImGuiInputTextCallbackData swig_types[32]
#define SWIGTYPE_p_ImGuiInputTextState swig_types[33]
#define SWIGTYPE_p_ImGuiLastItemDataBackup swig_types[34]
#define SWIGTYPE_p_ImGuiListClipper swig_types[35]
#define SWIGTYPE_p_ImGuiMenuColumns swig_types[36]
#define SWIGTYPE_p_ImGuiNavMoveResult swig_types[37]
#define SWIGTYPE_p_ImGuiNextItemData swig_types[38]
#define SWIGTYPE_p_ImGuiNextWindowData swig_types[39]
#define SWIGTYPE_p_ImGuiOnceUponAFrame swig_types[40]
#define SWIGTYPE_p_ImGuiPayload swig_types[41]
#define SWIGTYPE_p_ImGuiPlatformIO swig_types[42]
#define SWIGTYPE_p_ImGuiPlatformMonitor swig_types[43]
#define SWIGTYPE_p_ImGuiPopupData swig_types[44]
#define SWIGTYPE_p_ImGuiPtrOrIndex swig_types[45]
#define SWIGTYPE_p_ImGuiSettingsHandler swig_types[46]
#define SWIGTYPE_p_ImGuiShrinkWidthItem swig_types[47]
#define SWIGTYPE_p_ImGuiSizeCallbackData swig_types[48]
#define SWIGTYPE_p_ImGuiStorage swig_types[49]
#define SWIGTYPE_p_ImGuiStyle swig_types[50]
#define SWIGTYPE_p_ImGuiStyleMod swig_types[51]
#define SWIGTYPE_p_ImGuiTabBar swig_types[52]
#define SWIGTYPE_p_ImGuiTabItem swig_types[53]
#define SWIGTYPE_p_ImGuiTextBuffer swig_types[54]
#define SWIGTYPE_p_ImGuiTextFilter swig_types[55]
#define SWIGTYPE_p_ImGuiViewport swig_types[56]
#define SWIGTYPE_p_ImGuiViewportP swig_types[57]
#define SWIGTYPE_p_ImGuiWindow swig_types[58]
#define SWIGTYPE_p_ImGuiWindowClass swig_types[59]
#define SWIGTYPE_p_ImGuiWindowSettings swig_types[60]
#define SWIGTYPE_p_ImGuiWindowTempData swig_types[61]
#define SWIGTYPE_p_ImNewWrapper swig_types[62]
#define SWIGTYPE_p_ImPoolT_ImGuiTabBar_t swig_types[63]
#define SWIGTYPE_p_ImRect swig_types[64]
#define SWIGTYPE_p_ImStb__STB_TexteditState swig_types[65]
#define SWIGTYPE_p_ImVec1 swig_types[66]
#define SWIGTYPE_p_ImVec2 swig_types[67]
#define SWIGTYPE_p_ImVec2ih swig_types[68]
#define SWIGTYPE_p_ImVec4 swig_types[69]
#define SWIGTYPE_p_ImVectorT_ImDrawChannel_t swig_types[70]
#define SWIGTYPE_p_ImVectorT_ImDrawCmd_t swig_types[71]
#define SWIGTYPE_p_ImVectorT_ImDrawList_p_t swig_types[72]
#define SWIGTYPE_p_ImVectorT_ImDrawVert_t swig_types[73]
#define SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t swig_types[74]
#define SWIGTYPE_p_ImVectorT_ImFontConfig_t swig_types[75]
#define SWIGTYPE_p_ImVectorT_ImFontGlyph_t swig_types[76]
#define SWIGTYPE_p_ImVectorT_ImFont_p_t swig_types[77]
#define SWIGTYPE_p_ImVectorT_ImGuiColorMod_t swig_types[78]
#define SWIGTYPE_p_ImVectorT_ImGuiColumnData_t swig_types[79]
#define SWIGTYPE_p_ImVectorT_ImGuiColumns_t swig_types[80]
#define SWIGTYPE_p_ImVectorT_ImGuiContextHook_t swig_types[81]
#define SWIGTYPE_p_ImVectorT_ImGuiDockNodeSettings_t swig_types[82]
#define SWIGTYPE_p_ImVectorT_ImGuiDockRequest_t swig_types[83]
#define SWIGTYPE_p_ImVectorT_ImGuiGroupData_t swig_types[84]
#define SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t swig_types[85]
#define SWIGTYPE_p_ImVectorT_ImGuiPopupData_t swig_types[86]
#define SWIGTYPE_p_ImVectorT_ImGuiPtrOrIndex_t swig_types[87]
#define SWIGTYPE_p_ImVectorT_ImGuiSettingsHandler_t swig_types[88]
#define SWIGTYPE_p_ImVectorT_ImGuiShrinkWidthItem_t swig_types[89]
#define SWIGTYPE_p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t swig_types[90]
#define SWIGTYPE_p_ImVectorT_ImGuiStyleMod_t swig_types[91]
#define SWIGTYPE_p_ImVectorT_ImGuiTabItem_t swig_types[92]
#define SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t swig_types[93]
#define SWIGTYPE_p_ImVectorT_ImGuiViewportP_p_t swig_types[94]
#define SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t swig_types[95]
#define SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t swig_types[96]
#define SWIGTYPE_p_ImVectorT_ImVec2_t swig_types[97]
#define SWIGTYPE_p_ImVectorT_ImVec4_t swig_types[98]
#define SWIGTYPE_p_ImVectorT_char_const_p_t swig_types[99]
#define SWIGTYPE_p_ImVectorT_char_t swig_types[100]
#define SWIGTYPE_p_ImVectorT_float_t swig_types[101]
#define SWIGTYPE_p_ImVectorT_int_t swig_types[102]
#define SWIGTYPE_p_ImVectorT_unsigned_char_t swig_types[103]
#define SWIGTYPE_p_ImVectorT_unsigned_int_t swig_types[104]
#define SWIGTYPE_p_ImVectorT_unsigned_short_t swig_types[105]
#define SWIGTYPE_p_ImVectorT_void_p_t swig_types[106]
#define SWIGTYPE_p_bool swig_types[107]
#define SWIGTYPE_p_char swig_types[108]
#define SWIGTYPE_p_double swig_types[109]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiContextHook__void swig_types[110]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void swig_types[111]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void swig_types[112]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void swig_types[113]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void swig_types[114]
#define SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int swig_types[115]
#define SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void swig_types[116]
#define SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void swig_types[117]
#define SWIGTYPE_p_f_p_ImGuiViewport__ImVec2 swig_types[118]
#define SWIGTYPE_p_f_p_ImGuiViewport__bool swig_types[119]
#define SWIGTYPE_p_f_p_ImGuiViewport__float swig_types[120]
#define SWIGTYPE_p_f_p_ImGuiViewport__void swig_types[121]
#define SWIGTYPE_p_f_p_ImGuiViewport_float__void swig_types[122]
#define SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void swig_types[123]
#define SWIGTYPE_p_f_p_ImGuiViewport_p_void__void swig_types[124]
#define SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int swig_types[125]
#define SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void swig_types[126]
#define SWIGTYPE_p_f_p_void__p_char swig_types[127]
#define SWIGTYPE_p_f_p_void_int__float swig_types[128]
#define SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool swig_types[129]
#define SWIGTYPE_p_f_p_void_p_q_const__char__void swig_types[130]
#define SWIGTYPE_p_f_p_void_p_void__void swig_types[131]
#define SWIGTYPE_p_f_size_t_p_void__p_void swig_types[132]
#define SWIGTYPE_p_float swig_types[133]
#define SWIGTYPE_p_int swig_types[134]
#define SWIGTYPE_p_long_long swig_types[135]
#define SWIGTYPE_p_p_ImDrawList swig_types[136]
#define SWIGTYPE_p_p_ImGuiDockNode swig_types[137]
#define SWIGTYPE_p_p_char swig_types[138]
#define SWIGTYPE_p_p_f_p_ImGuiInputTextCallbackData__int swig_types[139]
#define SWIGTYPE_p_p_unsigned_char swig_types[140]
#define SWIGTYPE_p_p_void swig_types[141]
#define SWIGTYPE_p_short swig_types[142]
#define SWIGTYPE_p_signed_char swig_types[143]
#define SWIGTYPE_p_size_t swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_long_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_va_list swig_types[149]
#define SWIGTYPE_p_void swig_types[150]
static swig_type_info *swig_types[152];
static swig_module_info swig_module = {swig_types, 151, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "imgui"
#define SWIG_init      luaopen_imgui
#define SWIG_init_user luaopen_imgui_user

#define SWIG_LUACODE   luaopen_imgui_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "imgui.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "imgui_internal.h"


#include "Bool.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_ImVec2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec2::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::x",1,"ImVec2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImVec2_x_set",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec2::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::x",1,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImVec2_x_get",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec2::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::y",1,"ImVec2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImVec2_y_set",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec2::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::y",1,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImVec2_y_get",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImVec2::ImVec2",0,0)
  result = (ImVec2 *)new ImVec2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImVec2::ImVec2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec2::ImVec2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::ImVec2",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (ImVec2 *)new ImVec2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImVec2__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ImVec2__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImVec2::ImVec2()\n"
    "    ImVec2::ImVec2(float,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImVec2(void *obj) {
ImVec2 *arg1 = (ImVec2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec2_attributes[] = {
    { "x", _wrap_ImVec2_x_get, _wrap_ImVec2_x_set },
    { "y", _wrap_ImVec2_y_get, _wrap_ImVec2_y_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec2_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec2_Sf_SwigStatic = {
    "ImVec2",
    swig_ImVec2_Sf_SwigStatic_methods,
    swig_ImVec2_Sf_SwigStatic_attributes,
    swig_ImVec2_Sf_SwigStatic_constants,
    swig_ImVec2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec2_bases[] = {0};
static const char *swig_ImVec2_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec2 = { "ImVec2", "ImVec2", &SWIGTYPE_p_ImVec2,_proxy__wrap_new_ImVec2, swig_delete_ImVec2, swig_ImVec2_methods, swig_ImVec2_attributes, &swig_ImVec2_Sf_SwigStatic, swig_ImVec2_meta, swig_ImVec2_bases, swig_ImVec2_base_names };

static int _wrap_ImVec4_x_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec4::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::x",1,"ImVec4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_x_set",1,SWIGTYPE_p_ImVec4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_x_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec4::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::x",1,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_x_get",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_y_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec4::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::y",1,"ImVec4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_y_set",1,SWIGTYPE_p_ImVec4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_y_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec4::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::y",1,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_y_get",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_z_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec4::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::z",1,"ImVec4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_z_set",1,SWIGTYPE_p_ImVec4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_z_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec4::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::z",1,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_z_get",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_w_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec4::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::w",1,"ImVec4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_w_set",1,SWIGTYPE_p_ImVec4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec4_w_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec4::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::w",1,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImVec4_w_get",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImVec4::ImVec4",0,0)
  result = (ImVec4 *)new ImVec4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImVec4::ImVec4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::ImVec4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImVec4::ImVec4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImVec4::ImVec4",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ImVec4 *)new ImVec4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImVec4__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ImVec4__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImVec4::ImVec4()\n"
    "    ImVec4::ImVec4(float,float,float,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImVec4(void *obj) {
ImVec4 *arg1 = (ImVec4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec4_attributes[] = {
    { "x", _wrap_ImVec4_x_get, _wrap_ImVec4_x_set },
    { "y", _wrap_ImVec4_y_get, _wrap_ImVec4_y_set },
    { "z", _wrap_ImVec4_z_get, _wrap_ImVec4_z_set },
    { "w", _wrap_ImVec4_w_get, _wrap_ImVec4_w_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec4_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec4_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec4_Sf_SwigStatic = {
    "ImVec4",
    swig_ImVec4_Sf_SwigStatic_methods,
    swig_ImVec4_Sf_SwigStatic_attributes,
    swig_ImVec4_Sf_SwigStatic_constants,
    swig_ImVec4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec4_bases[] = {0};
static const char *swig_ImVec4_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec4 = { "ImVec4", "ImVec4", &SWIGTYPE_p_ImVec4,_proxy__wrap_new_ImVec4, swig_delete_ImVec4, swig_ImVec4_methods, swig_ImVec4_attributes, &swig_ImVec4_Sf_SwigStatic, swig_ImVec4_meta, swig_ImVec4_bases, swig_ImVec4_base_names };

static int _wrap_CreateContext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  
  SWIG_check_num_args("ImGui::CreateContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::CreateContext",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("CreateContext",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImGuiContext *)ImGui::CreateContext(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateContext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *result = 0 ;
  
  SWIG_check_num_args("ImGui::CreateContext",0,0)
  result = (ImGuiContext *)ImGui::CreateContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateContext(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_CreateContext__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CreateContext__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreateContext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::CreateContext(ImFontAtlas *)\n"
    "    ImGui::CreateContext()\n");
  lua_error(L);return 0;
}


static int _wrap_DestroyContext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DestroyContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DestroyContext",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DestroyContext",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DestroyContext(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DestroyContext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::DestroyContext",0,0)
  ImGui::DestroyContext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DestroyContext(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_DestroyContext__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DestroyContext__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DestroyContext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DestroyContext(ImGuiContext *)\n"
    "    ImGui::DestroyContext()\n");
  lua_error(L);return 0;
}


static int _wrap_GetCurrentContext(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetCurrentContext",0,0)
  result = (ImGuiContext *)ImGui::GetCurrentContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCurrentContext(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::SetCurrentContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetCurrentContext",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("SetCurrentContext",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::SetCurrentContext(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetIO(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetIO",0,0)
  result = (ImGuiIO *) &ImGui::GetIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetStyle(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetStyle",0,0)
  result = (ImGuiStyle *) &ImGui::GetStyle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NewFrame(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::NewFrame",0,0)
  ImGui::NewFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndFrame(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndFrame",0,0)
  ImGui::EndFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Render(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Render",0,0)
  ImGui::Render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDrawData(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetDrawData",0,0)
  result = (ImDrawData *)ImGui::GetDrawData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowDemoWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool *arg1 = (bool *) 0 ;
  
  SWIG_check_num_args("ImGui::ShowDemoWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowDemoWindow",1,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ShowDemoWindow",1,SWIGTYPE_p_bool);
  }
  
  ImGui::ShowDemoWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowDemoWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowDemoWindow",0,0)
  ImGui::ShowDemoWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowDemoWindow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_ShowDemoWindow__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ShowDemoWindow__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ShowDemoWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ShowDemoWindow(bool *)\n"
    "    ImGui::ShowDemoWindow()\n");
  lua_error(L);return 0;
}


static int _wrap_ShowAboutWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool *arg1 = (bool *) 0 ;
  
  SWIG_check_num_args("ImGui::ShowAboutWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowAboutWindow",1,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ShowAboutWindow",1,SWIGTYPE_p_bool);
  }
  
  ImGui::ShowAboutWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowAboutWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowAboutWindow",0,0)
  ImGui::ShowAboutWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowAboutWindow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_ShowAboutWindow__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ShowAboutWindow__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ShowAboutWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ShowAboutWindow(bool *)\n"
    "    ImGui::ShowAboutWindow()\n");
  lua_error(L);return 0;
}


static int _wrap_ShowMetricsWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool *arg1 = (bool *) 0 ;
  
  SWIG_check_num_args("ImGui::ShowMetricsWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowMetricsWindow",1,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ShowMetricsWindow",1,SWIGTYPE_p_bool);
  }
  
  ImGui::ShowMetricsWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowMetricsWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowMetricsWindow",0,0)
  ImGui::ShowMetricsWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowMetricsWindow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_ShowMetricsWindow__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ShowMetricsWindow__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ShowMetricsWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ShowMetricsWindow(bool *)\n"
    "    ImGui::ShowMetricsWindow()\n");
  lua_error(L);return 0;
}


static int _wrap_ShowStyleEditor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  SWIG_check_num_args("ImGui::ShowStyleEditor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowStyleEditor",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ShowStyleEditor",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  ImGui::ShowStyleEditor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowStyleEditor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowStyleEditor",0,0)
  ImGui::ShowStyleEditor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowStyleEditor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_ShowStyleEditor__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStyle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ShowStyleEditor__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ShowStyleEditor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ShowStyleEditor(ImGuiStyle *)\n"
    "    ImGui::ShowStyleEditor()\n");
  lua_error(L);return 0;
}


static int _wrap_ShowStyleSelector(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ShowStyleSelector",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ShowStyleSelector",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::ShowStyleSelector((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowFontSelector(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::ShowFontSelector",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ShowFontSelector",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::ShowFontSelector((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowUserGuide(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowUserGuide",0,0)
  ImGui::ShowUserGuide();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetVersion(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetVersion",0,0)
  result = (char *)ImGui::GetVersion();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsDark__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  SWIG_check_num_args("ImGui::StyleColorsDark",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsDark",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("StyleColorsDark",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  ImGui::StyleColorsDark(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsDark__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::StyleColorsDark",0,0)
  ImGui::StyleColorsDark();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsDark(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_StyleColorsDark__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStyle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StyleColorsDark__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StyleColorsDark'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::StyleColorsDark(ImGuiStyle *)\n"
    "    ImGui::StyleColorsDark()\n");
  lua_error(L);return 0;
}


static int _wrap_StyleColorsClassic__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  SWIG_check_num_args("ImGui::StyleColorsClassic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsClassic",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("StyleColorsClassic",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  ImGui::StyleColorsClassic(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsClassic__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::StyleColorsClassic",0,0)
  ImGui::StyleColorsClassic();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsClassic(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_StyleColorsClassic__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStyle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StyleColorsClassic__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StyleColorsClassic'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::StyleColorsClassic(ImGuiStyle *)\n"
    "    ImGui::StyleColorsClassic()\n");
  lua_error(L);return 0;
}


static int _wrap_StyleColorsLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  SWIG_check_num_args("ImGui::StyleColorsLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsLight",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("StyleColorsLight",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  ImGui::StyleColorsLight(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::StyleColorsLight",0,0)
  ImGui::StyleColorsLight();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StyleColorsLight(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_StyleColorsLight__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStyle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StyleColorsLight__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StyleColorsLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::StyleColorsLight(ImGuiStyle *)\n"
    "    ImGui::StyleColorsLight()\n");
  lua_error(L);return 0;
}


static int _wrap_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Begin",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Begin",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Begin",3,"ImGuiWindowFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Begin",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Begin",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Begin",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Begin",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::Begin((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Begin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Begin",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::Begin((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Begin__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Begin__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Begin(char const *,bool *,ImGuiWindowFlags)\n"
    "    ImGui::Begin(char const *,bool *)\n"
    "    ImGui::Begin(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_End(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::End",0,0)
  ImGui::End();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::BeginChild",4,"ImGuiWindowFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (ImGuiWindowFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginChild((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::BeginChild",4,"ImGuiWindowFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (ImGuiWindowFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChild",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (bool)ImGui::BeginChild(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChild(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginChild__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginChild__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeginChild__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeginChild__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginChild__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginChild__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BeginChild__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BeginChild__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginChild(char const *,ImVec2 const &,bool,ImGuiWindowFlags)\n"
    "    ImGui::BeginChild(char const *,ImVec2 const &,bool)\n"
    "    ImGui::BeginChild(char const *,ImVec2 const &)\n"
    "    ImGui::BeginChild(char const *)\n"
    "    ImGui::BeginChild(ImGuiID,ImVec2 const &,bool,ImGuiWindowFlags)\n"
    "    ImGui::BeginChild(ImGuiID,ImVec2 const &,bool)\n"
    "    ImGui::BeginChild(ImGuiID,ImVec2 const &)\n"
    "    ImGui::BeginChild(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_EndChild(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndChild",0,0)
  ImGui::EndChild();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowAppearing(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowAppearing",0,0)
  result = (bool)ImGui::IsWindowAppearing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowCollapsed(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowCollapsed",0,0)
  result = (bool)ImGui::IsWindowCollapsed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowFocused__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiFocusedFlags arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowFocused",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsWindowFocused",1,"ImGuiFocusedFlags");
  arg1 = (ImGuiFocusedFlags)lua_tonumber(L, 1);
  result = (bool)ImGui::IsWindowFocused(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowFocused__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowFocused",0,0)
  result = (bool)ImGui::IsWindowFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowFocused(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_IsWindowFocused__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsWindowFocused__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsWindowFocused'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsWindowFocused(ImGuiFocusedFlags)\n"
    "    ImGui::IsWindowFocused()\n");
  lua_error(L);return 0;
}


static int _wrap_IsWindowHovered__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowHovered",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsWindowHovered",1,"ImGuiHoveredFlags");
  arg1 = (ImGuiHoveredFlags)lua_tonumber(L, 1);
  result = (bool)ImGui::IsWindowHovered(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowHovered__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowHovered",0,0)
  result = (bool)ImGui::IsWindowHovered();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowHovered(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_IsWindowHovered__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsWindowHovered__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsWindowHovered'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsWindowHovered(ImGuiHoveredFlags)\n"
    "    ImGui::IsWindowHovered()\n");
  lua_error(L);return 0;
}


static int _wrap_GetWindowDrawList(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetWindowDrawList",0,0)
  result = (ImDrawList *)ImGui::GetWindowDrawList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowDpiScale(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetWindowDpiScale",0,0)
  result = (float)ImGui::GetWindowDpiScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetWindowViewport",0,0)
  result = (ImGuiViewport *)ImGui::GetWindowViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetWindowPos",0,0)
  result = ImGui::GetWindowPos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowSize(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetWindowSize",0,0)
  result = ImGui::GetWindowSize();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowWidth(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetWindowWidth",0,0)
  result = (float)ImGui::GetWindowWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowHeight(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetWindowHeight",0,0)
  result = (float)ImGui::GetWindowHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowPos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  ImVec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowPos",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowPos",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowPos",2,"ImGuiCond");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::SetNextWindowPos",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowPos",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowPos",3,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2,(ImVec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowPos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowPos",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowPos",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowPos",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowPos",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowPos__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowPos",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowPos",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowPos",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowPos(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SetNextWindowPos__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextWindowPos__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SetNextWindowPos__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextWindowPos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextWindowPos(ImVec2 const &,ImGuiCond,ImVec2 const &)\n"
    "    ImGui::SetNextWindowPos(ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetNextWindowPos(ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowSize",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSize",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSize",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSize",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSize",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSize",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowSize((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowSize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SetNextWindowSize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextWindowSize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextWindowSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextWindowSize(ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetNextWindowSize(ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowSizeConstraints__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowSizeConstraints",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",3,"ImGuiSizeCallback");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SetNextWindowSizeConstraints");
  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowSizeConstraints__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowSizeConstraints",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",3,"ImGuiSizeCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void);
  }
  
  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowSizeConstraints__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowSizeConstraints",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowSizeConstraints",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowSizeConstraints(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetNextWindowSizeConstraints__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SetNextWindowSizeConstraints__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SetNextWindowSizeConstraints__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextWindowSizeConstraints'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextWindowSizeConstraints(ImVec2 const &,ImVec2 const &,ImGuiSizeCallback,void *)\n"
    "    ImGui::SetNextWindowSizeConstraints(ImVec2 const &,ImVec2 const &,ImGuiSizeCallback)\n"
    "    ImGui::SetNextWindowSizeConstraints(ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowContentSize(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowContentSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowContentSize",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowContentSize",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowCollapsed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowCollapsed",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextWindowCollapsed",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowCollapsed",2,"ImGuiCond");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextWindowCollapsed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowCollapsed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowCollapsed",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextWindowCollapsed",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::SetNextWindowCollapsed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowCollapsed(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetNextWindowCollapsed__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextWindowCollapsed__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextWindowCollapsed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextWindowCollapsed(bool,ImGuiCond)\n"
    "    ImGui::SetNextWindowCollapsed(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowFocus(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetNextWindowFocus",0,0)
  ImGui::SetNextWindowFocus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowBgAlpha(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowBgAlpha",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowBgAlpha",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetNextWindowBgAlpha(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowViewport",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowViewport",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::SetNextWindowViewport(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowPos((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowSize((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"ImGuiCond");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetWindowCollapsed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::SetWindowCollapsed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetWindowFocus",0,0)
  ImGui::SetWindowFocus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowFontScale(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetWindowFontScale",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetWindowFontScale",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetWindowFontScale(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowPos",3,"ImGuiCond");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowSize",3,"ImGuiCond");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowCollapsed",3,"ImGuiCond");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::SetWindowCollapsed((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowFocus",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowFocus",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::SetWindowFocus((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowFocus(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SetWindowFocus__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetWindowFocus__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetWindowFocus()\n"
    "    ImGui::SetWindowFocus(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_GetContentRegionMax(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetContentRegionMax",0,0)
  result = ImGui::GetContentRegionMax();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetContentRegionAvail(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetContentRegionAvail",0,0)
  result = ImGui::GetContentRegionAvail();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowContentRegionMin(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetWindowContentRegionMin",0,0)
  result = ImGui::GetWindowContentRegionMin();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowContentRegionMax(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetWindowContentRegionMax",0,0)
  result = ImGui::GetWindowContentRegionMax();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowContentRegionWidth(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetWindowContentRegionWidth",0,0)
  result = (float)ImGui::GetWindowContentRegionWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetScrollX(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetScrollX",0,0)
  result = (float)ImGui::GetScrollX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetScrollY(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetScrollY",0,0)
  result = (float)ImGui::GetScrollY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetScrollMaxX(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetScrollMaxX",0,0)
  result = (float)ImGui::GetScrollMaxX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetScrollMaxY(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetScrollMaxY",0,0)
  result = (float)ImGui::GetScrollMaxY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollX",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollX(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollY",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollY(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHereX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollHereX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollHereX",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollHereX(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHereX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetScrollHereX",0,0)
  ImGui::SetScrollHereX();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHereX(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SetScrollHereX__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollHereX__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollHereX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollHereX(float)\n"
    "    ImGui::SetScrollHereX()\n");
  lua_error(L);return 0;
}


static int _wrap_SetScrollHereY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollHereY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollHereY",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollHereY(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHereY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetScrollHereY",0,0)
  ImGui::SetScrollHereY();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHereY(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SetScrollHereY__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollHereY__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollHereY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollHereY(float)\n"
    "    ImGui::SetScrollHereY()\n");
  lua_error(L);return 0;
}


static int _wrap_SetScrollFromPosX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosX",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosX",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosX",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetScrollFromPosX(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollFromPosX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosX",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollFromPosX(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollFromPosY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosY",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosY",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosY",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetScrollFromPosY(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollFromPosY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosY",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollFromPosY(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImGui::PushFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::PushFont",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("PushFont",1,SWIGTYPE_p_ImFont);
  }
  
  ImGui::PushFont(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopFont(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopFont",0,0)
  ImGui::PopFont();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushStyleColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImGui::PushStyleColor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleColor",1,"ImGuiCol");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleColor",2,"ImU32");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  ImGui::PushStyleColor(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushStyleColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  ImVec4 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::PushStyleColor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleColor",1,"ImGuiCol");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushStyleColor",2,"ImVec4 const &");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("PushStyleColor",2,SWIGTYPE_p_ImVec4);
  }
  
  ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushStyleColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PushStyleColor__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PushStyleColor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushStyleColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PushStyleColor(ImGuiCol,ImU32)\n"
    "    ImGui::PushStyleColor(ImGuiCol,ImVec4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PopStyleColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::PopStyleColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PopStyleColor",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::PopStyleColor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopStyleColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopStyleColor",0,0)
  ImGui::PopStyleColor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopStyleColor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_PopStyleColor__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_PopStyleColor__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PopStyleColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PopStyleColor(int)\n"
    "    ImGui::PopStyleColor()\n");
  lua_error(L);return 0;
}


static int _wrap_PushStyleVar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleVar arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::PushStyleVar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVar",1,"ImGuiStyleVar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleVar",2,"float");
  arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::PushStyleVar(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushStyleVar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleVar arg1 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::PushStyleVar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVar",1,"ImGuiStyleVar");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushStyleVar",2,"ImVec2 const &");
  arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PushStyleVar",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushStyleVar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PushStyleVar__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PushStyleVar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushStyleVar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PushStyleVar(ImGuiStyleVar,float)\n"
    "    ImGui::PushStyleVar(ImGuiStyleVar,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PopStyleVar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::PopStyleVar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PopStyleVar",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::PopStyleVar(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopStyleVar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopStyleVar",0,0)
  ImGui::PopStyleVar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopStyleVar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_PopStyleVar__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_PopStyleVar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PopStyleVar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PopStyleVar(int)\n"
    "    ImGui::PopStyleVar()\n");
  lua_error(L);return 0;
}


static int _wrap_GetStyleColorVec4(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetStyleColorVec4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetStyleColorVec4",1,"ImGuiCol");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetFont",0,0)
  result = (ImFont *)ImGui::GetFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFontSize(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetFontSize",0,0)
  result = (float)ImGui::GetFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFontTexUvWhitePixel(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetFontTexUvWhitePixel",0,0)
  result = ImGui::GetFontTexUvWhitePixel();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColorU32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGui::GetColorU32",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImGuiCol");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetColorU32",2,"float");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (ImU32)ImGui::GetColorU32(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColorU32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGui::GetColorU32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImGuiCol");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  result = (ImU32)ImGui::GetColorU32(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColorU32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGui::GetColorU32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImVec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("GetColorU32",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColorU32__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 arg1 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGui::GetColorU32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImU32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImU32)lua_tonumber(L, 1);
  result = (ImU32)ImGui::GetColorU32(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColorU32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GetColorU32__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetColorU32__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetColorU32__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GetColorU32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetColorU32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetColorU32(ImGuiCol,float)\n"
    "    ImGui::GetColorU32(ImGuiCol)\n"
    "    ImGui::GetColorU32(ImVec4 const &)\n"
    "    ImGui::GetColorU32(ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_PushItemWidth(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::PushItemWidth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushItemWidth",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::PushItemWidth(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopItemWidth(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopItemWidth",0,0)
  ImGui::PopItemWidth();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextItemWidth(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextItemWidth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextItemWidth",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetNextItemWidth(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcItemWidth(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::CalcItemWidth",0,0)
  result = (float)ImGui::CalcItemWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushTextWrapPos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::PushTextWrapPos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushTextWrapPos",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::PushTextWrapPos(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushTextWrapPos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PushTextWrapPos",0,0)
  ImGui::PushTextWrapPos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushTextWrapPos(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_PushTextWrapPos__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_PushTextWrapPos__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushTextWrapPos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PushTextWrapPos(float)\n"
    "    ImGui::PushTextWrapPos()\n");
  lua_error(L);return 0;
}


static int _wrap_PopTextWrapPos(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopTextWrapPos",0,0)
  ImGui::PopTextWrapPos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushAllowKeyboardFocus(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::PushAllowKeyboardFocus",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::PushAllowKeyboardFocus",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::PushAllowKeyboardFocus(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopAllowKeyboardFocus(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopAllowKeyboardFocus",0,0)
  ImGui::PopAllowKeyboardFocus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushButtonRepeat(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::PushButtonRepeat",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::PushButtonRepeat",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::PushButtonRepeat(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopButtonRepeat(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopButtonRepeat",0,0)
  ImGui::PopButtonRepeat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Separator(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Separator",0,0)
  ImGui::Separator();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SameLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SameLine",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SameLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SameLine",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SameLine(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SameLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SameLine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SameLine",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SameLine(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SameLine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SameLine",0,0)
  ImGui::SameLine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SameLine(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SameLine__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SameLine__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SameLine__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SameLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SameLine(float,float)\n"
    "    ImGui::SameLine(float)\n"
    "    ImGui::SameLine()\n");
  lua_error(L);return 0;
}


static int _wrap_NewLine(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::NewLine",0,0)
  ImGui::NewLine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spacing(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Spacing",0,0)
  ImGui::Spacing();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dummy(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::Dummy",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::Dummy",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Dummy",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::Dummy((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Indent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::Indent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Indent",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::Indent(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Indent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Indent",0,0)
  ImGui::Indent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Indent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Indent__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Indent__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Indent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Indent(float)\n"
    "    ImGui::Indent()\n");
  lua_error(L);return 0;
}


static int _wrap_Unindent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::Unindent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Unindent",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::Unindent(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unindent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Unindent",0,0)
  ImGui::Unindent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unindent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Unindent__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Unindent__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unindent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Unindent(float)\n"
    "    ImGui::Unindent()\n");
  lua_error(L);return 0;
}


static int _wrap_BeginGroup(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::BeginGroup",0,0)
  ImGui::BeginGroup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndGroup(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndGroup",0,0)
  ImGui::EndGroup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCursorPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetCursorPos",0,0)
  result = ImGui::GetCursorPos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCursorPosX(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetCursorPosX",0,0)
  result = (float)ImGui::GetCursorPosX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCursorPosY(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetCursorPosY",0,0)
  result = (float)ImGui::GetCursorPosY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCursorPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetCursorPos",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetCursorPos",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetCursorPos",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetCursorPos((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCursorPosX(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetCursorPosX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetCursorPosX",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetCursorPosX(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCursorPosY(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetCursorPosY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetCursorPosY",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetCursorPosY(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCursorStartPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetCursorStartPos",0,0)
  result = ImGui::GetCursorStartPos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCursorScreenPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetCursorScreenPos",0,0)
  result = ImGui::GetCursorScreenPos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCursorScreenPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetCursorScreenPos",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetCursorScreenPos",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetCursorScreenPos",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AlignTextToFramePadding(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::AlignTextToFramePadding",0,0)
  ImGui::AlignTextToFramePadding();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTextLineHeight(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetTextLineHeight",0,0)
  result = (float)ImGui::GetTextLineHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTextLineHeightWithSpacing(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetTextLineHeightWithSpacing",0,0)
  result = (float)ImGui::GetTextLineHeightWithSpacing();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFrameHeight(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetFrameHeight",0,0)
  result = (float)ImGui::GetFrameHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFrameHeightWithSpacing(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetFrameHeightWithSpacing",0,0)
  result = (float)ImGui::GetFrameHeightWithSpacing();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PushID",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PushID",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::PushID((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PushID",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PushID",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::PushID",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::PushID((char const *)arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::PushID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::PushID",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"PushID");
  ImGui::PushID((void const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushID__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::PushID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushID",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::PushID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushID(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PushID__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_PushID__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_PushID__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PushID__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PushID(char const *)\n"
    "    ImGui::PushID(char const *,char const *)\n"
    "    ImGui::PushID(void const *)\n"
    "    ImGui::PushID(int)\n");
  lua_error(L);return 0;
}


static int _wrap_PopID(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopID",0,0)
  ImGui::PopID();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetID",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetID",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiID)ImGui::GetID((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetID",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetID",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::GetID",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetID",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"GetID");
  result = (ImGuiID)ImGui::GetID((void const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetID(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GetID__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetID__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GetID__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetID(char const *)\n"
    "    ImGui::GetID(char const *,char const *)\n"
    "    ImGui::GetID(void const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TextUnformatted__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::TextUnformatted",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextUnformatted",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextUnformatted",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::TextUnformatted((char const *)arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextUnformatted__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::TextUnformatted",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextUnformatted",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::TextUnformatted((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextUnformatted(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TextUnformatted__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextUnformatted__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TextUnformatted'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TextUnformatted(char const *,char const *)\n"
    "    ImGui::TextUnformatted(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Text(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::Text",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Text",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::Text((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   va_list arg2 ;
//   va_list *argp2 ;
  
//   SWIG_check_num_args("ImGui::TextV",2,2)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextV",1,"char const *");
//   if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextV",2,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TextV",2,SWIGTYPE_p_va_list);
//   }
//   arg2 = *argp2;
  
//   ImGui::TextV((char const *)arg1,arg2);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextColored(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::TextColored",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TextColored",1,"ImVec4 const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextColored",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("TextColored",1,SWIGTYPE_p_ImVec4);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextColoredV(lua_State* L) {
  int SWIG_arg = 0;
//   ImVec4 *arg1 = 0 ;
//   char *arg2 = (char *) 0 ;
//   va_list arg3 ;
//   va_list *argp3 ;
  
//   SWIG_check_num_args("ImGui::TextColoredV",3,3)
//   if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TextColoredV",1,"ImVec4 const &");
//   if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextColoredV",2,"char const *");
//   if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TextColoredV",3,"va_list");
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
//     SWIG_fail_ptr("TextColoredV",1,SWIGTYPE_p_ImVec4);
//   }
  
//   arg2 = (char *)lua_tostring(L, 2);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TextColoredV",3,SWIGTYPE_p_va_list);
//   }
//   arg3 = *argp3;
  
//   ImGui::TextColoredV((ImVec4 const &)*arg1,(char const *)arg2,arg3);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextDisabled(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::TextDisabled",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextDisabled",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::TextDisabled((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextDisabledV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   va_list arg2 ;
//   va_list *argp2 ;
  
//   SWIG_check_num_args("ImGui::TextDisabledV",2,2)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextDisabledV",1,"char const *");
//   if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextDisabledV",2,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TextDisabledV",2,SWIGTYPE_p_va_list);
//   }
//   arg2 = *argp2;
  
//   ImGui::TextDisabledV((char const *)arg1,arg2);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextWrapped(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::TextWrapped",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextWrapped",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::TextWrapped((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextWrappedV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   va_list arg2 ;
//   va_list *argp2 ;
  
//   SWIG_check_num_args("ImGui::TextWrappedV",2,2)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextWrappedV",1,"char const *");
//   if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextWrappedV",2,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TextWrappedV",2,SWIGTYPE_p_va_list);
//   }
//   arg2 = *argp2;
  
//   ImGui::TextWrappedV((char const *)arg1,arg2);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_LabelText(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::LabelText",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LabelText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LabelText",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LabelTextV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   char *arg2 = (char *) 0 ;
//   va_list arg3 ;
//   va_list *argp3 ;
  
//   SWIG_check_num_args("ImGui::LabelTextV",3,3)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LabelTextV",1,"char const *");
//   if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LabelTextV",2,"char const *");
//   if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::LabelTextV",3,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
//   arg2 = (char *)lua_tostring(L, 2);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("LabelTextV",3,SWIGTYPE_p_va_list);
//   }
//   arg3 = *argp3;
  
//   ImGui::LabelTextV((char const *)arg1,(char const *)arg2,arg3);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_BulletText(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::BulletText",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BulletText",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::BulletText((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BulletTextV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   va_list arg2 ;
//   va_list *argp2 ;
  
//   SWIG_check_num_args("ImGui::BulletTextV",2,2)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BulletTextV",1,"char const *");
//   if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BulletTextV",2,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("BulletTextV",2,SWIGTYPE_p_va_list);
//   }
//   arg2 = *argp2;
  
//   ImGui::BulletTextV((char const *)arg1,arg2);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Button",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Button",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Button",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Button",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Button",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Button",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::Button((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Button__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Button__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Button'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Button(char const *,ImVec2 const &)\n"
    "    ImGui::Button(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SmallButton(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SmallButton",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SmallButton",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::SmallButton((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InvisibleButton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiButtonFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InvisibleButton",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InvisibleButton",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::InvisibleButton",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InvisibleButton",3,"ImGuiButtonFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InvisibleButton",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiButtonFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InvisibleButton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InvisibleButton",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InvisibleButton",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::InvisibleButton",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InvisibleButton",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InvisibleButton(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InvisibleButton__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InvisibleButton__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InvisibleButton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InvisibleButton(char const *,ImVec2 const &,ImGuiButtonFlags)\n"
    "    ImGui::InvisibleButton(char const *,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArrowButton(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ArrowButton",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ArrowButton",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ArrowButton",2,"ImGuiDir");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  result = (bool)ImGui::ArrowButton((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;
  
  SWIG_check_num_args("ImGui::Image",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Image",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::Image",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Image",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::Image",5,"ImVec4 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::Image",6,"ImVec4 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"Image");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("Image",5,SWIGTYPE_p_ImVec4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("Image",6,SWIGTYPE_p_ImVec4);
  }
  
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  
  SWIG_check_num_args("ImGui::Image",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Image",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::Image",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Image",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::Image",5,"ImVec4 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"Image");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("Image",5,SWIGTYPE_p_ImVec4);
  }
  
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  SWIG_check_num_args("ImGui::Image",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Image",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::Image",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Image",4,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"Image");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",4,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::Image",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Image",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::Image",3,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"Image");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",3,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::Image",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Image",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"Image");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::Image(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Image__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Image__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Image__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Image__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Image__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Image(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec4 const &,ImVec4 const &)\n"
    "    ImGui::Image(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec4 const &)\n"
    "    ImGui::Image(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImGui::Image(ImTextureID,ImVec2 const &,ImVec2 const &)\n"
    "    ImGui::Image(ImTextureID,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageButton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButton",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ImageButton",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ImageButton",6,"ImVec4 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::ImageButton",7,"ImVec4 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImageButton",6,SWIGTYPE_p_ImVec4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImageButton",7,SWIGTYPE_p_ImVec4);
  }
  
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButton",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ImageButton",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ImageButton",6,"ImVec4 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImageButton",6,SWIGTYPE_p_ImVec4);
  }
  
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButton",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ImageButton",5,"int");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButton",4,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",4,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"ImTextureID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"ImVec2 const &");
  arg1=(ImTextureID)SWIG_MustGetPtr(L,1,0,0,1,"ImageButton");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButton",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButton(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageButton__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImageButton__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImageButton__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImageButton__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ImageButton__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ImageButton__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageButton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,int,ImVec4 const &,ImVec4 const &)\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,int,ImVec4 const &)\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,int)\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &,ImVec2 const &)\n"
    "    ImGui::ImageButton(ImTextureID,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Checkbox(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Checkbox",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Checkbox",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Checkbox",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Checkbox",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::Checkbox((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckboxFlags(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CheckboxFlags",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CheckboxFlags",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CheckboxFlags",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CheckboxFlags",3,"unsigned int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("CheckboxFlags",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::RadioButton",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::RadioButton",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::RadioButton",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::RadioButton",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::RadioButton",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::RadioButton",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RadioButton",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RadioButton",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadioButton(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RadioButton__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RadioButton__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RadioButton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RadioButton(char const *,bool)\n"
    "    ImGui::RadioButton(char const *,int *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ProgressBar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::ProgressBar",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ProgressBar",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ProgressBar",2,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::ProgressBar",3,"char const *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ProgressBar",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::ProgressBar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ProgressBar",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ProgressBar",2,"ImVec2 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ProgressBar",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::ProgressBar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ProgressBar",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::ProgressBar(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ProgressBar__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ProgressBar__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ProgressBar__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ProgressBar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ProgressBar(float,ImVec2 const &,char const *)\n"
    "    ImGui::ProgressBar(float,ImVec2 const &)\n"
    "    ImGui::ProgressBar(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Bullet(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Bullet",0,0)
  ImGui::Bullet();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginCombo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiComboFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginCombo",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginCombo",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::BeginCombo",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginCombo",3,"ImGuiComboFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (ImGuiComboFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginCombo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginCombo",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginCombo",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::BeginCombo",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginCombo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginCombo__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginCombo__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginCombo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginCombo(char const *,char const *,ImGuiComboFlags)\n"
    "    ImGui::BeginCombo(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndCombo(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndCombo",0,0)
  ImGui::EndCombo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::Combo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("Combo",3,SWIGTYPE_p_p_char);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::Combo",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("Combo",3,SWIGTYPE_p_p_char);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::Combo",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"bool (*)(void *,int,char const **)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::Combo",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::Combo",6,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
    SWIG_fail_ptr("Combo",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Combo");
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Combo",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"bool (*)(void *,int,char const **)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::Combo",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
    SWIG_fail_ptr("Combo",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Combo");
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Combo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Combo__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Combo__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Combo__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Combo__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Combo__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Combo__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Combo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Combo(char const *,int *,char const *const [],int,int)\n"
    "    ImGui::Combo(char const *,int *,char const *const [],int)\n"
    "    ImGui::Combo(char const *,int *,char const *,int)\n"
    "    ImGui::Combo(char const *,int *,char const *)\n"
    "    ImGui::Combo(char const *,int *,bool (*)(void *,int,char const **),void *,int,int)\n"
    "    ImGui::Combo(char const *,int *,bool (*)(void *,int,char const **),void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DragFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat2",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat2",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat2",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat2",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat2",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat2",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat3",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat3",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat3",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat3",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat3",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat3",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat4",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat4",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat4",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat4",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat4",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat4",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragFloatRange2",6,"float");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragFloatRange2",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragFloatRange2",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragFloatRange2",9,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragFloatRange2",6,"float");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragFloatRange2",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragFloatRange2",8,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragFloatRange2",6,"float");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragFloatRange2",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragFloatRange2",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloatRange2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloatRange2(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DragFloatRange2__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragFloatRange2__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragFloatRange2__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragFloatRange2__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloatRange2__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_DragFloatRange2__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_DragFloatRange2__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragFloatRange2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float,float,float,char const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float,float,float,char const *,char const *)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float,float,float,char const *)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float,float,float)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float,float)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *,float)\n"
    "    ImGui::DragFloatRange2(char const *,float *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_DragInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::DragInt((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragInt__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragInt__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragInt__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragInt__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragInt__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragInt__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragInt(char const *,int *,float,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragInt(char const *,int *,float,int,int,char const *)\n"
    "    ImGui::DragInt(char const *,int *,float,int,int)\n"
    "    ImGui::DragInt(char const *,int *,float,int)\n"
    "    ImGui::DragInt(char const *,int *,float)\n"
    "    ImGui::DragInt(char const *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_DragInt2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt2",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt2",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt2",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt2",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt2",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt2",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt2",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt2",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt2(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragInt2__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragInt2__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragInt2__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragInt2__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragInt2__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragInt2__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragInt2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragInt2(char const *,int [2],float,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragInt2(char const *,int [2],float,int,int,char const *)\n"
    "    ImGui::DragInt2(char const *,int [2],float,int,int)\n"
    "    ImGui::DragInt2(char const *,int [2],float,int)\n"
    "    ImGui::DragInt2(char const *,int [2],float)\n"
    "    ImGui::DragInt2(char const *,int [2])\n");
  lua_error(L);return 0;
}


static int _wrap_DragInt3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt3",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt3",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt3",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt3",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt3",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt3",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt3",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt3",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt3",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt3",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt3(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragInt3__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragInt3__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragInt3__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragInt3__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragInt3__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragInt3__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragInt3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragInt3(char const *,int [3],float,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragInt3(char const *,int [3],float,int,int,char const *)\n"
    "    ImGui::DragInt3(char const *,int [3],float,int,int)\n"
    "    ImGui::DragInt3(char const *,int [3],float,int)\n"
    "    ImGui::DragInt3(char const *,int [3],float)\n"
    "    ImGui::DragInt3(char const *,int [3])\n");
  lua_error(L);return 0;
}


static int _wrap_DragInt4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt4",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt4",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt4",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt4",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt4",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt4",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt4",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt4",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt4",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt4",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragInt4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragInt4(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragInt4__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragInt4__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragInt4__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragInt4__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragInt4__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragInt4__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragInt4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragInt4(char const *,int [4],float,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragInt4(char const *,int [4],float,int,int,char const *)\n"
    "    ImGui::DragInt4(char const *,int [4],float,int,int)\n"
    "    ImGui::DragInt4(char const *,int [4],float,int)\n"
    "    ImGui::DragInt4(char const *,int [4],float)\n"
    "    ImGui::DragInt4(char const *,int [4])\n");
  lua_error(L);return 0;
}


static int _wrap_DragIntRange2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragIntRange2",6,"int");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragIntRange2",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragIntRange2",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragIntRange2",9,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragIntRange2",6,"int");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragIntRange2",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragIntRange2",8,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragIntRange2",6,"int");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragIntRange2",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragIntRange2",6,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragIntRange2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragIntRange2(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DragIntRange2__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragIntRange2__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragIntRange2__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragIntRange2__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragIntRange2__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_DragIntRange2__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_DragIntRange2__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragIntRange2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float,int,int,char const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float,int,int,char const *,char const *)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float,int,int,char const *)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float,int,int)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float,int)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *,float)\n"
    "    ImGui::DragIntRange2(char const *,int *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_DragScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalar",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragScalar",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::DragScalar",8,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalar");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalar",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragScalar",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalar");
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalar",6,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalar");
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalar__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalar__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::DragScalarN",7,"void const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragScalarN",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragScalarN",9,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"DragScalarN");
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::DragScalarN",7,"void const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragScalarN",8,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"DragScalarN");
  arg8 = (char *)lua_tostring(L, 8);
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::DragScalarN",7,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"DragScalarN");
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat2",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat2",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat2",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat2",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat2",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat2",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat3",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat3",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat3",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat3",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat3",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat3",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat3",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat3",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat3",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat4",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat4",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat4",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat4",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat4",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat4",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat4",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat4",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderAngle",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderAngle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderAngle",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderAngle",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderAngle",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderAngle",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderAngle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderAngle",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderAngle",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderAngle",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderAngle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderAngle",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderAngle",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderAngle",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderAngle",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderAngle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SliderAngle__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SliderAngle__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderAngle__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderAngle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderAngle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderAngle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderAngle(char const *,float *,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderAngle(char const *,float *,float,float,char const *)\n"
    "    ImGui::SliderAngle(char const *,float *,float,float)\n"
    "    ImGui::SliderAngle(char const *,float *,float)\n"
    "    ImGui::SliderAngle(char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderInt__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderInt__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderInt__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderInt(char const *,int *,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderInt(char const *,int *,int,int,char const *)\n"
    "    ImGui::SliderInt(char const *,int *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderInt2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt2",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt2",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt2",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt2",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt2",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt2",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt2",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt2(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderInt2__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderInt2__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderInt2__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderInt2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderInt2(char const *,int [2],int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderInt2(char const *,int [2],int,int,char const *)\n"
    "    ImGui::SliderInt2(char const *,int [2],int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderInt3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt3",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt3",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt3",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt3",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt3",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt3",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt3",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt3",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt3",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt3",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt3",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt3",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt3(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderInt3__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderInt3__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderInt3__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderInt3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderInt3(char const *,int [3],int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderInt3(char const *,int [3],int,int,char const *)\n"
    "    ImGui::SliderInt3(char const *,int [3],int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderInt4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt4",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt4",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt4",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt4",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt4",6,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt4",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt4",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt4",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt4",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderInt4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt4",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt4",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SliderInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderInt4(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderInt4__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderInt4__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderInt4__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderInt4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderInt4(char const *,int [4],int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderInt4(char const *,int [4],int,int,char const *)\n"
    "    ImGui::SliderInt4(char const *,int [4],int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalar",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalar",5,"void const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::SliderScalar",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SliderScalar",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalar");
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalar",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalar",5,"void const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::SliderScalar",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalar");
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalar",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalar",5,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalar");
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalarN__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalarN",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderScalarN",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::SliderScalarN",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SliderScalarN",8,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderScalarN");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalarN__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalarN",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderScalarN",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::SliderScalarN",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderScalarN");
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalarN__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalarN",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderScalarN",6,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderScalarN");
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderFloat",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderFloat",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderFloat",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderFloat",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderFloat",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderFloat",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::VSliderFloat",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderFloat",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VSliderFloat",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderFloat",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderFloat",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderFloat",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderFloat",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderFloat",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderFloat",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderFloat",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VSliderFloat",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderFloat",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderFloat",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderFloat",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderFloat",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderFloat",5,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderFloat",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VSliderFloat",3,SWIGTYPE_p_float);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderFloat(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_VSliderFloat__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_VSliderFloat__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_VSliderFloat__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VSliderFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::VSliderFloat(char const *,ImVec2 const &,float *,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::VSliderFloat(char const *,ImVec2 const &,float *,float,float,char const *)\n"
    "    ImGui::VSliderFloat(char const *,ImVec2 const &,float *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_VSliderInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderInt",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderInt",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderInt",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderInt",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderInt",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderInt",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::VSliderInt",7,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderInt",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("VSliderInt",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderInt",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderInt",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderInt",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderInt",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderInt",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderInt",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderInt",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("VSliderInt",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderInt",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderInt",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderInt",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderInt",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderInt",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderInt",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("VSliderInt",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderInt(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_VSliderInt__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_VSliderInt__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_VSliderInt__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VSliderInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::VSliderInt(char const *,ImVec2 const &,int *,int,int,char const *,ImGuiSliderFlags)\n"
    "    ImGui::VSliderInt(char const *,ImVec2 const &,int *,int,int,char const *)\n"
    "    ImGui::VSliderInt(char const *,ImVec2 const &,int *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_VSliderScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderScalar",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderScalar",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderScalar",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::VSliderScalar",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::VSliderScalar",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::VSliderScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::VSliderScalar",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::VSliderScalar",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::VSliderScalar",8,"ImGuiSliderFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderScalar",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"VSliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"VSliderScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"VSliderScalar");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderScalar",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderScalar",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderScalar",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::VSliderScalar",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::VSliderScalar",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::VSliderScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::VSliderScalar",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::VSliderScalar",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderScalar",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"VSliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"VSliderScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"VSliderScalar");
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderScalar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::VSliderScalar",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderScalar",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderScalar",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::VSliderScalar",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::VSliderScalar",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::VSliderScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::VSliderScalar",6,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("VSliderScalar",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"VSliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"VSliderScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"VSliderScalar");
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VSliderScalar(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_VSliderScalar__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_VSliderScalar__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_VSliderScalar__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VSliderScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::VSliderScalar(char const *,ImVec2 const &,ImGuiDataType,void *,void const *,void const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::VSliderScalar(char const *,ImVec2 const &,ImGuiDataType,void *,void const *,void const *,char const *)\n"
    "    ImGui::VSliderScalar(char const *,ImVec2 const &,ImGuiDataType,void *,void const *,void const *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputText",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputText",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputText",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputText",4,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputText",5,"ImGuiInputTextCallback");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputText",6,"void *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputText",5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputText");
  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputText",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputText",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputText",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputText",4,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputText",5,"ImGuiInputTextCallback");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputText",5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputText__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputText",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputText",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputText",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputText",4,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputText__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputText",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputText",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputText",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputText(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputText__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputText__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_InputText__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_InputText__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputText(char const *,char *,size_t,ImGuiInputTextFlags,ImGuiInputTextCallback,void *)\n"
    "    ImGui::InputText(char const *,char *,size_t,ImGuiInputTextFlags,ImGuiInputTextCallback)\n"
    "    ImGui::InputText(char const *,char *,size_t,ImGuiInputTextFlags)\n"
    "    ImGui::InputText(char const *,char *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_InputTextMultiline__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextMultiline",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::InputTextMultiline",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextMultiline",5,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextMultiline",6,"ImGuiInputTextCallback");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextMultiline",7,"void *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextMultiline",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextMultiline",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"InputTextMultiline");
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextMultiline__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextMultiline",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::InputTextMultiline",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextMultiline",5,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextMultiline",6,"ImGuiInputTextCallback");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextMultiline",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextMultiline",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextMultiline__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextMultiline",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::InputTextMultiline",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextMultiline",5,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextMultiline",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextMultiline__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextMultiline",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::InputTextMultiline",4,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextMultiline",4,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextMultiline__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextMultiline",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextMultiline(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputTextMultiline__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_InputTextMultiline__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_InputTextMultiline__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_InputTextMultiline__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_InputTextMultiline__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputTextMultiline'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputTextMultiline(char const *,char *,size_t,ImVec2 const &,ImGuiInputTextFlags,ImGuiInputTextCallback,void *)\n"
    "    ImGui::InputTextMultiline(char const *,char *,size_t,ImVec2 const &,ImGuiInputTextFlags,ImGuiInputTextCallback)\n"
    "    ImGui::InputTextMultiline(char const *,char *,size_t,ImVec2 const &,ImGuiInputTextFlags)\n"
    "    ImGui::InputTextMultiline(char const *,char *,size_t,ImVec2 const &)\n"
    "    ImGui::InputTextMultiline(char const *,char *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_InputTextWithHint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextWithHint",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextWithHint",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextWithHint",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextWithHint",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextWithHint",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextWithHint",5,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextWithHint",6,"ImGuiInputTextCallback");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextWithHint",7,"void *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextWithHint",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"InputTextWithHint");
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextWithHint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextWithHint",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextWithHint",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextWithHint",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextWithHint",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextWithHint",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextWithHint",5,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextWithHint",6,"ImGuiInputTextCallback");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextWithHint",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextWithHint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextWithHint",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextWithHint",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextWithHint",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextWithHint",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextWithHint",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextWithHint",5,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextWithHint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextWithHint",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextWithHint",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextWithHint",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextWithHint",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextWithHint",4,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextWithHint(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputTextWithHint__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_InputTextWithHint__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_InputTextWithHint__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_InputTextWithHint__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputTextWithHint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputTextWithHint(char const *,char const *,char *,size_t,ImGuiInputTextFlags,ImGuiInputTextCallback,void *)\n"
    "    ImGui::InputTextWithHint(char const *,char const *,char *,size_t,ImGuiInputTextFlags,ImGuiInputTextCallback)\n"
    "    ImGui::InputTextWithHint(char const *,char const *,char *,size_t,ImGuiInputTextFlags)\n"
    "    ImGui::InputTextWithHint(char const *,char const *,char *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_InputFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputFloat",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputFloat",6,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputFloat",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputFloat",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputFloat__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputFloat__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputFloat__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_InputFloat__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_InputFloat__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputFloat(char const *,float *,float,float,char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputFloat(char const *,float *,float,float,char const *)\n"
    "    ImGui::InputFloat(char const *,float *,float,float)\n"
    "    ImGui::InputFloat(char const *,float *,float)\n"
    "    ImGui::InputFloat(char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputFloat2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat2",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat2",2,"float [2]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat2",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat2",4,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat2",2,"float [2]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat2",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat2",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat2",2,"float [2]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat2",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat2(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputFloat2__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputFloat2__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputFloat2__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputFloat2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputFloat2(char const *,float [2],char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputFloat2(char const *,float [2],char const *)\n"
    "    ImGui::InputFloat2(char const *,float [2])\n");
  lua_error(L);return 0;
}


static int _wrap_InputFloat3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat3",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat3",2,"float [3]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat3",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat3",4,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat3",2,"float [3]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat3",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat3",2,"float [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat3",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat3(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputFloat3__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputFloat3__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputFloat3__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputFloat3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputFloat3(char const *,float [3],char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputFloat3(char const *,float [3],char const *)\n"
    "    ImGui::InputFloat3(char const *,float [3])\n");
  lua_error(L);return 0;
}


static int _wrap_InputFloat4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat4",2,"float [4]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat4",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat4",4,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat4",2,"float [4]");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat4",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputFloat4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat4",2,"float [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InputFloat4",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputFloat4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputFloat4__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputFloat4__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputFloat4__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputFloat4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputFloat4(char const *,float [4],char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputFloat4(char const *,float [4],char const *)\n"
    "    ImGui::InputFloat4(char const *,float [4])\n");
  lua_error(L);return 0;
}


static int _wrap_InputInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputInt",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputInt",5,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputInt",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt",2,"int *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::InputInt((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputInt__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputInt__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputInt__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_InputInt__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputInt(char const *,int *,int,int,ImGuiInputTextFlags)\n"
    "    ImGui::InputInt(char const *,int *,int,int)\n"
    "    ImGui::InputInt(char const *,int *,int)\n"
    "    ImGui::InputInt(char const *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputInt2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt2",2,"int [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt2",3,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt2",2,SWIGTYPE_p_int);
  }
  
  arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt2",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt2",2,"int [2]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt2",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::InputInt2((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt2(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputInt2__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputInt2__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputInt2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputInt2(char const *,int [2],ImGuiInputTextFlags)\n"
    "    ImGui::InputInt2(char const *,int [2])\n");
  lua_error(L);return 0;
}


static int _wrap_InputInt3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt3",2,"int [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt3",3,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt3",2,SWIGTYPE_p_int);
  }
  
  arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt3",2,"int [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt3",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::InputInt3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputInt3__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputInt3__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputInt3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputInt3(char const *,int [3],ImGuiInputTextFlags)\n"
    "    ImGui::InputInt3(char const *,int [3])\n");
  lua_error(L);return 0;
}


static int _wrap_InputInt4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt4",2,"int [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt4",3,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt4",2,SWIGTYPE_p_int);
  }
  
  arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputInt4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt4",2,"int [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("InputInt4",2,SWIGTYPE_p_int);
  }
  
  result = (bool)ImGui::InputInt4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputInt4(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputInt4__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputInt4__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputInt4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputInt4(char const *,int [4],ImGuiInputTextFlags)\n"
    "    ImGui::InputInt4(char const *,int [4])\n");
  lua_error(L);return 0;
}


static int _wrap_InputDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputDouble",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputDouble",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputDouble",4,"double");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputDouble",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputDouble",6,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputDouble",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputDouble",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputDouble",4,"double");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputDouble",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputDouble__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputDouble",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputDouble",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputDouble",4,"double");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputDouble__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputDouble",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputDouble",3,"double");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputDouble__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputDouble",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double);
  }
  
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputDouble(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InputDouble__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputDouble__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputDouble__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_InputDouble__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_InputDouble__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputDouble(char const *,double *,double,double,char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputDouble(char const *,double *,double,double,char const *)\n"
    "    ImGui::InputDouble(char const *,double *,double,double)\n"
    "    ImGui::InputDouble(char const *,double *,double)\n"
    "    ImGui::InputDouble(char const *,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiInputTextFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalar",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::InputScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalar",5,"void const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::InputScalar",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::InputScalar",7,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"InputScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalar");
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (ImGuiInputTextFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalar",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::InputScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalar",5,"void const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::InputScalar",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"InputScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalar");
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalar",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::InputScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalar",5,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"InputScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalar");
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalar__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalar",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::InputScalar",4,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"InputScalar");
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalar__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalar",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar");
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalar(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_InputScalar__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_InputScalar__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_InputScalar__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_InputScalar__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_InputScalar__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputScalar(char const *,ImGuiDataType,void *,void const *,void const *,char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputScalar(char const *,ImGuiDataType,void *,void const *,void const *,char const *)\n"
    "    ImGui::InputScalar(char const *,ImGuiDataType,void *,void const *,void const *)\n"
    "    ImGui::InputScalar(char const *,ImGuiDataType,void *,void const *)\n"
    "    ImGui::InputScalar(char const *,ImGuiDataType,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputScalarN__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiInputTextFlags arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalarN",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputScalarN",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::InputScalarN",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::InputScalarN",8,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputScalarN");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiInputTextFlags)lua_tonumber(L, 8);
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalarN__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalarN",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputScalarN",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::InputScalarN",7,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputScalarN");
  arg7 = (char *)lua_tostring(L, 7);
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalarN__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalarN",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputScalarN",6,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputScalarN");
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalarN__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalarN",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalarN",5,"void const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalarN");
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalarN__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputScalarN",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputScalarN(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputScalarN__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_InputScalarN__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_InputScalarN__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_InputScalarN__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_InputScalarN__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputScalarN'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *,char const *,ImGuiInputTextFlags)\n"
    "    ImGui::InputScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *,char const *)\n"
    "    ImGui::InputScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *)\n"
    "    ImGui::InputScalarN(char const *,ImGuiDataType,void *,int,void const *)\n"
    "    ImGui::InputScalarN(char const *,ImGuiDataType,void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ColorEdit3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorEdit3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorEdit3",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorEdit3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorEdit3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorEdit3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit3",2,"float [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorEdit3",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorEdit3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColorEdit3__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColorEdit3__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColorEdit3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ColorEdit3(char const *,float [3],ImGuiColorEditFlags)\n"
    "    ImGui::ColorEdit3(char const *,float [3])\n");
  lua_error(L);return 0;
}


static int _wrap_ColorEdit4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorEdit4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorEdit4",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorEdit4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorEdit4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorEdit4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit4",2,"float [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorEdit4",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorEdit4(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColorEdit4__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColorEdit4__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColorEdit4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ColorEdit4(char const *,float [4],ImGuiColorEditFlags)\n"
    "    ImGui::ColorEdit4(char const *,float [4])\n");
  lua_error(L);return 0;
}


static int _wrap_ColorPicker3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorPicker3",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorPicker3",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPicker3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorPicker3",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker3",2,"float [3]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker3",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPicker3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColorPicker3__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColorPicker3__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColorPicker3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ColorPicker3(char const *,float [3],ImGuiColorEditFlags)\n"
    "    ImGui::ColorPicker3(char const *,float [3])\n");
  lua_error(L);return 0;
}


static int _wrap_ColorPicker4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorPicker4",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorPicker4",3,"ImGuiColorEditFlags");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ColorPicker4",4,"float const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker4",4,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPicker4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorPicker4",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorPicker4",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPicker4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorPicker4",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker4",2,"float [4]");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPicker4",2,SWIGTYPE_p_float);
  }
  
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPicker4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColorPicker4__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColorPicker4__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ColorPicker4__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColorPicker4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ColorPicker4(char const *,float [4],ImGuiColorEditFlags,float const *)\n"
    "    ImGui::ColorPicker4(char const *,float [4],ImGuiColorEditFlags)\n"
    "    ImGui::ColorPicker4(char const *,float [4])\n");
  lua_error(L);return 0;
}


static int _wrap_ColorButton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 arg4 ;
  ImVec2 *argp4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorButton",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorButton",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ColorButton",2,"ImVec4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorButton",3,"ImGuiColorEditFlags");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorButton",4,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ColorButton",2,SWIGTYPE_p_ImVec4);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ColorButton",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorButton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorButton",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorButton",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ColorButton",2,"ImVec4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorButton",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ColorButton",2,SWIGTYPE_p_ImVec4);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorButton__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ColorButton",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorButton",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ColorButton",2,"ImVec4 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ColorButton",2,SWIGTYPE_p_ImVec4);
  }
  
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorButton(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColorButton__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColorButton__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ColorButton__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColorButton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ColorButton(char const *,ImVec4 const &,ImGuiColorEditFlags,ImVec2)\n"
    "    ImGui::ColorButton(char const *,ImVec4 const &,ImGuiColorEditFlags)\n"
    "    ImGui::ColorButton(char const *,ImVec4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetColorEditOptions(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorEditFlags arg1 ;
  
  SWIG_check_num_args("ImGui::SetColorEditOptions",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColorEditOptions",1,"ImGuiColorEditFlags");
  arg1 = (ImGuiColorEditFlags)lua_tonumber(L, 1);
  ImGui::SetColorEditOptions(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNode",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::TreeNode((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNode",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNode",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"void const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNode",2,"char const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNode");
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TreeNode__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_TreeNode__SWIG_2(L);
        }
        return _wrap_TreeNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_TreeNode__SWIG_1(L);
        }
        return _wrap_TreeNode__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TreeNode(char const *)\n"
    "    ImGui::TreeNode(char const *,char const *,...)\n"
    "    ImGui::TreeNode(void const *,char const *,...)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeNodeV__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   char *arg2 = (char *) 0 ;
//   va_list arg3 ;
//   va_list *argp3 ;
//   bool result;
  
//   SWIG_check_num_args("ImGui::TreeNodeV",3,3)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeV",1,"char const *");
//   if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNodeV",2,"char const *");
//   if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TreeNodeV",3,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
//   arg2 = (char *)lua_tostring(L, 2);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TreeNodeV",3,SWIGTYPE_p_va_list);
//   }
//   arg3 = *argp3;
  
//   result = (bool)ImGui::TreeNodeV((char const *)arg1,(char const *)arg2,arg3);
//   lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeV__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
//   void *arg1 = (void *) 0 ;
//   char *arg2 = (char *) 0 ;
//   va_list arg3 ;
//   va_list *argp3 ;
//   bool result;
  
//   SWIG_check_num_args("ImGui::TreeNodeV",3,3)
//   if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeV",1,"void const *");
//   if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNodeV",2,"char const *");
//   if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TreeNodeV",3,"va_list");
//   arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeV");
//   arg2 = (char *)lua_tostring(L, 2);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TreeNodeV",3,SWIGTYPE_p_va_list);
//   }
//   arg3 = *argp3;
  
//   result = (bool)ImGui::TreeNodeV((void const *)arg1,(char const *)arg2,arg3);
//   lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeV(lua_State* L) {
  // int argc;
  // int argv[4]={
  //   1,2,3,4
  // };
  
  // argc = lua_gettop(L);
  // if (argc == 3) {
  //   int _v;
  //   {
  //     void *ptr;
  //     if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
  //       _v = 0;
  //     } else {
  //       _v = 1;
  //     }
  //   }
  //   if (_v) {
  //     {
  //       _v = SWIG_lua_isnilstring(L,argv[1]);
  //     }
  //     if (_v) {
  //       {
  //         void *ptr;
  //         if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
  //           _v = 0;
  //         } else {
  //           _v = 1;
  //         }
  //       }
  //       if (_v) {
  //         return _wrap_TreeNodeV__SWIG_1(L);
  //       }
  //     }
  //   }
  // }
  // if (argc == 3) {
  //   int _v;
  //   {
  //     _v = SWIG_lua_isnilstring(L,argv[0]);
  //   }
  //   if (_v) {
  //     {
  //       _v = SWIG_lua_isnilstring(L,argv[1]);
  //     }
  //     if (_v) {
  //       {
  //         void *ptr;
  //         if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
  //           _v = 0;
  //         } else {
  //           _v = 1;
  //         }
  //       }
  //       if (_v) {
  //         return _wrap_TreeNodeV__SWIG_0(L);
  //       }
  //     }
  //   }
  // }
  
  // SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeV'\n"
  //   "  Possible C/C++ prototypes are:\n"
  //   "    ImGui::TreeNodeV(char const *,char const *,va_list)\n"
  //   "    ImGui::TreeNodeV(void const *,char const *,va_list)\n");
  // lua_error(L);
  return 0;
}


static int _wrap_TreeNodeEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeEx",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeEx",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::TreeNodeEx((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeEx__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeEx",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeEx",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeEx__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeEx",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeEx",3,"char const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeEx");
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeEx(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TreeNodeEx__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TreeNodeEx__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_TreeNodeEx__SWIG_3(L);
          }
          return _wrap_TreeNodeEx__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_TreeNodeEx__SWIG_2(L);
          }
          return _wrap_TreeNodeEx__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TreeNodeEx(char const *,ImGuiTreeNodeFlags)\n"
    "    ImGui::TreeNodeEx(char const *)\n"
    "    ImGui::TreeNodeEx(char const *,ImGuiTreeNodeFlags,char const *,...)\n"
    "    ImGui::TreeNodeEx(void const *,ImGuiTreeNodeFlags,char const *,...)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeNodeExV__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   ImGuiTreeNodeFlags arg2 ;
//   char *arg3 = (char *) 0 ;
//   va_list arg4 ;
//   va_list *argp4 ;
//   bool result;
  
//   SWIG_check_num_args("ImGui::TreeNodeExV",4,4)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeExV",1,"char const *");
//   if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeExV",2,"ImGuiTreeNodeFlags");
//   if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeExV",3,"char const *");
//   if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::TreeNodeExV",4,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
//   arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
//   arg3 = (char *)lua_tostring(L, 3);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TreeNodeExV",4,SWIGTYPE_p_va_list);
//   }
//   arg4 = *argp4;
  
//   result = (bool)ImGui::TreeNodeExV((char const *)arg1,arg2,(char const *)arg3,arg4);
//   lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeExV__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
//   void *arg1 = (void *) 0 ;
//   ImGuiTreeNodeFlags arg2 ;
//   char *arg3 = (char *) 0 ;
//   va_list arg4 ;
//   va_list *argp4 ;
//   bool result;
  
//   SWIG_check_num_args("ImGui::TreeNodeExV",4,4)
//   if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeExV",1,"void const *");
//   if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeExV",2,"ImGuiTreeNodeFlags");
//   if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeExV",3,"char const *");
//   if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::TreeNodeExV",4,"va_list");
//   arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeExV");
//   arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
//   arg3 = (char *)lua_tostring(L, 3);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("TreeNodeExV",4,SWIGTYPE_p_va_list);
//   }
//   arg4 = *argp4;
  
//   result = (bool)ImGui::TreeNodeExV((void const *)arg1,arg2,(char const *)arg3,arg4);
//   lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeExV(lua_State* L) {
  // int argc;
  // int argv[5]={
  //   1,2,3,4,5
  // };
  
  // argc = lua_gettop(L);
  // if (argc == 4) {
  //   int _v;
  //   {
  //     void *ptr;
  //     if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
  //       _v = 0;
  //     } else {
  //       _v = 1;
  //     }
  //   }
  //   if (_v) {
  //     {
  //       _v = lua_isnumber(L,argv[1]);
  //     }
  //     if (_v) {
  //       {
  //         _v = SWIG_lua_isnilstring(L,argv[2]);
  //       }
  //       if (_v) {
  //         {
  //           void *ptr;
  //           if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
  //             _v = 0;
  //           } else {
  //             _v = 1;
  //           }
  //         }
  //         if (_v) {
  //           return _wrap_TreeNodeExV__SWIG_1(L);
  //         }
  //       }
  //     }
  //   }
  // }
  // if (argc == 4) {
  //   int _v;
  //   {
  //     _v = SWIG_lua_isnilstring(L,argv[0]);
  //   }
  //   if (_v) {
  //     {
  //       _v = lua_isnumber(L,argv[1]);
  //     }
  //     if (_v) {
  //       {
  //         _v = SWIG_lua_isnilstring(L,argv[2]);
  //       }
  //       if (_v) {
  //         {
  //           void *ptr;
  //           if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
  //             _v = 0;
  //           } else {
  //             _v = 1;
  //           }
  //         }
  //         if (_v) {
  //           return _wrap_TreeNodeExV__SWIG_0(L);
  //         }
  //       }
  //     }
  //   }
  // }
  
  // SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeExV'\n"
  //   "  Possible C/C++ prototypes are:\n"
  //   "    ImGui::TreeNodeExV(char const *,ImGuiTreeNodeFlags,char const *,va_list)\n"
  //   "    ImGui::TreeNodeExV(void const *,ImGuiTreeNodeFlags,char const *,va_list)\n");
  // lua_error(L);
  return 0;
}


static int _wrap_TreePush__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::TreePush",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreePush",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::TreePush((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreePush__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::TreePush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreePush",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreePush");
  ImGui::TreePush((void const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreePush__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::TreePush",0,0)
  ImGui::TreePush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreePush(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_TreePush__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TreePush__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TreePush__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreePush'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TreePush(char const *)\n"
    "    ImGui::TreePush(void const *)\n"
    "    ImGui::TreePush()\n");
  lua_error(L);return 0;
}


static int _wrap_TreePop(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::TreePop",0,0)
  ImGui::TreePop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTreeNodeToLabelSpacing(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetTreeNodeToLabelSpacing",0,0)
  result = (float)ImGui::GetTreeNodeToLabelSpacing();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapsingHeader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CollapsingHeader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CollapsingHeader",2,"ImGuiTreeNodeFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapsingHeader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CollapsingHeader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::CollapsingHeader((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapsingHeader__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CollapsingHeader",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CollapsingHeader",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CollapsingHeader",3,"ImGuiTreeNodeFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("CollapsingHeader",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiTreeNodeFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapsingHeader__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CollapsingHeader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CollapsingHeader",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("CollapsingHeader",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapsingHeader(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_CollapsingHeader__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollapsingHeader__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollapsingHeader__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CollapsingHeader__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollapsingHeader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::CollapsingHeader(char const *,ImGuiTreeNodeFlags)\n"
    "    ImGui::CollapsingHeader(char const *)\n"
    "    ImGui::CollapsingHeader(char const *,bool *,ImGuiTreeNodeFlags)\n"
    "    ImGui::CollapsingHeader(char const *,bool *)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextItemOpen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextItemOpen",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextItemOpen",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextItemOpen",2,"ImGuiCond");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextItemOpen(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextItemOpen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextItemOpen",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextItemOpen",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::SetNextItemOpen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextItemOpen(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetNextItemOpen__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextItemOpen__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextItemOpen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextItemOpen(bool,ImGuiCond)\n"
    "    ImGui::SetNextItemOpen(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Selectable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Selectable",3,"ImGuiSelectableFlags");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Selectable",4,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (ImGuiSelectableFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Selectable",4,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Selectable",3,"ImGuiSelectableFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (ImGuiSelectableFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::Selectable((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Selectable",3,"ImGuiSelectableFlags");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Selectable",4,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Selectable",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiSelectableFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("Selectable",4,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Selectable",3,"ImGuiSelectableFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Selectable",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiSelectableFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::Selectable",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("Selectable",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Selectable(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Selectable__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Selectable__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Selectable__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Selectable__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Selectable__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Selectable__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Selectable__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Selectable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Selectable(char const *,bool,ImGuiSelectableFlags,ImVec2 const &)\n"
    "    ImGui::Selectable(char const *,bool,ImGuiSelectableFlags)\n"
    "    ImGui::Selectable(char const *,bool)\n"
    "    ImGui::Selectable(char const *)\n"
    "    ImGui::Selectable(char const *,bool *,ImGuiSelectableFlags,ImVec2 const &)\n"
    "    ImGui::Selectable(char const *,bool *,ImGuiSelectableFlags)\n"
    "    ImGui::Selectable(char const *,bool *)\n");
  lua_error(L);return 0;
}


static int _wrap_ListBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBox",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"char const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_p_char);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBox",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"char const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_p_char);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBox",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"bool (*)(void *,int,char const **)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::ListBox",6,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
    SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"ListBox");
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBox",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"bool (*)(void *,int,char const **)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
    SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"ListBox");
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBox(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ListBox__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ListBox__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ListBox__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ListBox__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ListBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ListBox(char const *,int *,char const *const [],int,int)\n"
    "    ImGui::ListBox(char const *,int *,char const *const [],int)\n"
    "    ImGui::ListBox(char const *,int *,bool (*)(void *,int,char const **),void *,int,int)\n"
    "    ImGui::ListBox(char const *,int *,bool (*)(void *,int,char const **),void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ListBoxHeader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBoxHeader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBoxHeader",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ListBoxHeader",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ListBoxHeader",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBoxHeader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBoxHeader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBoxHeader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::ListBoxHeader((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBoxHeader__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBoxHeader",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBoxHeader",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ListBoxHeader",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ListBoxHeader",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBoxHeader__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ListBoxHeader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBoxHeader",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ListBoxHeader",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListBoxHeader(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_ListBoxHeader__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ListBoxHeader__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ListBoxHeader__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ListBoxHeader__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ListBoxHeader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ListBoxHeader(char const *,ImVec2 const &)\n"
    "    ImGui::ListBoxHeader(char const *)\n"
    "    ImGui::ListBoxHeader(char const *,int,int)\n"
    "    ImGui::ListBoxHeader(char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ListBoxFooter(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ListBoxFooter",0,0)
  ImGui::ListBoxFooter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  SWIG_check_num_args("ImGui::PlotLines",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"ImVec2");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::PlotLines",9,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotLines",8,SWIGTYPE_p_ImVec2);
  }
  arg8 = *argp8;
  
  arg9 = (int)lua_tonumber(L, 9);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;
  
  SWIG_check_num_args("ImGui::PlotLines",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotLines",8,SWIGTYPE_p_ImVec2);
  }
  arg8 = *argp8;
  
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("ImGui::PlotLines",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  SWIG_check_num_args("ImGui::PlotLines",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PlotLines",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("ImGui::PlotLines",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ImGui::PlotLines",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;
  
  SWIG_check_num_args("ImGui::PlotLines",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"float");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImGui::PlotLines",9,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotLines",9,SWIGTYPE_p_ImVec2);
  }
  arg9 = *argp9;
  
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  SWIG_check_num_args("ImGui::PlotLines",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  SWIG_check_num_args("ImGui::PlotLines",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PlotLines",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImGui::PlotLines",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("ImGui::PlotLines",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
  arg4 = (int)lua_tonumber(L, 4);
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotLines(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlotLines__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PlotLines__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PlotLines__SWIG_12(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_PlotLines__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_PlotLines__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_PlotLines__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_PlotLines__SWIG_10(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PlotLines__SWIG_9(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PlotLines__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_PlotLines__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_PlotLines__SWIG_8(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_PlotLines__SWIG_7(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_PlotLines__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlotLines'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PlotLines(char const *,float const *,int,int,char const *,float,float,ImVec2,int)\n"
    "    ImGui::PlotLines(char const *,float const *,int,int,char const *,float,float,ImVec2)\n"
    "    ImGui::PlotLines(char const *,float const *,int,int,char const *,float,float)\n"
    "    ImGui::PlotLines(char const *,float const *,int,int,char const *,float)\n"
    "    ImGui::PlotLines(char const *,float const *,int,int,char const *)\n"
    "    ImGui::PlotLines(char const *,float const *,int,int)\n"
    "    ImGui::PlotLines(char const *,float const *,int)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int,char const *,float,float,ImVec2)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int,char const *,float,float)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int,char const *,float)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int,char const *)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int)\n"
    "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_PlotHistogram__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"ImVec2");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::PlotHistogram",9,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotHistogram",8,SWIGTYPE_p_ImVec2);
  }
  arg8 = *argp8;
  
  arg9 = (int)lua_tonumber(L, 9);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotHistogram",8,SWIGTYPE_p_ImVec2);
  }
  arg8 = *argp8;
  
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"float");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImGui::PlotHistogram",9,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotHistogram",9,SWIGTYPE_p_ImVec2);
  }
  arg9 = *argp9;
  
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("ImGui::PlotHistogram",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram");
  arg4 = (int)lua_tonumber(L, 4);
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotHistogram(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PlotHistogram__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PlotHistogram__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PlotHistogram__SWIG_12(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_PlotHistogram__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_PlotHistogram__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_PlotHistogram__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_PlotHistogram__SWIG_10(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PlotHistogram__SWIG_9(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PlotHistogram__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_PlotHistogram__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_PlotHistogram__SWIG_8(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_PlotHistogram__SWIG_7(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_PlotHistogram__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlotHistogram'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *,float,float,ImVec2,int)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *,float,float,ImVec2)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *,float,float)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *,float)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int,int)\n"
    "    ImGui::PlotHistogram(char const *,float const *,int)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int,char const *,float,float,ImVec2)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int,char const *,float,float)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int,char const *,float)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int,char const *)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int)\n"
    "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::Value",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::Value",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::Value((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGui::Value",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Value",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  ImGui::Value((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImGui::Value",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Value",2,"unsigned int");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  ImGui::Value((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::Value",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Value",2,"float");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::Value",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  ImGui::Value((char const *)arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::Value",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Value",2,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::Value((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Value__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Value(char const *,bool)\n"
    "    ImGui::Value(char const *,int)\n"
    "    ImGui::Value(char const *,unsigned int)\n"
    "    ImGui::Value(char const *,float,char const *)\n"
    "    ImGui::Value(char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_BeginMenuBar(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginMenuBar",0,0)
  result = (bool)ImGui::BeginMenuBar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndMenuBar(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndMenuBar",0,0)
  ImGui::EndMenuBar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginMainMenuBar(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginMainMenuBar",0,0)
  result = (bool)ImGui::BeginMainMenuBar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndMainMenuBar(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndMainMenuBar",0,0)
  ImGui::EndMainMenuBar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginMenu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginMenu",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginMenu",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::BeginMenu",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginMenu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginMenu",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginMenu",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginMenu((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginMenu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginMenu__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginMenu__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginMenu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginMenu(char const *,bool)\n"
    "    ImGui::BeginMenu(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndMenu(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndMenu",0,0)
  ImGui::EndMenu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::MenuItem",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::MenuItem",4,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::MenuItem",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::MenuItem((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::MenuItem",3,"bool *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::MenuItem",4,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("MenuItem",3,SWIGTYPE_p_bool);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::MenuItem",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::MenuItem",3,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("MenuItem",3,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuItem(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_MenuItem__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_MenuItem__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MenuItem__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MenuItem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_MenuItem__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_MenuItem__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MenuItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::MenuItem(char const *,char const *,bool,bool)\n"
    "    ImGui::MenuItem(char const *,char const *,bool)\n"
    "    ImGui::MenuItem(char const *,char const *)\n"
    "    ImGui::MenuItem(char const *)\n"
    "    ImGui::MenuItem(char const *,char const *,bool *,bool)\n"
    "    ImGui::MenuItem(char const *,char const *,bool *)\n");
  lua_error(L);return 0;
}


static int _wrap_BeginTooltip(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::BeginTooltip",0,0)
  ImGui::BeginTooltip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndTooltip(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndTooltip",0,0)
  ImGui::EndTooltip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetTooltip(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetTooltip",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTooltip",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::SetTooltip((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetTooltipV(lua_State* L) {
  int SWIG_arg = 0;
//   char *arg1 = (char *) 0 ;
//   va_list arg2 ;
//   va_list *argp2 ;
  
//   SWIG_check_num_args("ImGui::SetTooltipV",2,2)
//   if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTooltipV",1,"char const *");
//   if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetTooltipV",2,"va_list");
//   arg1 = (char *)lua_tostring(L, 1);
  
//   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
//     SWIG_fail_ptr("SetTooltipV",2,SWIGTYPE_p_va_list);
//   }
//   arg2 = *argp2;
  
//   ImGui::SetTooltipV((char const *)arg1,arg2);
  
//   return SWIG_arg;
  
//   if(0) SWIG_fail;
  
// fail:
//   lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopup",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopup",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopup",2,"ImGuiWindowFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginPopup((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopup",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopup",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginPopup((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopup(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginPopup__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginPopup__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginPopup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginPopup(char const *,ImGuiWindowFlags)\n"
    "    ImGui::BeginPopup(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BeginPopupModal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupModal",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginPopupModal",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginPopupModal",3,"ImGuiWindowFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("BeginPopupModal",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupModal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupModal",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginPopupModal",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("BeginPopupModal",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupModal__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupModal",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginPopupModal((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupModal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginPopupModal__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeginPopupModal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginPopupModal__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginPopupModal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginPopupModal(char const *,bool *,ImGuiWindowFlags)\n"
    "    ImGui::BeginPopupModal(char const *,bool *)\n"
    "    ImGui::BeginPopupModal(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndPopup(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndPopup",0,0)
  ImGui::EndPopup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  
  SWIG_check_num_args("ImGui::OpenPopup",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopup",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopup",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  ImGui::OpenPopup((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::OpenPopup",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopup",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::OpenPopup((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopup(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_OpenPopup__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OpenPopup__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OpenPopup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::OpenPopup(char const *,ImGuiPopupFlags)\n"
    "    ImGui::OpenPopup(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_OpenPopupOnItemClick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  
  SWIG_check_num_args("ImGui::OpenPopupOnItemClick",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopupOnItemClick",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopupOnItemClick",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  ImGui::OpenPopupOnItemClick((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupOnItemClick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::OpenPopupOnItemClick",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopupOnItemClick",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::OpenPopupOnItemClick((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupOnItemClick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::OpenPopupOnItemClick",0,0)
  ImGui::OpenPopupOnItemClick();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupOnItemClick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_OpenPopupOnItemClick__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_OpenPopupOnItemClick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OpenPopupOnItemClick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OpenPopupOnItemClick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::OpenPopupOnItemClick(char const *,ImGuiPopupFlags)\n"
    "    ImGui::OpenPopupOnItemClick(char const *)\n"
    "    ImGui::OpenPopupOnItemClick()\n");
  lua_error(L);return 0;
}


static int _wrap_CloseCurrentPopup(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::CloseCurrentPopup",0,0)
  ImGui::CloseCurrentPopup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextItem",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextItem",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextItem",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextItem",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextItem",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextItem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextItem",0,0)
  result = (bool)ImGui::BeginPopupContextItem();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextItem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_BeginPopupContextItem__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginPopupContextItem__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginPopupContextItem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginPopupContextItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginPopupContextItem(char const *,ImGuiPopupFlags)\n"
    "    ImGui::BeginPopupContextItem(char const *)\n"
    "    ImGui::BeginPopupContextItem()\n");
  lua_error(L);return 0;
}


static int _wrap_BeginPopupContextWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextWindow",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextWindow",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextWindow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextWindow",0,0)
  result = (bool)ImGui::BeginPopupContextWindow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextVoid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextVoid",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextVoid",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextVoid",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextVoid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextVoid",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextVoid",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextVoid__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextVoid",0,0)
  result = (bool)ImGui::BeginPopupContextVoid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextVoid(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_BeginPopupContextVoid__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginPopupContextVoid__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginPopupContextVoid__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginPopupContextVoid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginPopupContextVoid(char const *,ImGuiPopupFlags)\n"
    "    ImGui::BeginPopupContextVoid(char const *)\n"
    "    ImGui::BeginPopupContextVoid()\n");
  lua_error(L);return 0;
}


static int _wrap_IsPopupOpen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsPopupOpen",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::IsPopupOpen",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsPopupOpen",2,"ImGuiPopupFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::IsPopupOpen((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsPopupOpen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsPopupOpen",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::IsPopupOpen",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::IsPopupOpen((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Columns__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImGui::Columns",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Columns",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::Columns",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::Columns",3,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  ImGui::Columns(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Columns__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::Columns",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Columns",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::Columns",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::Columns(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Columns__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::Columns",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Columns",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::Columns(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Columns__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::Columns",0,0)
  ImGui::Columns();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Columns(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Columns__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Columns__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Columns__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Columns__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Columns'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::Columns(int,char const *,bool)\n"
    "    ImGui::Columns(int,char const *)\n"
    "    ImGui::Columns(int)\n"
    "    ImGui::Columns()\n");
  lua_error(L);return 0;
}


static int _wrap_NextColumn(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::NextColumn",0,0)
  ImGui::NextColumn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnIndex(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("ImGui::GetColumnIndex",0,0)
  result = (int)ImGui::GetColumnIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnWidth__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnWidth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColumnWidth",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (float)ImGui::GetColumnWidth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnWidth__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnWidth",0,0)
  result = (float)ImGui::GetColumnWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnWidth(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetColumnWidth__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetColumnWidth__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetColumnWidth'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetColumnWidth(int)\n"
    "    ImGui::GetColumnWidth()\n");
  lua_error(L);return 0;
}


static int _wrap_SetColumnWidth(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetColumnWidth",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColumnWidth",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetColumnWidth",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetColumnWidth(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnOffset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnOffset",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColumnOffset",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (float)ImGui::GetColumnOffset(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnOffset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnOffset",0,0)
  result = (float)ImGui::GetColumnOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnOffset(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetColumnOffset__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetColumnOffset__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetColumnOffset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetColumnOffset(int)\n"
    "    ImGui::GetColumnOffset()\n");
  lua_error(L);return 0;
}


static int _wrap_SetColumnOffset(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetColumnOffset",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColumnOffset",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetColumnOffset",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetColumnOffset(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnsCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("ImGui::GetColumnsCount",0,0)
  result = (int)ImGui::GetColumnsCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabBar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTabBarFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabBar",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabBar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginTabBar",2,"ImGuiTabBarFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiTabBarFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginTabBar((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabBar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabBar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabBar",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginTabBar((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabBar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginTabBar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginTabBar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginTabBar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginTabBar(char const *,ImGuiTabBarFlags)\n"
    "    ImGui::BeginTabBar(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndTabBar(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndTabBar",0,0)
  ImGui::EndTabBar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTabItemFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabItem",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginTabItem",2,"bool *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginTabItem",3,"ImGuiTabItemFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("BeginTabItem",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (ImGuiTabItemFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabItem",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginTabItem",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("BeginTabItem",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabItem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabItem",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::BeginTabItem((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabItem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginTabItem__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeginTabItem__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginTabItem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginTabItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginTabItem(char const *,bool *,ImGuiTabItemFlags)\n"
    "    ImGui::BeginTabItem(char const *,bool *)\n"
    "    ImGui::BeginTabItem(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndTabItem(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndTabItem",0,0)
  ImGui::EndTabItem();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemButton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTabItemFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TabItemButton",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TabItemButton",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TabItemButton",2,"ImGuiTabItemFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiTabItemFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::TabItemButton((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemButton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TabItemButton",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TabItemButton",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::TabItemButton((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemButton(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TabItemButton__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TabItemButton__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TabItemButton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TabItemButton(char const *,ImGuiTabItemFlags)\n"
    "    ImGui::TabItemButton(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SetTabItemClosed(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::SetTabItemClosed",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTabItemClosed",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::SetTabItemClosed((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDockNodeFlags arg3 ;
  ImGuiWindowClass *arg4 = (ImGuiWindowClass *) 0 ;
  
  SWIG_check_num_args("ImGui::DockSpace",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpace",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockSpace",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DockSpace",3,"ImGuiDockNodeFlags");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DockSpace",4,"ImGuiWindowClass const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockSpace",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiDockNodeFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("DockSpace",4,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  ImGui::DockSpace(arg1,(ImVec2 const &)*arg2,arg3,(ImGuiWindowClass const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDockNodeFlags arg3 ;
  
  SWIG_check_num_args("ImGui::DockSpace",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpace",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockSpace",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DockSpace",3,"ImGuiDockNodeFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockSpace",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiDockNodeFlags)lua_tonumber(L, 3);
  ImGui::DockSpace(arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::DockSpace",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpace",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockSpace",2,"ImVec2 const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockSpace",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::DockSpace(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::DockSpace",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpace",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::DockSpace(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpace(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_DockSpace__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DockSpace__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DockSpace__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImGuiWindowClass, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_DockSpace__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DockSpace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DockSpace(ImGuiID,ImVec2 const &,ImGuiDockNodeFlags,ImGuiWindowClass const *)\n"
    "    ImGui::DockSpace(ImGuiID,ImVec2 const &,ImGuiDockNodeFlags)\n"
    "    ImGui::DockSpace(ImGuiID,ImVec2 const &)\n"
    "    ImGui::DockSpace(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_DockSpaceOverViewport__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  ImGuiWindowClass *arg3 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockSpaceOverViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",2,"ImGuiDockNodeFlags");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",3,"ImGuiWindowClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("DockSpaceOverViewport",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("DockSpaceOverViewport",3,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiID)ImGui::DockSpaceOverViewport(arg1,arg2,(ImGuiWindowClass const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpaceOverViewport__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockSpaceOverViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",2,"ImGuiDockNodeFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("DockSpaceOverViewport",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  result = (ImGuiID)ImGui::DockSpaceOverViewport(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpaceOverViewport__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockSpaceOverViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("DockSpaceOverViewport",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImGuiID)ImGui::DockSpaceOverViewport(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpaceOverViewport__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockSpaceOverViewport",0,0)
  result = (ImGuiID)ImGui::DockSpaceOverViewport();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockSpaceOverViewport(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_DockSpaceOverViewport__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiViewport, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DockSpaceOverViewport__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiViewport, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DockSpaceOverViewport__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiViewport, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImGuiWindowClass, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DockSpaceOverViewport__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DockSpaceOverViewport'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DockSpaceOverViewport(ImGuiViewport *,ImGuiDockNodeFlags,ImGuiWindowClass const *)\n"
    "    ImGui::DockSpaceOverViewport(ImGuiViewport *,ImGuiDockNodeFlags)\n"
    "    ImGui::DockSpaceOverViewport(ImGuiViewport *)\n"
    "    ImGui::DockSpaceOverViewport()\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowDockID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowDockID",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowDockID",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowDockID",2,"ImGuiCond");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextWindowDockID(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowDockID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowDockID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowDockID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::SetNextWindowDockID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowDockID(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetNextWindowDockID__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextWindowDockID__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextWindowDockID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextWindowDockID(ImGuiID,ImGuiCond)\n"
    "    ImGui::SetNextWindowDockID(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_SetNextWindowClass(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetNextWindowClass",1,"ImGuiWindowClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("SetNextWindowClass",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  ImGui::SetNextWindowClass((ImGuiWindowClass const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowDockID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetWindowDockID",0,0)
  result = (ImGuiID)ImGui::GetWindowDockID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowDocked(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowDocked",0,0)
  result = (bool)ImGui::IsWindowDocked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToTTY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::LogToTTY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToTTY",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::LogToTTY(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToTTY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogToTTY",0,0)
  ImGui::LogToTTY();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToTTY(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_LogToTTY__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_LogToTTY__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LogToTTY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LogToTTY(int)\n"
    "    ImGui::LogToTTY()\n");
  lua_error(L);return 0;
}


static int _wrap_LogToFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::LogToFile",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToFile",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LogToFile",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::LogToFile(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::LogToFile",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToFile",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::LogToFile(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogToFile",0,0)
  ImGui::LogToFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_LogToFile__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_LogToFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LogToFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LogToFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LogToFile(int,char const *)\n"
    "    ImGui::LogToFile(int)\n"
    "    ImGui::LogToFile()\n");
  lua_error(L);return 0;
}


static int _wrap_LogToClipboard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::LogToClipboard",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToClipboard",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::LogToClipboard(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToClipboard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogToClipboard",0,0)
  ImGui::LogToClipboard();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToClipboard(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_LogToClipboard__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_LogToClipboard__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LogToClipboard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LogToClipboard(int)\n"
    "    ImGui::LogToClipboard()\n");
  lua_error(L);return 0;
}


static int _wrap_LogFinish(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogFinish",0,0)
  ImGui::LogFinish();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogButtons(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogButtons",0,0)
  ImGui::LogButtons();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogText(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::LogText",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LogText",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::LogText((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDragDropSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDragDropFlags arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginDragDropSource",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginDragDropSource",1,"ImGuiDragDropFlags");
  arg1 = (ImGuiDragDropFlags)lua_tonumber(L, 1);
  result = (bool)ImGui::BeginDragDropSource(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDragDropSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginDragDropSource",0,0)
  result = (bool)ImGui::BeginDragDropSource();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDragDropSource(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_BeginDragDropSource__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginDragDropSource__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginDragDropSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginDragDropSource(ImGuiDragDropFlags)\n"
    "    ImGui::BeginDragDropSource()\n");
  lua_error(L);return 0;
}


static int _wrap_SetDragDropPayload__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ImGuiCond arg4 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SetDragDropPayload",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetDragDropPayload",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetDragDropPayload",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetDragDropPayload",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SetDragDropPayload",4,"ImGuiCond");
  arg1 = (char *)lua_tostring(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SetDragDropPayload");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (ImGuiCond)lua_tonumber(L, 4);
  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetDragDropPayload__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SetDragDropPayload",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetDragDropPayload",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetDragDropPayload",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetDragDropPayload",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SetDragDropPayload");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetDragDropPayload(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetDragDropPayload__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SetDragDropPayload__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetDragDropPayload'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetDragDropPayload(char const *,void const *,size_t,ImGuiCond)\n"
    "    ImGui::SetDragDropPayload(char const *,void const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_EndDragDropSource(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndDragDropSource",0,0)
  ImGui::EndDragDropSource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDragDropTarget(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginDragDropTarget",0,0)
  result = (bool)ImGui::BeginDragDropTarget();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AcceptDragDropPayload__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDragDropFlags arg2 ;
  ImGuiPayload *result = 0 ;
  
  SWIG_check_num_args("ImGui::AcceptDragDropPayload",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::AcceptDragDropPayload",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::AcceptDragDropPayload",2,"ImGuiDragDropFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDragDropFlags)lua_tonumber(L, 2);
  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AcceptDragDropPayload__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiPayload *result = 0 ;
  
  SWIG_check_num_args("ImGui::AcceptDragDropPayload",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::AcceptDragDropPayload",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AcceptDragDropPayload(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_AcceptDragDropPayload__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AcceptDragDropPayload__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AcceptDragDropPayload'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::AcceptDragDropPayload(char const *,ImGuiDragDropFlags)\n"
    "    ImGui::AcceptDragDropPayload(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EndDragDropTarget(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndDragDropTarget",0,0)
  ImGui::EndDragDropTarget();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDragDropPayload(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetDragDropPayload",0,0)
  result = (ImGuiPayload *)ImGui::GetDragDropPayload();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushClipRect(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImGui::PushClipRect",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::PushClipRect",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushClipRect",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::PushClipRect",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PushClipRect",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PushClipRect",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopClipRect(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopClipRect",0,0)
  ImGui::PopClipRect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetItemDefaultFocus(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetItemDefaultFocus",0,0)
  ImGui::SetItemDefaultFocus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetKeyboardFocusHere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::SetKeyboardFocusHere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetKeyboardFocusHere",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::SetKeyboardFocusHere(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetKeyboardFocusHere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetKeyboardFocusHere",0,0)
  ImGui::SetKeyboardFocusHere();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetKeyboardFocusHere(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SetKeyboardFocusHere__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetKeyboardFocusHere__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetKeyboardFocusHere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetKeyboardFocusHere(int)\n"
    "    ImGui::SetKeyboardFocusHere()\n");
  lua_error(L);return 0;
}


static int _wrap_IsItemHovered__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemHovered",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsItemHovered",1,"ImGuiHoveredFlags");
  arg1 = (ImGuiHoveredFlags)lua_tonumber(L, 1);
  result = (bool)ImGui::IsItemHovered(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemHovered__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemHovered",0,0)
  result = (bool)ImGui::IsItemHovered();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemHovered(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_IsItemHovered__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsItemHovered__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsItemHovered'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsItemHovered(ImGuiHoveredFlags)\n"
    "    ImGui::IsItemHovered()\n");
  lua_error(L);return 0;
}


static int _wrap_IsItemActive(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemActive",0,0)
  result = (bool)ImGui::IsItemActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemFocused(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemFocused",0,0)
  result = (bool)ImGui::IsItemFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemClicked__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemClicked",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsItemClicked",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsItemClicked(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemClicked__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemClicked",0,0)
  result = (bool)ImGui::IsItemClicked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemClicked(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_IsItemClicked__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsItemClicked__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsItemClicked'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsItemClicked(ImGuiMouseButton)\n"
    "    ImGui::IsItemClicked()\n");
  lua_error(L);return 0;
}


static int _wrap_IsItemVisible(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemVisible",0,0)
  result = (bool)ImGui::IsItemVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemEdited(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemEdited",0,0)
  result = (bool)ImGui::IsItemEdited();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemActivated(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemActivated",0,0)
  result = (bool)ImGui::IsItemActivated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemDeactivated(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemDeactivated",0,0)
  result = (bool)ImGui::IsItemDeactivated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemDeactivatedAfterEdit(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemDeactivatedAfterEdit",0,0)
  result = (bool)ImGui::IsItemDeactivatedAfterEdit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemToggledOpen(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemToggledOpen",0,0)
  result = (bool)ImGui::IsItemToggledOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAnyItemHovered(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsAnyItemHovered",0,0)
  result = (bool)ImGui::IsAnyItemHovered();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAnyItemActive(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsAnyItemActive",0,0)
  result = (bool)ImGui::IsAnyItemActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAnyItemFocused(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsAnyItemFocused",0,0)
  result = (bool)ImGui::IsAnyItemFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemRectMin(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetItemRectMin",0,0)
  result = ImGui::GetItemRectMin();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemRectMax(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetItemRectMax",0,0)
  result = ImGui::GetItemRectMax();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemRectSize(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetItemRectSize",0,0)
  result = ImGui::GetItemRectSize();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetItemAllowOverlap(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetItemAllowOverlap",0,0)
  ImGui::SetItemAllowOverlap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsRectVisible__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsRectVisible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsRectVisible",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsRectVisible",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsRectVisible__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsRectVisible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsRectVisible",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::IsRectVisible",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsRectVisible",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsRectVisible",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsRectVisible(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IsRectVisible__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsRectVisible__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsRectVisible'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsRectVisible(ImVec2 const &)\n"
    "    ImGui::IsRectVisible(ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GetTime(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("ImGui::GetTime",0,0)
  result = (double)ImGui::GetTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFrameCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("ImGui::GetFrameCount",0,0)
  result = (int)ImGui::GetFrameCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBackgroundDrawList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetBackgroundDrawList",0,0)
  result = (ImDrawList *)ImGui::GetBackgroundDrawList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetForegroundDrawList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetForegroundDrawList",0,0)
  result = (ImDrawList *)ImGui::GetForegroundDrawList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBackgroundDrawList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetBackgroundDrawList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetBackgroundDrawList",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("GetBackgroundDrawList",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImDrawList *)ImGui::GetBackgroundDrawList(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBackgroundDrawList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetBackgroundDrawList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiViewport, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GetBackgroundDrawList__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetBackgroundDrawList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetBackgroundDrawList()\n"
    "    ImGui::GetBackgroundDrawList(ImGuiViewport *)\n");
  lua_error(L);return 0;
}


static int _wrap_GetForegroundDrawList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetForegroundDrawList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetForegroundDrawList",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("GetForegroundDrawList",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImDrawList *)ImGui::GetForegroundDrawList(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDrawListSharedData(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetDrawListSharedData",0,0)
  result = (ImDrawListSharedData *)ImGui::GetDrawListSharedData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetStyleColorName(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiCol arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetStyleColorName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetStyleColorName",1,"ImGuiCol");
  arg1 = (ImGuiCol)lua_tonumber(L, 1);
  result = (char *)ImGui::GetStyleColorName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetStateStorage(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGui::SetStateStorage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetStateStorage",1,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("SetStateStorage",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  ImGui::SetStateStorage(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetStateStorage(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetStateStorage",0,0)
  result = (ImGuiStorage *)ImGui::GetStateStorage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcListClipping(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("ImGui::CalcListClipping",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::CalcListClipping",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CalcListClipping",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::CalcListClipping",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::CalcListClipping",4,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("CalcListClipping",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("CalcListClipping",4,SWIGTYPE_p_int);
  }
  
  ImGui::CalcListClipping(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChildFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChildFrame",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChildFrame",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChildFrame",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginChildFrame",3,"ImGuiWindowFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChildFrame",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChildFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChildFrame",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChildFrame",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChildFrame",2,"ImVec2 const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChildFrame",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginChildFrame(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeginChildFrame__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginChildFrame__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginChildFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginChildFrame(ImGuiID,ImVec2 const &,ImGuiWindowFlags)\n"
    "    ImGui::BeginChildFrame(ImGuiID,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EndChildFrame(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndChildFrame",0,0)
  ImGui::EndChildFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcTextSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcTextSize",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CalcTextSize",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::CalcTextSize",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::CalcTextSize",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::CalcTextSize",4,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (float)lua_tonumber(L, 4);
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcTextSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcTextSize",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CalcTextSize",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::CalcTextSize",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::CalcTextSize",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcTextSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcTextSize",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CalcTextSize",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::CalcTextSize",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcTextSize__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcTextSize",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CalcTextSize",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = ImGui::CalcTextSize((char const *)arg1);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcTextSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_CalcTextSize__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CalcTextSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CalcTextSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CalcTextSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CalcTextSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::CalcTextSize(char const *,char const *,bool,float)\n"
    "    ImGui::CalcTextSize(char const *,char const *,bool)\n"
    "    ImGui::CalcTextSize(char const *,char const *)\n"
    "    ImGui::CalcTextSize(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ColorConvertU32ToFloat4(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 arg1 ;
  ImVec4 result;
  
  SWIG_check_num_args("ImGui::ColorConvertU32ToFloat4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertU32ToFloat4",1,"ImU32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImU32)lua_tonumber(L, 1);
  result = ImGui::ColorConvertU32ToFloat4(arg1);
  {
    ImVec4 * resultptr = new ImVec4((const ImVec4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorConvertFloat4ToU32(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGui::ColorConvertFloat4ToU32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ColorConvertFloat4ToU32",1,"ImVec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ColorConvertFloat4ToU32",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorConvertRGBtoHSV(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  SWIG_check_num_args("ImGui::ColorConvertRGBtoHSV",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",5,"float &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",6,"float &");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertRGBtoHSV",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertRGBtoHSV",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertRGBtoHSV",6,SWIGTYPE_p_float);
  }
  
  ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorConvertHSVtoRGB(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  SWIG_check_num_args("ImGui::ColorConvertHSVtoRGB",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",5,"float &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",6,"float &");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertHSVtoRGB",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertHSVtoRGB",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorConvertHSVtoRGB",6,SWIGTYPE_p_float);
  }
  
  ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetKeyIndex(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiKey arg1 ;
  int result;
  
  SWIG_check_num_args("ImGui::GetKeyIndex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetKeyIndex",1,"ImGuiKey");
  arg1 = (ImGuiKey)lua_tonumber(L, 1);
  result = (int)ImGui::GetKeyIndex(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyDown",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyDown",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)ImGui::IsKeyDown(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyPressed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyPressed",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyPressed",1,"int");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::IsKeyPressed",2,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::IsKeyPressed(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyPressed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyPressed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyPressed",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)ImGui::IsKeyPressed(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyPressed(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsKeyPressed__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsKeyPressed__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsKeyPressed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsKeyPressed(int,bool)\n"
    "    ImGui::IsKeyPressed(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IsKeyReleased(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyReleased",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyReleased",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)ImGui::IsKeyReleased(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetKeyPressedAmount(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("ImGui::GetKeyPressedAmount",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)ImGui::GetKeyPressedAmount(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureKeyboardFromApp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::CaptureKeyboardFromApp",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::CaptureKeyboardFromApp",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::CaptureKeyboardFromApp(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureKeyboardFromApp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::CaptureKeyboardFromApp",0,0)
  ImGui::CaptureKeyboardFromApp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureKeyboardFromApp(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_CaptureKeyboardFromApp__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_CaptureKeyboardFromApp__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CaptureKeyboardFromApp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::CaptureKeyboardFromApp(bool)\n"
    "    ImGui::CaptureKeyboardFromApp()\n");
  lua_error(L);return 0;
}


static int _wrap_IsMouseDown(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDown",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDown",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseDown(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseClicked__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseClicked",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseClicked",1,"ImGuiMouseButton");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::IsMouseClicked",2,"bool");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::IsMouseClicked(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseClicked__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseClicked",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseClicked",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseClicked(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseClicked(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsMouseClicked__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsMouseClicked__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsMouseClicked'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsMouseClicked(ImGuiMouseButton,bool)\n"
    "    ImGui::IsMouseClicked(ImGuiMouseButton)\n");
  lua_error(L);return 0;
}


static int _wrap_IsMouseReleased(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseReleased",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseReleased",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseReleased(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDoubleClicked(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDoubleClicked",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDoubleClicked",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseDoubleClicked(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseHoveringRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseHoveringRect",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",2,"ImVec2 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsMouseHoveringRect",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsMouseHoveringRect",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseHoveringRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseHoveringRect",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsMouseHoveringRect",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsMouseHoveringRect",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseHoveringRect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsMouseHoveringRect__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_IsMouseHoveringRect__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsMouseHoveringRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsMouseHoveringRect(ImVec2 const &,ImVec2 const &,bool)\n"
    "    ImGui::IsMouseHoveringRect(ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IsMousePosValid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMousePosValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::IsMousePosValid",1,"ImVec2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("IsMousePosValid",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::IsMousePosValid((ImVec2 const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMousePosValid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMousePosValid",0,0)
  result = (bool)ImGui::IsMousePosValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMousePosValid(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_IsMousePosValid__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IsMousePosValid__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsMousePosValid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsMousePosValid(ImVec2 const *)\n"
    "    ImGui::IsMousePosValid()\n");
  lua_error(L);return 0;
}


static int _wrap_IsAnyMouseDown(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsAnyMouseDown",0,0)
  result = (bool)ImGui::IsAnyMouseDown();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMousePos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetMousePos",0,0)
  result = ImGui::GetMousePos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMousePosOnOpeningCurrentPopup(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetMousePosOnOpeningCurrentPopup",0,0)
  result = ImGui::GetMousePosOnOpeningCurrentPopup();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragging__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDragging",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDragging",1,"ImGuiMouseButton");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsMouseDragging",2,"float");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)ImGui::IsMouseDragging(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragging__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDragging",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDragging",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseDragging(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragging(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsMouseDragging__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsMouseDragging__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsMouseDragging'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsMouseDragging(ImGuiMouseButton,float)\n"
    "    ImGui::IsMouseDragging(ImGuiMouseButton)\n");
  lua_error(L);return 0;
}


static int _wrap_GetMouseDragDelta__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetMouseDragDelta",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetMouseDragDelta",1,"ImGuiMouseButton");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetMouseDragDelta",2,"float");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = ImGui::GetMouseDragDelta(arg1,arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMouseDragDelta__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetMouseDragDelta",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetMouseDragDelta",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = ImGui::GetMouseDragDelta(arg1);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMouseDragDelta__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetMouseDragDelta",0,0)
  result = ImGui::GetMouseDragDelta();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMouseDragDelta(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetMouseDragDelta__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetMouseDragDelta__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GetMouseDragDelta__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetMouseDragDelta'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetMouseDragDelta(ImGuiMouseButton,float)\n"
    "    ImGui::GetMouseDragDelta(ImGuiMouseButton)\n"
    "    ImGui::GetMouseDragDelta()\n");
  lua_error(L);return 0;
}


static int _wrap_ResetMouseDragDelta__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  
  SWIG_check_num_args("ImGui::ResetMouseDragDelta",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ResetMouseDragDelta",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  ImGui::ResetMouseDragDelta(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResetMouseDragDelta__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ResetMouseDragDelta",0,0)
  ImGui::ResetMouseDragDelta();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResetMouseDragDelta(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_ResetMouseDragDelta__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ResetMouseDragDelta__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResetMouseDragDelta'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ResetMouseDragDelta(ImGuiMouseButton)\n"
    "    ImGui::ResetMouseDragDelta()\n");
  lua_error(L);return 0;
}


static int _wrap_GetMouseCursor(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseCursor result;
  
  SWIG_check_num_args("ImGui::GetMouseCursor",0,0)
  result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetMouseCursor(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseCursor arg1 ;
  
  SWIG_check_num_args("ImGui::SetMouseCursor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetMouseCursor",1,"ImGuiMouseCursor");
  arg1 = (ImGuiMouseCursor)lua_tonumber(L, 1);
  ImGui::SetMouseCursor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureMouseFromApp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::CaptureMouseFromApp",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::CaptureMouseFromApp",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::CaptureMouseFromApp(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureMouseFromApp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::CaptureMouseFromApp",0,0)
  ImGui::CaptureMouseFromApp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CaptureMouseFromApp(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_CaptureMouseFromApp__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_CaptureMouseFromApp__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CaptureMouseFromApp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::CaptureMouseFromApp(bool)\n"
    "    ImGui::CaptureMouseFromApp()\n");
  lua_error(L);return 0;
}


static int _wrap_GetClipboardText(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetClipboardText",0,0)
  result = (char *)ImGui::GetClipboardText();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetClipboardText(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::SetClipboardText",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetClipboardText",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::SetClipboardText((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoadIniSettingsFromDisk(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::LoadIniSettingsFromDisk",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LoadIniSettingsFromDisk",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::LoadIniSettingsFromDisk((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoadIniSettingsFromMemory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ImGui::LoadIniSettingsFromMemory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LoadIniSettingsFromMemory",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::LoadIniSettingsFromMemory",2,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  ImGui::LoadIniSettingsFromMemory((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoadIniSettingsFromMemory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::LoadIniSettingsFromMemory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LoadIniSettingsFromMemory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::LoadIniSettingsFromMemory((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoadIniSettingsFromMemory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_LoadIniSettingsFromMemory__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LoadIniSettingsFromMemory__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LoadIniSettingsFromMemory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LoadIniSettingsFromMemory(char const *,size_t)\n"
    "    ImGui::LoadIniSettingsFromMemory(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SaveIniSettingsToDisk(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::SaveIniSettingsToDisk",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SaveIniSettingsToDisk",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::SaveIniSettingsToDisk((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaveIniSettingsToMemory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t *arg1 = (size_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::SaveIniSettingsToMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SaveIniSettingsToMemory",1,"size_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("SaveIniSettingsToMemory",1,SWIGTYPE_p_size_t);
  }
  
  result = (char *)ImGui::SaveIniSettingsToMemory(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaveIniSettingsToMemory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::SaveIniSettingsToMemory",0,0)
  result = (char *)ImGui::SaveIniSettingsToMemory();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SaveIniSettingsToMemory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SaveIniSettingsToMemory__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SaveIniSettingsToMemory__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SaveIniSettingsToMemory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SaveIniSettingsToMemory(size_t *)\n"
    "    ImGui::SaveIniSettingsToMemory()\n");
  lua_error(L);return 0;
}


static int _wrap_DebugCheckVersionAndDataLayout(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DebugCheckVersionAndDataLayout",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",6,"size_t");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",7,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (size_t)lua_tonumber(L, 7);
  result = (bool)ImGui::DebugCheckVersionAndDataLayout((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetAllocatorFunctions__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::SetAllocatorFunctions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",1,"void *(*)(size_t,void *)");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",2,"void (*)(void *,void *)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t_p_void__p_void,0))){
    SWIG_fail_ptr("SetAllocatorFunctions",1,SWIGTYPE_p_f_size_t_p_void__p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_void__void,0))){
    SWIG_fail_ptr("SetAllocatorFunctions",2,SWIGTYPE_p_f_p_void_p_void__void);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SetAllocatorFunctions");
  ImGui::SetAllocatorFunctions(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetAllocatorFunctions__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  
  SWIG_check_num_args("ImGui::SetAllocatorFunctions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",1,"void *(*)(size_t,void *)");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",2,"void (*)(void *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t_p_void__p_void,0))){
    SWIG_fail_ptr("SetAllocatorFunctions",1,SWIGTYPE_p_f_size_t_p_void__p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_void__void,0))){
    SWIG_fail_ptr("SetAllocatorFunctions",2,SWIGTYPE_p_f_p_void_p_void__void);
  }
  
  ImGui::SetAllocatorFunctions(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetAllocatorFunctions(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_f_size_t_p_void__p_void, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_p_void__void, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetAllocatorFunctions__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_f_size_t_p_void__p_void, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_p_void__void, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SetAllocatorFunctions__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetAllocatorFunctions'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetAllocatorFunctions(void *(*)(size_t,void *),void (*)(void *,void *),void *)\n"
    "    ImGui::SetAllocatorFunctions(void *(*)(size_t,void *),void (*)(void *,void *))\n");
  lua_error(L);return 0;
}


static int _wrap_MemAlloc(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGui::MemAlloc",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::MemAlloc",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (void *)ImGui::MemAlloc(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MemFree(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::MemFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::MemFree",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"MemFree");
  ImGui::MemFree(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetPlatformIO(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetPlatformIO",0,0)
  result = (ImGuiPlatformIO *) &ImGui::GetPlatformIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMainViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetMainViewport",0,0)
  result = (ImGuiViewport *)ImGui::GetMainViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdatePlatformWindows(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::UpdatePlatformWindows",0,0)
  ImGui::UpdatePlatformWindows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderPlatformWindowsDefault__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderPlatformWindowsDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderPlatformWindowsDefault",1,"void *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::RenderPlatformWindowsDefault",2,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"RenderPlatformWindowsDefault");
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RenderPlatformWindowsDefault");
  ImGui::RenderPlatformWindowsDefault(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderPlatformWindowsDefault__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderPlatformWindowsDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderPlatformWindowsDefault",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"RenderPlatformWindowsDefault");
  ImGui::RenderPlatformWindowsDefault(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderPlatformWindowsDefault__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::RenderPlatformWindowsDefault",0,0)
  ImGui::RenderPlatformWindowsDefault();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderPlatformWindowsDefault(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_RenderPlatformWindowsDefault__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RenderPlatformWindowsDefault__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RenderPlatformWindowsDefault__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderPlatformWindowsDefault'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderPlatformWindowsDefault(void *,void *)\n"
    "    ImGui::RenderPlatformWindowsDefault(void *)\n"
    "    ImGui::RenderPlatformWindowsDefault()\n");
  lua_error(L);return 0;
}


static int _wrap_DestroyPlatformWindows(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::DestroyPlatformWindows",0,0)
  ImGui::DestroyPlatformWindows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindViewportByID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindViewportByID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::FindViewportByID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiViewport *)ImGui::FindViewportByID(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindViewportByPlatformHandle(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindViewportByPlatformHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FindViewportByPlatformHandle",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"FindViewportByPlatformHandle");
  result = (ImGuiViewport *)ImGui::FindViewportByPlatformHandle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImNewWrapper(lua_State* L) {
  int SWIG_arg = 0;
  ImNewWrapper *result = 0 ;
  
  SWIG_check_num_args("ImNewWrapper::ImNewWrapper",0,0)
  result = (ImNewWrapper *)new ImNewWrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImNewWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImNewWrapper(void *obj) {
ImNewWrapper *arg1 = (ImNewWrapper *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImNewWrapper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImNewWrapper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImNewWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ImNewWrapper_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImNewWrapper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImNewWrapper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImNewWrapper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImNewWrapper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImNewWrapper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImNewWrapper_Sf_SwigStatic = {
    "ImNewWrapper",
    swig_ImNewWrapper_Sf_SwigStatic_methods,
    swig_ImNewWrapper_Sf_SwigStatic_attributes,
    swig_ImNewWrapper_Sf_SwigStatic_constants,
    swig_ImNewWrapper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImNewWrapper_bases[] = {0};
static const char *swig_ImNewWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_ImNewWrapper = { "ImNewWrapper", "ImNewWrapper", &SWIGTYPE_p_ImNewWrapper,_proxy__wrap_new_ImNewWrapper, swig_delete_ImNewWrapper, swig_ImNewWrapper_methods, swig_ImNewWrapper_attributes, &swig_ImNewWrapper_Sf_SwigStatic, swig_ImNewWrapper_meta, swig_ImNewWrapper_bases, swig_ImNewWrapper_base_names };

static int _wrap_ImGuiStyle_Alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::Alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Alpha",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::Alpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_Alpha_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_Alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::Alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Alpha",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_Alpha_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->Alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowPadding",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowPadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowPadding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowPadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WindowPadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowPadding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowPadding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->WindowPadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::WindowRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->WindowRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowBorderSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::WindowBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowBorderSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->WindowBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowMinSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowMinSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowMinSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowMinSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WindowMinSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowMinSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowMinSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowMinSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->WindowMinSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowTitleAlign_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowTitleAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WindowTitleAlign = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowTitleAlign_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowTitleAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->WindowTitleAlign);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowMenuButtonPosition_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::WindowMenuButtonPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowMenuButtonPosition_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowMenuButtonPosition = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_WindowMenuButtonPosition_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiStyle::WindowMenuButtonPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_WindowMenuButtonPosition_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImGuiDir) ((arg1)->WindowMenuButtonPosition);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ChildRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ChildRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ChildRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ChildRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ChildRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ChildRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::ChildRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ChildRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->ChildRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ChildBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ChildBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ChildBorderSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ChildBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ChildBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::ChildBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ChildBorderSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->ChildBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_PopupRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::PopupRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::PopupRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_PopupRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->PopupRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_PopupRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::PopupRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_PopupRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->PopupRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_PopupBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::PopupBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_PopupBorderSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->PopupBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_PopupBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::PopupBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_PopupBorderSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->PopupBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FramePadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::FramePadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FramePadding",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::FramePadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FramePadding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_FramePadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->FramePadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FramePadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::FramePadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FramePadding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FramePadding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->FramePadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FrameRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::FrameRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::FrameRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FrameRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FrameRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::FrameRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FrameRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->FrameRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FrameBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::FrameBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FrameBorderSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_FrameBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::FrameBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_FrameBorderSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->FrameBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ItemSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ItemSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemSpacing_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemSpacing_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ItemSpacing = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ItemSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ItemSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemSpacing_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->ItemSpacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ItemInnerSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ItemInnerSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ItemInnerSpacing = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ItemInnerSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ItemInnerSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->ItemInnerSpacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TouchExtraPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::TouchExtraPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->TouchExtraPadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TouchExtraPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::TouchExtraPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->TouchExtraPadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_IndentSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::IndentSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_IndentSpacing_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->IndentSpacing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_IndentSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::IndentSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_IndentSpacing_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->IndentSpacing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ColumnsMinSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ColumnsMinSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ColumnsMinSpacing_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ColumnsMinSpacing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ColumnsMinSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::ColumnsMinSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ColumnsMinSpacing_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->ColumnsMinSpacing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ScrollbarSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ScrollbarSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ScrollbarSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollbarSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ScrollbarSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::ScrollbarSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ScrollbarSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->ScrollbarSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ScrollbarRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ScrollbarRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ScrollbarRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollbarRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ScrollbarRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::ScrollbarRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ScrollbarRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->ScrollbarRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_GrabMinSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::GrabMinSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_GrabMinSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->GrabMinSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_GrabMinSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::GrabMinSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_GrabMinSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->GrabMinSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_GrabRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::GrabRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::GrabRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_GrabRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->GrabRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_GrabRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::GrabRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_GrabRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->GrabRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_LogSliderDeadzone_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::LogSliderDeadzone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_LogSliderDeadzone_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogSliderDeadzone = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_LogSliderDeadzone_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::LogSliderDeadzone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_LogSliderDeadzone_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->LogSliderDeadzone);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::TabRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabRounding",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabRounding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->TabRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::TabRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabRounding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabRounding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->TabRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::TabBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabBorderSize_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->TabBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::TabBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabBorderSize_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->TabBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabMinWidthForCloseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::TabMinWidthForCloseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabMinWidthForCloseButton_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->TabMinWidthForCloseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_TabMinWidthForCloseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::TabMinWidthForCloseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_TabMinWidthForCloseButton_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->TabMinWidthForCloseButton);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ColorButtonPosition_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ColorButtonPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ColorButtonPosition_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->ColorButtonPosition = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ColorButtonPosition_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiStyle::ColorButtonPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ColorButtonPosition_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImGuiDir) ((arg1)->ColorButtonPosition);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ButtonTextAlign_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ButtonTextAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ButtonTextAlign = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ButtonTextAlign_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ButtonTextAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->ButtonTextAlign);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_SelectableTextAlign_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::SelectableTextAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SelectableTextAlign = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_SelectableTextAlign_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::SelectableTextAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->SelectableTextAlign);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_DisplayWindowPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::DisplayWindowPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplayWindowPadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_DisplayWindowPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::DisplayWindowPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplayWindowPadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_DisplaySafeAreaPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiStyle::DisplaySafeAreaPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_DisplaySafeAreaPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::DisplaySafeAreaPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_MouseCursorScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::MouseCursorScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_MouseCursorScale_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseCursorScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_MouseCursorScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::MouseCursorScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_MouseCursorScale_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->MouseCursorScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedLines_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",1,"ImGuiStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedLines_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->AntiAliasedLines = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedLines_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedLines_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (bool) ((arg1)->AntiAliasedLines);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedLinesUseTex_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedLinesUseTex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",1,"ImGuiStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedLinesUseTex_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->AntiAliasedLinesUseTex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedLinesUseTex_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedLinesUseTex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedLinesUseTex_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (bool) ((arg1)->AntiAliasedLinesUseTex);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedFill_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedFill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",1,"ImGuiStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedFill_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->AntiAliasedFill = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_AntiAliasedFill_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiStyle::AntiAliasedFill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_AntiAliasedFill_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (bool) ((arg1)->AntiAliasedFill);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_CurveTessellationTol_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::CurveTessellationTol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_CurveTessellationTol_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurveTessellationTol = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_CurveTessellationTol_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::CurveTessellationTol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_CurveTessellationTol_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->CurveTessellationTol);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_CircleSegmentMaxError_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::CircleSegmentMaxError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CircleSegmentMaxError",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::CircleSegmentMaxError",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_CircleSegmentMaxError_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CircleSegmentMaxError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_CircleSegmentMaxError_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiStyle::CircleSegmentMaxError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CircleSegmentMaxError",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_CircleSegmentMaxError_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (float) ((arg1)->CircleSegmentMaxError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_Colors_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::Colors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Colors",1,"ImGuiStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::Colors",2,"ImVec4 [ImGuiCol_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_Colors_set",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImGuiStyle_Colors_set",2,SWIGTYPE_p_ImVec4);
  }
  
  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->Colors;
    for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_Colors_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::Colors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Colors",1,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_Colors_get",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStyle(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyle::ImGuiStyle",0,0)
  result = (ImGuiStyle *)new ImGuiStyle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyle_ScaleAllSizes(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiStyle::ScaleAllSizes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScaleAllSizes",1,"ImGuiStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScaleAllSizes",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiStyle_ScaleAllSizes",1,SWIGTYPE_p_ImGuiStyle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ScaleAllSizes(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiStyle(void *obj) {
ImGuiStyle *arg1 = (ImGuiStyle *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStyle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStyle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStyle_attributes[] = {
    { "Alpha", _wrap_ImGuiStyle_Alpha_get, _wrap_ImGuiStyle_Alpha_set },
    { "WindowPadding", _wrap_ImGuiStyle_WindowPadding_get, _wrap_ImGuiStyle_WindowPadding_set },
    { "WindowRounding", _wrap_ImGuiStyle_WindowRounding_get, _wrap_ImGuiStyle_WindowRounding_set },
    { "WindowBorderSize", _wrap_ImGuiStyle_WindowBorderSize_get, _wrap_ImGuiStyle_WindowBorderSize_set },
    { "WindowMinSize", _wrap_ImGuiStyle_WindowMinSize_get, _wrap_ImGuiStyle_WindowMinSize_set },
    { "WindowTitleAlign", _wrap_ImGuiStyle_WindowTitleAlign_get, _wrap_ImGuiStyle_WindowTitleAlign_set },
    { "WindowMenuButtonPosition", _wrap_ImGuiStyle_WindowMenuButtonPosition_get, _wrap_ImGuiStyle_WindowMenuButtonPosition_set },
    { "ChildRounding", _wrap_ImGuiStyle_ChildRounding_get, _wrap_ImGuiStyle_ChildRounding_set },
    { "ChildBorderSize", _wrap_ImGuiStyle_ChildBorderSize_get, _wrap_ImGuiStyle_ChildBorderSize_set },
    { "PopupRounding", _wrap_ImGuiStyle_PopupRounding_get, _wrap_ImGuiStyle_PopupRounding_set },
    { "PopupBorderSize", _wrap_ImGuiStyle_PopupBorderSize_get, _wrap_ImGuiStyle_PopupBorderSize_set },
    { "FramePadding", _wrap_ImGuiStyle_FramePadding_get, _wrap_ImGuiStyle_FramePadding_set },
    { "FrameRounding", _wrap_ImGuiStyle_FrameRounding_get, _wrap_ImGuiStyle_FrameRounding_set },
    { "FrameBorderSize", _wrap_ImGuiStyle_FrameBorderSize_get, _wrap_ImGuiStyle_FrameBorderSize_set },
    { "ItemSpacing", _wrap_ImGuiStyle_ItemSpacing_get, _wrap_ImGuiStyle_ItemSpacing_set },
    { "ItemInnerSpacing", _wrap_ImGuiStyle_ItemInnerSpacing_get, _wrap_ImGuiStyle_ItemInnerSpacing_set },
    { "TouchExtraPadding", _wrap_ImGuiStyle_TouchExtraPadding_get, _wrap_ImGuiStyle_TouchExtraPadding_set },
    { "IndentSpacing", _wrap_ImGuiStyle_IndentSpacing_get, _wrap_ImGuiStyle_IndentSpacing_set },
    { "ColumnsMinSpacing", _wrap_ImGuiStyle_ColumnsMinSpacing_get, _wrap_ImGuiStyle_ColumnsMinSpacing_set },
    { "ScrollbarSize", _wrap_ImGuiStyle_ScrollbarSize_get, _wrap_ImGuiStyle_ScrollbarSize_set },
    { "ScrollbarRounding", _wrap_ImGuiStyle_ScrollbarRounding_get, _wrap_ImGuiStyle_ScrollbarRounding_set },
    { "GrabMinSize", _wrap_ImGuiStyle_GrabMinSize_get, _wrap_ImGuiStyle_GrabMinSize_set },
    { "GrabRounding", _wrap_ImGuiStyle_GrabRounding_get, _wrap_ImGuiStyle_GrabRounding_set },
    { "LogSliderDeadzone", _wrap_ImGuiStyle_LogSliderDeadzone_get, _wrap_ImGuiStyle_LogSliderDeadzone_set },
    { "TabRounding", _wrap_ImGuiStyle_TabRounding_get, _wrap_ImGuiStyle_TabRounding_set },
    { "TabBorderSize", _wrap_ImGuiStyle_TabBorderSize_get, _wrap_ImGuiStyle_TabBorderSize_set },
    { "TabMinWidthForCloseButton", _wrap_ImGuiStyle_TabMinWidthForCloseButton_get, _wrap_ImGuiStyle_TabMinWidthForCloseButton_set },
    { "ColorButtonPosition", _wrap_ImGuiStyle_ColorButtonPosition_get, _wrap_ImGuiStyle_ColorButtonPosition_set },
    { "ButtonTextAlign", _wrap_ImGuiStyle_ButtonTextAlign_get, _wrap_ImGuiStyle_ButtonTextAlign_set },
    { "SelectableTextAlign", _wrap_ImGuiStyle_SelectableTextAlign_get, _wrap_ImGuiStyle_SelectableTextAlign_set },
    { "DisplayWindowPadding", _wrap_ImGuiStyle_DisplayWindowPadding_get, _wrap_ImGuiStyle_DisplayWindowPadding_set },
    { "DisplaySafeAreaPadding", _wrap_ImGuiStyle_DisplaySafeAreaPadding_get, _wrap_ImGuiStyle_DisplaySafeAreaPadding_set },
    { "MouseCursorScale", _wrap_ImGuiStyle_MouseCursorScale_get, _wrap_ImGuiStyle_MouseCursorScale_set },
    { "AntiAliasedLines", _wrap_ImGuiStyle_AntiAliasedLines_get, _wrap_ImGuiStyle_AntiAliasedLines_set },
    { "AntiAliasedLinesUseTex", _wrap_ImGuiStyle_AntiAliasedLinesUseTex_get, _wrap_ImGuiStyle_AntiAliasedLinesUseTex_set },
    { "AntiAliasedFill", _wrap_ImGuiStyle_AntiAliasedFill_get, _wrap_ImGuiStyle_AntiAliasedFill_set },
    { "CurveTessellationTol", _wrap_ImGuiStyle_CurveTessellationTol_get, _wrap_ImGuiStyle_CurveTessellationTol_set },
    { "CircleSegmentMaxError", _wrap_ImGuiStyle_CircleSegmentMaxError_get, _wrap_ImGuiStyle_CircleSegmentMaxError_set },
    { "Colors", _wrap_ImGuiStyle_Colors_get, _wrap_ImGuiStyle_Colors_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStyle_methods[]= {
    { "ScaleAllSizes", _wrap_ImGuiStyle_ScaleAllSizes},
    {0,0}
};
static swig_lua_method swig_ImGuiStyle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStyle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStyle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStyle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStyle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStyle_Sf_SwigStatic = {
    "ImGuiStyle",
    swig_ImGuiStyle_Sf_SwigStatic_methods,
    swig_ImGuiStyle_Sf_SwigStatic_attributes,
    swig_ImGuiStyle_Sf_SwigStatic_constants,
    swig_ImGuiStyle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStyle_bases[] = {0};
static const char *swig_ImGuiStyle_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStyle = { "ImGuiStyle", "ImGuiStyle", &SWIGTYPE_p_ImGuiStyle,_proxy__wrap_new_ImGuiStyle, swig_delete_ImGuiStyle, swig_ImGuiStyle_methods, swig_ImGuiStyle_attributes, &swig_ImGuiStyle_Sf_SwigStatic, swig_ImGuiStyle_meta, swig_ImGuiStyle_bases, swig_ImGuiStyle_base_names };

static int _wrap_ImGuiIO_ConfigFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigFlags",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::ConfigFlags",2,"ImGuiConfigFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigFlags_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (ImGuiConfigFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ConfigFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags result;
  
  SWIG_check_num_args("ImGuiIO::ConfigFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigFlags",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigFlags_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImGuiConfigFlags) ((arg1)->ConfigFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags arg2 ;
  
  SWIG_check_num_args("ImGuiIO::BackendFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendFlags",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::BackendFlags",2,"ImGuiBackendFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendFlags_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (ImGuiBackendFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->BackendFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags result;
  
  SWIG_check_num_args("ImGuiIO::BackendFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendFlags",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendFlags_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImGuiBackendFlags) ((arg1)->BackendFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DisplaySize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::DisplaySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplaySize",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::DisplaySize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DisplaySize_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_DisplaySize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplaySize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DisplaySize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::DisplaySize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplaySize",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DisplaySize_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DeltaTime_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::DeltaTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DeltaTime",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::DeltaTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DeltaTime_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DeltaTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DeltaTime_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::DeltaTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DeltaTime",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DeltaTime_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->DeltaTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_IniSavingRate_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::IniSavingRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniSavingRate",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::IniSavingRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_IniSavingRate_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->IniSavingRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_IniSavingRate_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::IniSavingRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniSavingRate",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_IniSavingRate_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->IniSavingRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_IniFilename_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::IniFilename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniFilename",1,"ImGuiIO *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::IniFilename",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_IniFilename_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->IniFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniFilename, (const char *)arg2);
    } else {
      arg1->IniFilename = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_IniFilename_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::IniFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniFilename",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_IniFilename_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (char *) ((arg1)->IniFilename);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_LogFilename_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::LogFilename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::LogFilename",1,"ImGuiIO *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::LogFilename",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_LogFilename_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->LogFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->LogFilename, (const char *)arg2);
    } else {
      arg1->LogFilename = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_LogFilename_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::LogFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::LogFilename",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_LogFilename_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (char *) ((arg1)->LogFilename);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClickTime_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClickTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClickTime_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseDoubleClickTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClickTime_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClickTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClickTime_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->MouseDoubleClickTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClickMaxDist_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClickMaxDist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClickMaxDist_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClickMaxDist_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClickMaxDist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClickMaxDist_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->MouseDoubleClickMaxDist);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDragThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragThreshold_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseDragThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::MouseDragThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragThreshold_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->MouseDragThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyMap_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMap",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::KeyMap",2,"int [ImGuiKey_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyMap_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImGuiIO_KeyMap_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->KeyMap;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyMap_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::KeyMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMap",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyMap_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int *)(int *) ((arg1)->KeyMap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyRepeatDelay_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyRepeatDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyRepeatDelay_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->KeyRepeatDelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyRepeatDelay_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::KeyRepeatDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyRepeatDelay_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->KeyRepeatDelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyRepeatRate_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyRepeatRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyRepeatRate_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->KeyRepeatRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyRepeatRate_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::KeyRepeatRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyRepeatRate_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->KeyRepeatRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_UserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::UserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::UserData",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::UserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_UserData_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_UserData_set");
  if (arg1) (arg1)->UserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_UserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::UserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::UserData",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_UserData_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void *) ((arg1)->UserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_Fonts_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::Fonts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Fonts",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::Fonts",2,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_Fonts_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlas,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiIO_Fonts_set",2,SWIGTYPE_p_ImFontAtlas);
  }
  
  if (arg1) (arg1)->Fonts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_Fonts_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::Fonts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Fonts",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_Fonts_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImFontAtlas *) ((arg1)->Fonts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontGlobalScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::FontGlobalScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontGlobalScale_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontGlobalScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontGlobalScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::FontGlobalScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontGlobalScale_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->FontGlobalScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontAllowUserScaling_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::FontAllowUserScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontAllowUserScaling_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->FontAllowUserScaling = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontAllowUserScaling_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::FontAllowUserScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontAllowUserScaling_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->FontAllowUserScaling);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontDefault_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::FontDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontDefault",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::FontDefault",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontDefault_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiIO_FontDefault_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->FontDefault = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_FontDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::FontDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontDefault",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_FontDefault_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImFont *) ((arg1)->FontDefault);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DisplayFramebufferScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::DisplayFramebufferScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplayFramebufferScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_DisplayFramebufferScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::DisplayFramebufferScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingNoSplit_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingNoSplit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingNoSplit_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigDockingNoSplit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingNoSplit_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingNoSplit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingNoSplit_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigDockingNoSplit);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingWithShift_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingWithShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingWithShift_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigDockingWithShift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingWithShift_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingWithShift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingWithShift_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigDockingWithShift);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingAlwaysTabBar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingAlwaysTabBar_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigDockingAlwaysTabBar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingAlwaysTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingAlwaysTabBar_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigDockingAlwaysTabBar);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingTransparentPayload_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingTransparentPayload",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingTransparentPayload_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigDockingTransparentPayload = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigDockingTransparentPayload_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigDockingTransparentPayload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigDockingTransparentPayload_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigDockingTransparentPayload);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoAutoMerge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoAutoMerge_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigViewportsNoAutoMerge = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoAutoMerge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoAutoMerge_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigViewportsNoAutoMerge);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoTaskBarIcon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoTaskBarIcon_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigViewportsNoTaskBarIcon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoTaskBarIcon_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigViewportsNoTaskBarIcon);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoDecoration_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDecoration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDecoration_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigViewportsNoDecoration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoDecoration_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDecoration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDecoration_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigViewportsNoDecoration);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDefaultParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDefaultParent_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigViewportsNoDefaultParent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDefaultParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDefaultParent_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigViewportsNoDefaultParent);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDrawCursor_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDrawCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDrawCursor_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->MouseDrawCursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDrawCursor_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::MouseDrawCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDrawCursor_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->MouseDrawCursor);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigMacOSXBehaviors_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigMacOSXBehaviors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigMacOSXBehaviors_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigMacOSXBehaviors = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigMacOSXBehaviors_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigMacOSXBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigMacOSXBehaviors_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigMacOSXBehaviors);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigInputTextCursorBlink_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigInputTextCursorBlink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigInputTextCursorBlink_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigInputTextCursorBlink = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigInputTextCursorBlink_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigInputTextCursorBlink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigInputTextCursorBlink_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigInputTextCursorBlink);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsResizeFromEdges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsResizeFromEdges_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigWindowsResizeFromEdges = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsResizeFromEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsResizeFromEdges_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigWindowsResizeFromEdges);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ConfigWindowsMoveFromTitleBarOnly = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->ConfigWindowsMoveFromTitleBarOnly);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsMemoryCompactTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsMemoryCompactTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMemoryCompactTimer",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMemoryCompactTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsMemoryCompactTimer_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ConfigWindowsMemoryCompactTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ConfigWindowsMemoryCompactTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::ConfigWindowsMemoryCompactTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMemoryCompactTimer",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ConfigWindowsMemoryCompactTimer_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->ConfigWindowsMemoryCompactTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendPlatformName_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendPlatformName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformName",1,"ImGuiIO *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::BackendPlatformName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendPlatformName_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->BackendPlatformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendPlatformName, (const char *)arg2);
    } else {
      arg1->BackendPlatformName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendPlatformName_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendPlatformName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformName",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendPlatformName_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (char *) ((arg1)->BackendPlatformName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendRendererName_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendRendererName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererName",1,"ImGuiIO *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::BackendRendererName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendRendererName_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->BackendRendererName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendRendererName, (const char *)arg2);
    } else {
      arg1->BackendRendererName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendRendererName_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendRendererName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererName",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendRendererName_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (char *) ((arg1)->BackendRendererName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendPlatformUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendPlatformUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendPlatformUserData_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendPlatformUserData_set");
  if (arg1) (arg1)->BackendPlatformUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendPlatformUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendPlatformUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendPlatformUserData_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void *) ((arg1)->BackendPlatformUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendRendererUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendRendererUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendRendererUserData_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendRendererUserData_set");
  if (arg1) (arg1)->BackendRendererUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendRendererUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendRendererUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendRendererUserData_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void *) ((arg1)->BackendRendererUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendLanguageUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendLanguageUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendLanguageUserData_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendLanguageUserData_set");
  if (arg1) (arg1)->BackendLanguageUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_BackendLanguageUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::BackendLanguageUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_BackendLanguageUserData_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void *) ((arg1)->BackendLanguageUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_GetClipboardTextFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*arg2)(void *) = (char *(*)(void *)) 0 ;
  
  SWIG_check_num_args("ImGuiIO::GetClipboardTextFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",2,"char const *(*)(void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__p_char,0))){
    SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_set",2,SWIGTYPE_p_f_p_void__p_char);
  }
  
  if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_GetClipboardTextFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*result)(void *) = 0 ;
  
  SWIG_check_num_args("ImGuiIO::GetClipboardTextFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_SetClipboardTextFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  
  SWIG_check_num_args("ImGuiIO::SetClipboardTextFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",2,"void (*)(void *,char const *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_q_const__char__void,0))){
    SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_set",2,SWIGTYPE_p_f_p_void_p_q_const__char__void);
  }
  
  if (arg1) (arg1)->SetClipboardTextFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_SetClipboardTextFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *,char const *) = 0 ;
  
  SWIG_check_num_args("ImGuiIO::SetClipboardTextFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void_p_q_const__char__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ClipboardUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::ClipboardUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ClipboardUserData_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_ClipboardUserData_set");
  if (arg1) (arg1)->ClipboardUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ClipboardUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::ClipboardUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ClipboardUserData_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (void *) ((arg1)->ClipboardUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MousePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::MousePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePos",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MousePos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MousePos_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_MousePos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MousePos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MousePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MousePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePos",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MousePos_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)& ((arg1)->MousePos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDown_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDown",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDown",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDown_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDown_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDown;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDown_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDown",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDown_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseDown);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseWheel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseWheel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheel",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseWheel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseWheel_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseWheel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseWheel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::MouseWheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheel",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseWheel_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->MouseWheel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseWheelH_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseWheelH",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelH",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseWheelH",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseWheelH_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseWheelH = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseWheelH_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::MouseWheelH",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelH",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseWheelH_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->MouseWheelH);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseHoveredViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseHoveredViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseHoveredViewport_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseHoveredViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseHoveredViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiIO::MouseHoveredViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseHoveredViewport_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImGuiID) ((arg1)->MouseHoveredViewport);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyCtrl_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyCtrl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyCtrl",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyCtrl",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyCtrl_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->KeyCtrl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyCtrl_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::KeyCtrl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyCtrl",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyCtrl_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->KeyCtrl);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyShift_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyShift",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyShift",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyShift_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->KeyShift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyShift_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::KeyShift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyShift",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyShift_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->KeyShift);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyAlt_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyAlt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyAlt",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyAlt",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyAlt_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->KeyAlt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyAlt_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::KeyAlt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyAlt",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyAlt_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->KeyAlt);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeySuper_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeySuper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeySuper",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeySuper",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeySuper_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->KeySuper = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeySuper_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::KeySuper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeySuper",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeySuper_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->KeySuper);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDown_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDown",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::KeysDown",2,"bool [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDown_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDown_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->KeysDown;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDown_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDown",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDown_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->KeysDown);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputs_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputs",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::NavInputs",2,"float [ImGuiNavInput_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputs_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputs_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->NavInputs;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputs_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputs",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputs_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->NavInputs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_AddInputCharacter(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::AddInputCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharacter",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharacter",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_AddInputCharacter",1,SWIGTYPE_p_ImGuiIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->AddInputCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_AddInputCharacterUTF16(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 arg2 ;
  
  SWIG_check_num_args("ImGuiIO::AddInputCharacterUTF16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharacterUTF16",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharacterUTF16",2,"ImWchar16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_AddInputCharacterUTF16",1,SWIGTYPE_p_ImGuiIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar16)lua_tonumber(L, 2);
  (arg1)->AddInputCharacterUTF16(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_AddInputCharactersUTF8(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::AddInputCharactersUTF8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharactersUTF8",1,"ImGuiIO *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharactersUTF8",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_AddInputCharactersUTF8",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->AddInputCharactersUTF8((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_ClearInputCharacters(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::ClearInputCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClearInputCharacters",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_ClearInputCharacters",1,SWIGTYPE_p_ImGuiIO);
  }
  
  (arg1)->ClearInputCharacters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantCaptureMouse_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::WantCaptureMouse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantCaptureMouse_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantCaptureMouse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantCaptureMouse_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::WantCaptureMouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantCaptureMouse_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->WantCaptureMouse);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantCaptureKeyboard_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::WantCaptureKeyboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantCaptureKeyboard_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantCaptureKeyboard = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantCaptureKeyboard_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::WantCaptureKeyboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantCaptureKeyboard_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->WantCaptureKeyboard);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantTextInput_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::WantTextInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantTextInput",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantTextInput",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantTextInput_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantTextInput = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantTextInput_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::WantTextInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantTextInput",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantTextInput_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->WantTextInput);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantSetMousePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::WantSetMousePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantSetMousePos_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantSetMousePos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantSetMousePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::WantSetMousePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantSetMousePos_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->WantSetMousePos);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantSaveIniSettings_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::WantSaveIniSettings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantSaveIniSettings_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantSaveIniSettings = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_WantSaveIniSettings_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::WantSaveIniSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_WantSaveIniSettings_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->WantSaveIniSettings);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::NavActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavActive",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::NavActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavActive_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::NavActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavActive",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavActive_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->NavActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiIO::NavVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavVisible",1,"ImGuiIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::NavVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavVisible_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiIO::NavVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavVisible",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavVisible_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool) ((arg1)->NavVisible);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_Framerate_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::Framerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Framerate",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::Framerate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_Framerate_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Framerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_Framerate_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::Framerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Framerate",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_Framerate_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->Framerate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderVertices_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderVertices_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsRenderVertices = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderVertices_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderVertices_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int) ((arg1)->MetricsRenderVertices);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderIndices_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderIndices_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsRenderIndices = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderIndices_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderIndices_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int) ((arg1)->MetricsRenderIndices);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderWindows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderWindows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderWindows_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsRenderWindows = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsRenderWindows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiIO::MetricsRenderWindows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsRenderWindows_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int) ((arg1)->MetricsRenderWindows);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsActiveWindows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MetricsActiveWindows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsActiveWindows_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsActiveWindows = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsActiveWindows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiIO::MetricsActiveWindows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsActiveWindows_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int) ((arg1)->MetricsActiveWindows);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsActiveAllocations_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MetricsActiveAllocations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveAllocations",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsActiveAllocations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsActiveAllocations_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsActiveAllocations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MetricsActiveAllocations_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiIO::MetricsActiveAllocations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveAllocations",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MetricsActiveAllocations_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (int) ((arg1)->MetricsActiveAllocations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDelta_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDelta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDelta",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDelta",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDelta_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDelta_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MouseDelta = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDelta_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDelta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDelta",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDelta_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)& ((arg1)->MouseDelta);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyMods_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyModFlags arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeyMods",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMods",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyMods",2,"ImGuiKeyModFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyMods_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (ImGuiKeyModFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->KeyMods = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeyMods_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyModFlags result;
  
  SWIG_check_num_args("ImGuiIO::KeyMods",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMods",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeyMods_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImGuiKeyModFlags) ((arg1)->KeyMods);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MousePosPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::MousePosPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePosPrev",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MousePosPrev",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MousePosPrev_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_MousePosPrev_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MousePosPrev = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MousePosPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MousePosPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePosPrev",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MousePosPrev_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)& ((arg1)->MousePosPrev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClickedPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClickedPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",2,"ImVec2 [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedPos_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseClickedPos;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClickedPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClickedPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedPos_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseClickedPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClickedTime_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClickedTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",2,"double [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedTime_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedTime_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->MouseClickedTime;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClickedTime_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClickedTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClickedTime_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (double *)(double *) ((arg1)->MouseClickedTime);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClicked_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClicked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClicked",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClicked",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClicked_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClicked_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseClicked_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseClicked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClicked",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseClicked_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseClicked);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClicked_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClicked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDoubleClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDoubleClicked_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDoubleClicked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseDoubleClicked);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseReleased_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseReleased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseReleased",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseReleased",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseReleased_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseReleased_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseReleased;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseReleased_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseReleased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseReleased",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseReleased_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseReleased);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownOwned_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownOwned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownOwned_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownOwned_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownOwned;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownOwned_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownOwned",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownOwned_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseDownOwned);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownWasDoubleClick_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownWasDoubleClick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownWasDoubleClick",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownWasDoubleClick",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownWasDoubleClick_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownWasDoubleClick_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownWasDoubleClick;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownWasDoubleClick_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownWasDoubleClick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownWasDoubleClick",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownWasDoubleClick_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (bool *)(bool *) ((arg1)->MouseDownWasDoubleClick);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",2,"float [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDuration_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDuration_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDuration;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDuration_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->MouseDownDuration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownDurationPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownDurationPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",2,"float [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDurationPrev;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDownDurationPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDownDurationPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->MouseDownDurationPrev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragMaxDistanceAbs_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceAbs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",2,"ImVec2 [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_set",2,SWIGTYPE_p_ImVec2);
  }
  
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseDragMaxDistanceAbs;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragMaxDistanceAbs_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceAbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseDragMaxDistanceAbs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragMaxDistanceSqr_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceSqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",2,"float [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->MouseDragMaxDistanceSqr;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_MouseDragMaxDistanceSqr_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceSqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->MouseDragMaxDistanceSqr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDownDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDownDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDownDuration",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::KeysDownDuration",2,"float [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDuration_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDuration_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDuration;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDownDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDownDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDownDuration",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDuration_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->KeysDownDuration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDownDurationPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDownDurationPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDownDurationPrev",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::KeysDownDurationPrev",2,"float [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDurationPrev_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDurationPrev_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDurationPrev;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_KeysDownDurationPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::KeysDownDurationPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysDownDurationPrev",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_KeysDownDurationPrev_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->KeysDownDurationPrev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputsDownDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputsDownDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputsDownDuration",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::NavInputsDownDuration",2,"float [ImGuiNavInput_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDuration_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDuration_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->NavInputsDownDuration;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputsDownDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputsDownDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputsDownDuration",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDuration_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->NavInputsDownDuration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputsDownDurationPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputsDownDurationPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputsDownDurationPrev",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::NavInputsDownDurationPrev",2,"float [ImGuiNavInput_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDurationPrev_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDurationPrev_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->NavInputsDownDurationPrev;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_NavInputsDownDurationPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::NavInputsDownDurationPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavInputsDownDurationPrev",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_NavInputsDownDurationPrev_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float *)(float *) ((arg1)->NavInputsDownDurationPrev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_PenPressure_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiIO::PenPressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::PenPressure",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::PenPressure",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_PenPressure_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->PenPressure = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_PenPressure_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiIO::PenPressure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::PenPressure",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_PenPressure_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (float) ((arg1)->PenPressure);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_InputQueueSurrogate_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 arg2 ;
  
  SWIG_check_num_args("ImGuiIO::InputQueueSurrogate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",1,"ImGuiIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",2,"ImWchar16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_InputQueueSurrogate_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar16)lua_tonumber(L, 2);
  if (arg1) (arg1)->InputQueueSurrogate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_InputQueueSurrogate_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 result;
  
  SWIG_check_num_args("ImGuiIO::InputQueueSurrogate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_InputQueueSurrogate_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImWchar16) ((arg1)->InputQueueSurrogate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_InputQueueCharacters_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  SWIG_check_num_args("ImGuiIO::InputQueueCharacters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",1,"ImGuiIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",2,"ImVector< ImWchar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_set",1,SWIGTYPE_p_ImGuiIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->InputQueueCharacters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiIO_InputQueueCharacters_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector< ImWchar > *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::InputQueueCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",1,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_get",1,SWIGTYPE_p_ImGuiIO);
  }
  
  result = (ImVector< ImWchar > *)& ((arg1)->InputQueueCharacters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiIO(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiIO *result = 0 ;
  
  SWIG_check_num_args("ImGuiIO::ImGuiIO",0,0)
  result = (ImGuiIO *)new ImGuiIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiIO(void *obj) {
ImGuiIO *arg1 = (ImGuiIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiIO_attributes[] = {
    { "ConfigFlags", _wrap_ImGuiIO_ConfigFlags_get, _wrap_ImGuiIO_ConfigFlags_set },
    { "BackendFlags", _wrap_ImGuiIO_BackendFlags_get, _wrap_ImGuiIO_BackendFlags_set },
    { "DisplaySize", _wrap_ImGuiIO_DisplaySize_get, _wrap_ImGuiIO_DisplaySize_set },
    { "DeltaTime", _wrap_ImGuiIO_DeltaTime_get, _wrap_ImGuiIO_DeltaTime_set },
    { "IniSavingRate", _wrap_ImGuiIO_IniSavingRate_get, _wrap_ImGuiIO_IniSavingRate_set },
    { "IniFilename", _wrap_ImGuiIO_IniFilename_get, _wrap_ImGuiIO_IniFilename_set },
    { "LogFilename", _wrap_ImGuiIO_LogFilename_get, _wrap_ImGuiIO_LogFilename_set },
    { "MouseDoubleClickTime", _wrap_ImGuiIO_MouseDoubleClickTime_get, _wrap_ImGuiIO_MouseDoubleClickTime_set },
    { "MouseDoubleClickMaxDist", _wrap_ImGuiIO_MouseDoubleClickMaxDist_get, _wrap_ImGuiIO_MouseDoubleClickMaxDist_set },
    { "MouseDragThreshold", _wrap_ImGuiIO_MouseDragThreshold_get, _wrap_ImGuiIO_MouseDragThreshold_set },
    { "KeyMap", _wrap_ImGuiIO_KeyMap_get, _wrap_ImGuiIO_KeyMap_set },
    { "KeyRepeatDelay", _wrap_ImGuiIO_KeyRepeatDelay_get, _wrap_ImGuiIO_KeyRepeatDelay_set },
    { "KeyRepeatRate", _wrap_ImGuiIO_KeyRepeatRate_get, _wrap_ImGuiIO_KeyRepeatRate_set },
    { "UserData", _wrap_ImGuiIO_UserData_get, _wrap_ImGuiIO_UserData_set },
    { "Fonts", _wrap_ImGuiIO_Fonts_get, _wrap_ImGuiIO_Fonts_set },
    { "FontGlobalScale", _wrap_ImGuiIO_FontGlobalScale_get, _wrap_ImGuiIO_FontGlobalScale_set },
    { "FontAllowUserScaling", _wrap_ImGuiIO_FontAllowUserScaling_get, _wrap_ImGuiIO_FontAllowUserScaling_set },
    { "FontDefault", _wrap_ImGuiIO_FontDefault_get, _wrap_ImGuiIO_FontDefault_set },
    { "DisplayFramebufferScale", _wrap_ImGuiIO_DisplayFramebufferScale_get, _wrap_ImGuiIO_DisplayFramebufferScale_set },
    { "ConfigDockingNoSplit", _wrap_ImGuiIO_ConfigDockingNoSplit_get, _wrap_ImGuiIO_ConfigDockingNoSplit_set },
    { "ConfigDockingWithShift", _wrap_ImGuiIO_ConfigDockingWithShift_get, _wrap_ImGuiIO_ConfigDockingWithShift_set },
    { "ConfigDockingAlwaysTabBar", _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_get, _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_set },
    { "ConfigDockingTransparentPayload", _wrap_ImGuiIO_ConfigDockingTransparentPayload_get, _wrap_ImGuiIO_ConfigDockingTransparentPayload_set },
    { "ConfigViewportsNoAutoMerge", _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_get, _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_set },
    { "ConfigViewportsNoTaskBarIcon", _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_get, _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_set },
    { "ConfigViewportsNoDecoration", _wrap_ImGuiIO_ConfigViewportsNoDecoration_get, _wrap_ImGuiIO_ConfigViewportsNoDecoration_set },
    { "ConfigViewportsNoDefaultParent", _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_get, _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_set },
    { "MouseDrawCursor", _wrap_ImGuiIO_MouseDrawCursor_get, _wrap_ImGuiIO_MouseDrawCursor_set },
    { "ConfigMacOSXBehaviors", _wrap_ImGuiIO_ConfigMacOSXBehaviors_get, _wrap_ImGuiIO_ConfigMacOSXBehaviors_set },
    { "ConfigInputTextCursorBlink", _wrap_ImGuiIO_ConfigInputTextCursorBlink_get, _wrap_ImGuiIO_ConfigInputTextCursorBlink_set },
    { "ConfigWindowsResizeFromEdges", _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_get, _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_set },
    { "ConfigWindowsMoveFromTitleBarOnly", _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get, _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set },
    { "ConfigWindowsMemoryCompactTimer", _wrap_ImGuiIO_ConfigWindowsMemoryCompactTimer_get, _wrap_ImGuiIO_ConfigWindowsMemoryCompactTimer_set },
    { "BackendPlatformName", _wrap_ImGuiIO_BackendPlatformName_get, _wrap_ImGuiIO_BackendPlatformName_set },
    { "BackendRendererName", _wrap_ImGuiIO_BackendRendererName_get, _wrap_ImGuiIO_BackendRendererName_set },
    { "BackendPlatformUserData", _wrap_ImGuiIO_BackendPlatformUserData_get, _wrap_ImGuiIO_BackendPlatformUserData_set },
    { "BackendRendererUserData", _wrap_ImGuiIO_BackendRendererUserData_get, _wrap_ImGuiIO_BackendRendererUserData_set },
    { "BackendLanguageUserData", _wrap_ImGuiIO_BackendLanguageUserData_get, _wrap_ImGuiIO_BackendLanguageUserData_set },
    { "GetClipboardTextFn", _wrap_ImGuiIO_GetClipboardTextFn_get, _wrap_ImGuiIO_GetClipboardTextFn_set },
    { "SetClipboardTextFn", _wrap_ImGuiIO_SetClipboardTextFn_get, _wrap_ImGuiIO_SetClipboardTextFn_set },
    { "ClipboardUserData", _wrap_ImGuiIO_ClipboardUserData_get, _wrap_ImGuiIO_ClipboardUserData_set },
    { "MousePos", _wrap_ImGuiIO_MousePos_get, _wrap_ImGuiIO_MousePos_set },
    { "MouseDown", _wrap_ImGuiIO_MouseDown_get, _wrap_ImGuiIO_MouseDown_set },
    { "MouseWheel", _wrap_ImGuiIO_MouseWheel_get, _wrap_ImGuiIO_MouseWheel_set },
    { "MouseWheelH", _wrap_ImGuiIO_MouseWheelH_get, _wrap_ImGuiIO_MouseWheelH_set },
    { "MouseHoveredViewport", _wrap_ImGuiIO_MouseHoveredViewport_get, _wrap_ImGuiIO_MouseHoveredViewport_set },
    { "KeyCtrl", _wrap_ImGuiIO_KeyCtrl_get, _wrap_ImGuiIO_KeyCtrl_set },
    { "KeyShift", _wrap_ImGuiIO_KeyShift_get, _wrap_ImGuiIO_KeyShift_set },
    { "KeyAlt", _wrap_ImGuiIO_KeyAlt_get, _wrap_ImGuiIO_KeyAlt_set },
    { "KeySuper", _wrap_ImGuiIO_KeySuper_get, _wrap_ImGuiIO_KeySuper_set },
    { "KeysDown", _wrap_ImGuiIO_KeysDown_get, _wrap_ImGuiIO_KeysDown_set },
    { "NavInputs", _wrap_ImGuiIO_NavInputs_get, _wrap_ImGuiIO_NavInputs_set },
    { "WantCaptureMouse", _wrap_ImGuiIO_WantCaptureMouse_get, _wrap_ImGuiIO_WantCaptureMouse_set },
    { "WantCaptureKeyboard", _wrap_ImGuiIO_WantCaptureKeyboard_get, _wrap_ImGuiIO_WantCaptureKeyboard_set },
    { "WantTextInput", _wrap_ImGuiIO_WantTextInput_get, _wrap_ImGuiIO_WantTextInput_set },
    { "WantSetMousePos", _wrap_ImGuiIO_WantSetMousePos_get, _wrap_ImGuiIO_WantSetMousePos_set },
    { "WantSaveIniSettings", _wrap_ImGuiIO_WantSaveIniSettings_get, _wrap_ImGuiIO_WantSaveIniSettings_set },
    { "NavActive", _wrap_ImGuiIO_NavActive_get, _wrap_ImGuiIO_NavActive_set },
    { "NavVisible", _wrap_ImGuiIO_NavVisible_get, _wrap_ImGuiIO_NavVisible_set },
    { "Framerate", _wrap_ImGuiIO_Framerate_get, _wrap_ImGuiIO_Framerate_set },
    { "MetricsRenderVertices", _wrap_ImGuiIO_MetricsRenderVertices_get, _wrap_ImGuiIO_MetricsRenderVertices_set },
    { "MetricsRenderIndices", _wrap_ImGuiIO_MetricsRenderIndices_get, _wrap_ImGuiIO_MetricsRenderIndices_set },
    { "MetricsRenderWindows", _wrap_ImGuiIO_MetricsRenderWindows_get, _wrap_ImGuiIO_MetricsRenderWindows_set },
    { "MetricsActiveWindows", _wrap_ImGuiIO_MetricsActiveWindows_get, _wrap_ImGuiIO_MetricsActiveWindows_set },
    { "MetricsActiveAllocations", _wrap_ImGuiIO_MetricsActiveAllocations_get, _wrap_ImGuiIO_MetricsActiveAllocations_set },
    { "MouseDelta", _wrap_ImGuiIO_MouseDelta_get, _wrap_ImGuiIO_MouseDelta_set },
    { "KeyMods", _wrap_ImGuiIO_KeyMods_get, _wrap_ImGuiIO_KeyMods_set },
    { "MousePosPrev", _wrap_ImGuiIO_MousePosPrev_get, _wrap_ImGuiIO_MousePosPrev_set },
    { "MouseClickedPos", _wrap_ImGuiIO_MouseClickedPos_get, _wrap_ImGuiIO_MouseClickedPos_set },
    { "MouseClickedTime", _wrap_ImGuiIO_MouseClickedTime_get, _wrap_ImGuiIO_MouseClickedTime_set },
    { "MouseClicked", _wrap_ImGuiIO_MouseClicked_get, _wrap_ImGuiIO_MouseClicked_set },
    { "MouseDoubleClicked", _wrap_ImGuiIO_MouseDoubleClicked_get, _wrap_ImGuiIO_MouseDoubleClicked_set },
    { "MouseReleased", _wrap_ImGuiIO_MouseReleased_get, _wrap_ImGuiIO_MouseReleased_set },
    { "MouseDownOwned", _wrap_ImGuiIO_MouseDownOwned_get, _wrap_ImGuiIO_MouseDownOwned_set },
    { "MouseDownWasDoubleClick", _wrap_ImGuiIO_MouseDownWasDoubleClick_get, _wrap_ImGuiIO_MouseDownWasDoubleClick_set },
    { "MouseDownDuration", _wrap_ImGuiIO_MouseDownDuration_get, _wrap_ImGuiIO_MouseDownDuration_set },
    { "MouseDownDurationPrev", _wrap_ImGuiIO_MouseDownDurationPrev_get, _wrap_ImGuiIO_MouseDownDurationPrev_set },
    { "MouseDragMaxDistanceAbs", _wrap_ImGuiIO_MouseDragMaxDistanceAbs_get, _wrap_ImGuiIO_MouseDragMaxDistanceAbs_set },
    { "MouseDragMaxDistanceSqr", _wrap_ImGuiIO_MouseDragMaxDistanceSqr_get, _wrap_ImGuiIO_MouseDragMaxDistanceSqr_set },
    { "KeysDownDuration", _wrap_ImGuiIO_KeysDownDuration_get, _wrap_ImGuiIO_KeysDownDuration_set },
    { "KeysDownDurationPrev", _wrap_ImGuiIO_KeysDownDurationPrev_get, _wrap_ImGuiIO_KeysDownDurationPrev_set },
    { "NavInputsDownDuration", _wrap_ImGuiIO_NavInputsDownDuration_get, _wrap_ImGuiIO_NavInputsDownDuration_set },
    { "NavInputsDownDurationPrev", _wrap_ImGuiIO_NavInputsDownDurationPrev_get, _wrap_ImGuiIO_NavInputsDownDurationPrev_set },
    { "PenPressure", _wrap_ImGuiIO_PenPressure_get, _wrap_ImGuiIO_PenPressure_set },
    { "InputQueueSurrogate", _wrap_ImGuiIO_InputQueueSurrogate_get, _wrap_ImGuiIO_InputQueueSurrogate_set },
    { "InputQueueCharacters", _wrap_ImGuiIO_InputQueueCharacters_get, _wrap_ImGuiIO_InputQueueCharacters_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiIO_methods[]= {
    { "AddInputCharacter", _wrap_ImGuiIO_AddInputCharacter},
    { "AddInputCharacterUTF16", _wrap_ImGuiIO_AddInputCharacterUTF16},
    { "AddInputCharactersUTF8", _wrap_ImGuiIO_AddInputCharactersUTF8},
    { "ClearInputCharacters", _wrap_ImGuiIO_ClearInputCharacters},
    {0,0}
};
static swig_lua_method swig_ImGuiIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiIO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiIO_Sf_SwigStatic = {
    "ImGuiIO",
    swig_ImGuiIO_Sf_SwigStatic_methods,
    swig_ImGuiIO_Sf_SwigStatic_attributes,
    swig_ImGuiIO_Sf_SwigStatic_constants,
    swig_ImGuiIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiIO_bases[] = {0};
static const char *swig_ImGuiIO_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiIO = { "ImGuiIO", "ImGuiIO", &SWIGTYPE_p_ImGuiIO,_proxy__wrap_new_ImGuiIO, swig_delete_ImGuiIO, swig_ImGuiIO_methods, swig_ImGuiIO_attributes, &swig_ImGuiIO_Sf_SwigStatic, swig_ImGuiIO_meta, swig_ImGuiIO_bases, swig_ImGuiIO_base_names };

static int _wrap_ImGuiInputTextCallbackData_EventFlag_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",2,"ImGuiInputTextFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventFlag_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (ImGuiInputTextFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->EventFlag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_EventFlag_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventFlag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventFlag_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (ImGuiInputTextFlags) ((arg1)->EventFlag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",2,"ImGuiInputTextFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_Flags_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (ImGuiInputTextFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_Flags_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (ImGuiInputTextFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_UserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::UserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",1,"ImGuiInputTextCallbackData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_UserData_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiInputTextCallbackData_UserData_set");
  if (arg1) (arg1)->UserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_UserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::UserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_UserData_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (void *) ((arg1)->UserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_EventChar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventChar_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  if (arg1) (arg1)->EventChar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_EventChar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventChar_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (ImWchar) ((arg1)->EventChar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_EventKey_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",2,"ImGuiKey");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventKey_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (ImGuiKey)lua_tonumber(L, 2);
  if (arg1) (arg1)->EventKey = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_EventKey_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::EventKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_EventKey_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (ImGuiKey) ((arg1)->EventKey);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_Buf_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::Buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",1,"ImGuiInputTextCallbackData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_Buf_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->Buf;
    if (arg2) {
      arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Buf, (const char *)arg2);
    } else {
      arg1->Buf = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_Buf_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::Buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_Buf_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (char *) ((arg1)->Buf);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufTextLen_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufTextLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufTextLen_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BufTextLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufTextLen_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufTextLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufTextLen_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (int) ((arg1)->BufTextLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufSize_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BufSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufSize_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (int) ((arg1)->BufSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufDirty_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufDirty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",1,"ImGuiInputTextCallbackData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufDirty_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->BufDirty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_BufDirty_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::BufDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_BufDirty_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (bool) ((arg1)->BufDirty);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_CursorPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::CursorPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_CursorPos_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CursorPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_CursorPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::CursorPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_CursorPos_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (int) ((arg1)->CursorPos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_SelectionStart_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionStart_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->SelectionStart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_SelectionStart_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionStart_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (int) ((arg1)->SelectionStart);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_SelectionEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionEnd_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->SelectionEnd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_SelectionEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionEnd_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (int) ((arg1)->SelectionEnd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiInputTextCallbackData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::ImGuiInputTextCallbackData",0,0)
  result = (ImGuiInputTextCallbackData *)new ImGuiInputTextCallbackData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiInputTextCallbackData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_DeleteChars(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::DeleteChars",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_DeleteChars",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->DeleteChars(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_InsertChars__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::InsertChars",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_InsertChars",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->InsertChars(arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_InsertChars__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::InsertChars",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",1,"ImGuiInputTextCallbackData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_InsertChars",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->InsertChars(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_InsertChars(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiInputTextCallbackData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiInputTextCallbackData_InsertChars__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiInputTextCallbackData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImGuiInputTextCallbackData_InsertChars__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiInputTextCallbackData_InsertChars'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiInputTextCallbackData::InsertChars(int,char const *,char const *)\n"
    "    ImGuiInputTextCallbackData::InsertChars(int,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiInputTextCallbackData_SelectAll(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::SelectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectAll",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectAll",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  (arg1)->SelectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_ClearSelection(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::ClearSelection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::ClearSelection",1,"ImGuiInputTextCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_ClearSelection",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  (arg1)->ClearSelection();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextCallbackData_HasSelection(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextCallbackData::HasSelection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::HasSelection",1,"ImGuiInputTextCallbackData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
    SWIG_fail_ptr("ImGuiInputTextCallbackData_HasSelection",1,SWIGTYPE_p_ImGuiInputTextCallbackData);
  }
  
  result = (bool)((ImGuiInputTextCallbackData const *)arg1)->HasSelection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiInputTextCallbackData(void *obj) {
ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiInputTextCallbackData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiInputTextCallbackData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiInputTextCallbackData_attributes[] = {
    { "EventFlag", _wrap_ImGuiInputTextCallbackData_EventFlag_get, _wrap_ImGuiInputTextCallbackData_EventFlag_set },
    { "Flags", _wrap_ImGuiInputTextCallbackData_Flags_get, _wrap_ImGuiInputTextCallbackData_Flags_set },
    { "UserData", _wrap_ImGuiInputTextCallbackData_UserData_get, _wrap_ImGuiInputTextCallbackData_UserData_set },
    { "EventChar", _wrap_ImGuiInputTextCallbackData_EventChar_get, _wrap_ImGuiInputTextCallbackData_EventChar_set },
    { "EventKey", _wrap_ImGuiInputTextCallbackData_EventKey_get, _wrap_ImGuiInputTextCallbackData_EventKey_set },
    { "Buf", _wrap_ImGuiInputTextCallbackData_Buf_get, _wrap_ImGuiInputTextCallbackData_Buf_set },
    { "BufTextLen", _wrap_ImGuiInputTextCallbackData_BufTextLen_get, _wrap_ImGuiInputTextCallbackData_BufTextLen_set },
    { "BufSize", _wrap_ImGuiInputTextCallbackData_BufSize_get, _wrap_ImGuiInputTextCallbackData_BufSize_set },
    { "BufDirty", _wrap_ImGuiInputTextCallbackData_BufDirty_get, _wrap_ImGuiInputTextCallbackData_BufDirty_set },
    { "CursorPos", _wrap_ImGuiInputTextCallbackData_CursorPos_get, _wrap_ImGuiInputTextCallbackData_CursorPos_set },
    { "SelectionStart", _wrap_ImGuiInputTextCallbackData_SelectionStart_get, _wrap_ImGuiInputTextCallbackData_SelectionStart_set },
    { "SelectionEnd", _wrap_ImGuiInputTextCallbackData_SelectionEnd_get, _wrap_ImGuiInputTextCallbackData_SelectionEnd_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_methods[]= {
    { "DeleteChars", _wrap_ImGuiInputTextCallbackData_DeleteChars},
    { "InsertChars", _wrap_ImGuiInputTextCallbackData_InsertChars},
    { "SelectAll", _wrap_ImGuiInputTextCallbackData_SelectAll},
    { "ClearSelection", _wrap_ImGuiInputTextCallbackData_ClearSelection},
    { "HasSelection", _wrap_ImGuiInputTextCallbackData_HasSelection},
    {0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiInputTextCallbackData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiInputTextCallbackData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiInputTextCallbackData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiInputTextCallbackData_Sf_SwigStatic = {
    "ImGuiInputTextCallbackData",
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_methods,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_attributes,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_constants,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiInputTextCallbackData_bases[] = {0};
static const char *swig_ImGuiInputTextCallbackData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiInputTextCallbackData = { "ImGuiInputTextCallbackData", "ImGuiInputTextCallbackData", &SWIGTYPE_p_ImGuiInputTextCallbackData,_proxy__wrap_new_ImGuiInputTextCallbackData, swig_delete_ImGuiInputTextCallbackData, swig_ImGuiInputTextCallbackData_methods, swig_ImGuiInputTextCallbackData_attributes, &swig_ImGuiInputTextCallbackData_Sf_SwigStatic, swig_ImGuiInputTextCallbackData_meta, swig_ImGuiInputTextCallbackData_bases, swig_ImGuiInputTextCallbackData_base_names };

static int _wrap_ImGuiSizeCallbackData_UserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::UserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",1,"ImGuiSizeCallbackData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_UserData_set",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiSizeCallbackData_UserData_set");
  if (arg1) (arg1)->UserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_UserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::UserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",1,"ImGuiSizeCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_UserData_get",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  result = (void *) ((arg1)->UserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",1,"ImGuiSizeCallbackData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_set",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",1,"ImGuiSizeCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_get",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  result = (ImVec2 *)& ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_CurrentSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::CurrentSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",1,"ImGuiSizeCallbackData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_set",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CurrentSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_CurrentSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::CurrentSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",1,"ImGuiSizeCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_get",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  result = (ImVec2 *)& ((arg1)->CurrentSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_DesiredSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::DesiredSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",1,"ImGuiSizeCallbackData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_set",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DesiredSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSizeCallbackData_DesiredSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::DesiredSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",1,"ImGuiSizeCallbackData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
    SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_get",1,SWIGTYPE_p_ImGuiSizeCallbackData);
  }
  
  result = (ImVec2 *)& ((arg1)->DesiredSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiSizeCallbackData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSizeCallbackData *result = 0 ;
  
  SWIG_check_num_args("ImGuiSizeCallbackData::ImGuiSizeCallbackData",0,0)
  result = (ImGuiSizeCallbackData *)new ImGuiSizeCallbackData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSizeCallbackData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiSizeCallbackData(void *obj) {
ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSizeCallbackData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSizeCallbackData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSizeCallbackData_attributes[] = {
    { "UserData", _wrap_ImGuiSizeCallbackData_UserData_get, _wrap_ImGuiSizeCallbackData_UserData_set },
    { "Pos", _wrap_ImGuiSizeCallbackData_Pos_get, _wrap_ImGuiSizeCallbackData_Pos_set },
    { "CurrentSize", _wrap_ImGuiSizeCallbackData_CurrentSize_get, _wrap_ImGuiSizeCallbackData_CurrentSize_set },
    { "DesiredSize", _wrap_ImGuiSizeCallbackData_DesiredSize_get, _wrap_ImGuiSizeCallbackData_DesiredSize_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSizeCallbackData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSizeCallbackData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSizeCallbackData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSizeCallbackData_Sf_SwigStatic = {
    "ImGuiSizeCallbackData",
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_methods,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_attributes,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_constants,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSizeCallbackData_bases[] = {0};
static const char *swig_ImGuiSizeCallbackData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSizeCallbackData = { "ImGuiSizeCallbackData", "ImGuiSizeCallbackData", &SWIGTYPE_p_ImGuiSizeCallbackData,_proxy__wrap_new_ImGuiSizeCallbackData, swig_delete_ImGuiSizeCallbackData, swig_ImGuiSizeCallbackData_methods, swig_ImGuiSizeCallbackData_attributes, &swig_ImGuiSizeCallbackData_Sf_SwigStatic, swig_ImGuiSizeCallbackData_meta, swig_ImGuiSizeCallbackData_bases, swig_ImGuiSizeCallbackData_base_names };

static int _wrap_ImGuiWindowClass_ClassId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::ClassId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ClassId",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ClassId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ClassId_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ClassId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ClassId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowClass::ClassId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ClassId",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ClassId_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiID) ((arg1)->ClassId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ParentViewportId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::ParentViewportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ParentViewportId_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ParentViewportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ParentViewportId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowClass::ParentViewportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ParentViewportId_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiID) ((arg1)->ParentViewportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",2,"ImGuiViewportFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideSet_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportFlagsOverrideSet = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags result;
  
  SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideSet_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideSet);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideClear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",2,"ImGuiViewportFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideClear_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportFlagsOverrideClear = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags result;
  
  SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideClear_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideClear);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",2,"ImGuiDockNodeFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideSet_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockNodeFlagsOverrideSet = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags result;
  
  SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideSet_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiDockNodeFlags) ((arg1)->DockNodeFlagsOverrideSet);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideClear_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideClear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideClear",1,"ImGuiWindowClass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideClear",2,"ImGuiDockNodeFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideClear_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockNodeFlagsOverrideClear = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideClear_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags result;
  
  SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideClear",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideClear_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (ImGuiDockNodeFlags) ((arg1)->DockNodeFlagsOverrideClear);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockingAlwaysTabBar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::DockingAlwaysTabBar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",1,"ImGuiWindowClass *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockingAlwaysTabBar_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DockingAlwaysTabBar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockingAlwaysTabBar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowClass::DockingAlwaysTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockingAlwaysTabBar_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (bool) ((arg1)->DockingAlwaysTabBar);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockingAllowUnclassed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowClass::DockingAllowUnclassed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",1,"ImGuiWindowClass *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockingAllowUnclassed_set",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DockingAllowUnclassed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowClass_DockingAllowUnclassed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowClass::DockingAllowUnclassed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",1,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindowClass_DockingAllowUnclassed_get",1,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  result = (bool) ((arg1)->DockingAllowUnclassed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiWindowClass(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowClass *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowClass::ImGuiWindowClass",0,0)
  result = (ImGuiWindowClass *)new ImGuiWindowClass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowClass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiWindowClass(void *obj) {
ImGuiWindowClass *arg1 = (ImGuiWindowClass *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiWindowClass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiWindowClass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiWindowClass_attributes[] = {
    { "ClassId", _wrap_ImGuiWindowClass_ClassId_get, _wrap_ImGuiWindowClass_ClassId_set },
    { "ParentViewportId", _wrap_ImGuiWindowClass_ParentViewportId_get, _wrap_ImGuiWindowClass_ParentViewportId_set },
    { "ViewportFlagsOverrideSet", _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_get, _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_set },
    { "ViewportFlagsOverrideClear", _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_get, _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_set },
    { "DockNodeFlagsOverrideSet", _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_get, _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_set },
    { "DockNodeFlagsOverrideClear", _wrap_ImGuiWindowClass_DockNodeFlagsOverrideClear_get, _wrap_ImGuiWindowClass_DockNodeFlagsOverrideClear_set },
    { "DockingAlwaysTabBar", _wrap_ImGuiWindowClass_DockingAlwaysTabBar_get, _wrap_ImGuiWindowClass_DockingAlwaysTabBar_set },
    { "DockingAllowUnclassed", _wrap_ImGuiWindowClass_DockingAllowUnclassed_get, _wrap_ImGuiWindowClass_DockingAllowUnclassed_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiWindowClass_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiWindowClass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiWindowClass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiWindowClass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiWindowClass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiWindowClass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiWindowClass_Sf_SwigStatic = {
    "ImGuiWindowClass",
    swig_ImGuiWindowClass_Sf_SwigStatic_methods,
    swig_ImGuiWindowClass_Sf_SwigStatic_attributes,
    swig_ImGuiWindowClass_Sf_SwigStatic_constants,
    swig_ImGuiWindowClass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiWindowClass_bases[] = {0};
static const char *swig_ImGuiWindowClass_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiWindowClass = { "ImGuiWindowClass", "ImGuiWindowClass", &SWIGTYPE_p_ImGuiWindowClass,_proxy__wrap_new_ImGuiWindowClass, swig_delete_ImGuiWindowClass, swig_ImGuiWindowClass_methods, swig_ImGuiWindowClass_attributes, &swig_ImGuiWindowClass_Sf_SwigStatic, swig_ImGuiWindowClass_meta, swig_ImGuiWindowClass_bases, swig_ImGuiWindowClass_base_names };

static int _wrap_ImGuiPayload_Data_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiPayload::Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Data",1,"ImGuiPayload *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPayload::Data",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Data_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPayload_Data_set");
  if (arg1) (arg1)->Data = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Data_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiPayload::Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Data",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Data_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (void *) ((arg1)->Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::DataSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataSize",1,"ImGuiPayload *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::DataSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataSize_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DataSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiPayload::DataSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataSize",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataSize_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (int) ((arg1)->DataSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_SourceId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::SourceId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceId",1,"ImGuiPayload *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::SourceId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_SourceId_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->SourceId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_SourceId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiPayload::SourceId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceId",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_SourceId_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (ImGuiID) ((arg1)->SourceId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_SourceParentId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::SourceParentId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceParentId",1,"ImGuiPayload *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::SourceParentId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_SourceParentId_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->SourceParentId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_SourceParentId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiPayload::SourceParentId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceParentId",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_SourceParentId_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (ImGuiID) ((arg1)->SourceParentId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataFrameCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::DataFrameCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",1,"ImGuiPayload *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataFrameCount_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DataFrameCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataFrameCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiPayload::DataFrameCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataFrameCount_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (int) ((arg1)->DataFrameCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataType_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::DataType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataType",1,"ImGuiPayload *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiPayload::DataType",2,"char [32+1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataType_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->DataType, (const char *)arg2, 32+1-1);
      arg1->DataType[32+1-1] = 0;
    } else {
      arg1->DataType[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_DataType_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiPayload::DataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataType",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_DataType_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (char *)(char *) ((arg1)->DataType);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Preview_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::Preview",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Preview",1,"ImGuiPayload *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiPayload::Preview",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Preview_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Preview = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Preview_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiPayload::Preview",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Preview",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Preview_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (bool) ((arg1)->Preview);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Delivery_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiPayload::Delivery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Delivery",1,"ImGuiPayload *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiPayload::Delivery",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Delivery_set",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Delivery = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Delivery_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiPayload::Delivery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Delivery",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Delivery_get",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (bool) ((arg1)->Delivery);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPayload(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *result = 0 ;
  
  SWIG_check_num_args("ImGuiPayload::ImGuiPayload",0,0)
  result = (ImGuiPayload *)new ImGuiPayload();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  SWIG_check_num_args("ImGuiPayload::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Clear",1,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_Clear",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_IsDataType(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiPayload::IsDataType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsDataType",1,"ImGuiPayload const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiPayload::IsDataType",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_IsDataType",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((ImGuiPayload const *)arg1)->IsDataType((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_IsPreview(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiPayload::IsPreview",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsPreview",1,"ImGuiPayload const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_IsPreview",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (bool)((ImGuiPayload const *)arg1)->IsPreview();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPayload_IsDelivery(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiPayload::IsDelivery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsDelivery",1,"ImGuiPayload const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiPayload_IsDelivery",1,SWIGTYPE_p_ImGuiPayload);
  }
  
  result = (bool)((ImGuiPayload const *)arg1)->IsDelivery();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiPayload(void *obj) {
ImGuiPayload *arg1 = (ImGuiPayload *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPayload(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPayload);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPayload_attributes[] = {
    { "Data", _wrap_ImGuiPayload_Data_get, _wrap_ImGuiPayload_Data_set },
    { "DataSize", _wrap_ImGuiPayload_DataSize_get, _wrap_ImGuiPayload_DataSize_set },
    { "SourceId", _wrap_ImGuiPayload_SourceId_get, _wrap_ImGuiPayload_SourceId_set },
    { "SourceParentId", _wrap_ImGuiPayload_SourceParentId_get, _wrap_ImGuiPayload_SourceParentId_set },
    { "DataFrameCount", _wrap_ImGuiPayload_DataFrameCount_get, _wrap_ImGuiPayload_DataFrameCount_set },
    { "DataType", _wrap_ImGuiPayload_DataType_get, _wrap_ImGuiPayload_DataType_set },
    { "Preview", _wrap_ImGuiPayload_Preview_get, _wrap_ImGuiPayload_Preview_set },
    { "Delivery", _wrap_ImGuiPayload_Delivery_get, _wrap_ImGuiPayload_Delivery_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPayload_methods[]= {
    { "Clear", _wrap_ImGuiPayload_Clear},
    { "IsDataType", _wrap_ImGuiPayload_IsDataType},
    { "IsPreview", _wrap_ImGuiPayload_IsPreview},
    { "IsDelivery", _wrap_ImGuiPayload_IsDelivery},
    {0,0}
};
static swig_lua_method swig_ImGuiPayload_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPayload_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPayload_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPayload_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPayload_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPayload_Sf_SwigStatic = {
    "ImGuiPayload",
    swig_ImGuiPayload_Sf_SwigStatic_methods,
    swig_ImGuiPayload_Sf_SwigStatic_attributes,
    swig_ImGuiPayload_Sf_SwigStatic_constants,
    swig_ImGuiPayload_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPayload_bases[] = {0};
static const char *swig_ImGuiPayload_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPayload = { "ImGuiPayload", "ImGuiPayload", &SWIGTYPE_p_ImGuiPayload,_proxy__wrap_new_ImGuiPayload, swig_delete_ImGuiPayload, swig_ImGuiPayload_methods, swig_ImGuiPayload_attributes, &swig_ImGuiPayload_Sf_SwigStatic, swig_ImGuiPayload_meta, swig_ImGuiPayload_bases, swig_ImGuiPayload_base_names };

static int _wrap_OpenPopupContextItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  
  SWIG_check_num_args("ImGui::OpenPopupContextItem",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopupContextItem",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopupContextItem",2,"ImGuiMouseButton");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiMouseButton)lua_tonumber(L, 2);
  ImGui::OpenPopupContextItem((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupContextItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::OpenPopupContextItem",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopupContextItem",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::OpenPopupContextItem((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupContextItem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::OpenPopupContextItem",0,0)
  ImGui::OpenPopupContextItem();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupContextItem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_OpenPopupContextItem__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_OpenPopupContextItem__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OpenPopupContextItem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OpenPopupContextItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::OpenPopupContextItem(char const *,ImGuiMouseButton)\n"
    "    ImGui::OpenPopupContextItem(char const *)\n"
    "    ImGui::OpenPopupContextItem()\n");
  lua_error(L);return 0;
}


static int _wrap_DragScalar__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalar",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalar",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragScalar",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::DragScalar",8,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalar");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalar(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragScalar__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_DragScalar__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_DragScalar__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragScalar__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_DragScalar__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_DragScalar__SWIG_5(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float,void const *,void const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float,void const *,void const *,char const *)\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float,void const *,void const *)\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float,void const *)\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float)\n"
    "    ImGui::DragScalar(char const *,ImGuiDataType,void *,float,void const *,void const *,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_DragScalarN__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragScalarN",9,9)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::DragScalarN",7,"void const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragScalarN",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragScalarN",9,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"DragScalarN");
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragScalarN(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragScalarN__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_DragScalarN__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_DragScalarN__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_DragScalarN__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_DragScalarN__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_DragScalarN__SWIG_5(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragScalarN'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float,void const *,void const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float,void const *,void const *,char const *)\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float,void const *,void const *)\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float,void const *)\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float)\n"
    "    ImGui::DragScalarN(char const *,ImGuiDataType,void *,int,float,void const *,void const *,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_DragFloat__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragFloat__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragFloat__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragFloat__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragFloat__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragFloat__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragFloat(char const *,float *,float,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragFloat(char const *,float *,float,float,float,char const *)\n"
    "    ImGui::DragFloat(char const *,float *,float,float,float)\n"
    "    ImGui::DragFloat(char const *,float *,float,float)\n"
    "    ImGui::DragFloat(char const *,float *,float)\n"
    "    ImGui::DragFloat(char const *,float *)\n"
    "    ImGui::DragFloat(char const *,float *,float,float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_DragFloat2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat2",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat2",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat2",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat2",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat2(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragFloat2__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragFloat2__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragFloat2__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragFloat2__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragFloat2__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat2__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat2__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragFloat2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragFloat2(char const *,float [2],float,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragFloat2(char const *,float [2],float,float,float,char const *)\n"
    "    ImGui::DragFloat2(char const *,float [2],float,float,float)\n"
    "    ImGui::DragFloat2(char const *,float [2],float,float)\n"
    "    ImGui::DragFloat2(char const *,float [2],float)\n"
    "    ImGui::DragFloat2(char const *,float [2])\n"
    "    ImGui::DragFloat2(char const *,float [2],float,float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_DragFloat3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat3",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat3",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat3",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat3",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat3(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragFloat3__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragFloat3__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragFloat3__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragFloat3__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragFloat3__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat3__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat3__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragFloat3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragFloat3(char const *,float [3],float,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragFloat3(char const *,float [3],float,float,float,char const *)\n"
    "    ImGui::DragFloat3(char const *,float [3],float,float,float)\n"
    "    ImGui::DragFloat3(char const *,float [3],float,float)\n"
    "    ImGui::DragFloat3(char const *,float [3],float)\n"
    "    ImGui::DragFloat3(char const *,float [3])\n"
    "    ImGui::DragFloat3(char const *,float [3],float,float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_DragFloat4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragFloat4",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat4",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat4",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat4",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DragFloat4(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DragFloat4__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DragFloat4__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DragFloat4__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DragFloat4__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_DragFloat4__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat4__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_DragFloat4__SWIG_6(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DragFloat4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DragFloat4(char const *,float [4],float,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::DragFloat4(char const *,float [4],float,float,float,char const *)\n"
    "    ImGui::DragFloat4(char const *,float [4],float,float,float)\n"
    "    ImGui::DragFloat4(char const *,float [4],float,float)\n"
    "    ImGui::DragFloat4(char const *,float [4],float)\n"
    "    ImGui::DragFloat4(char const *,float [4])\n"
    "    ImGui::DragFloat4(char const *,float [4],float,float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderScalar__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalar",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalar",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalar",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalar",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderScalar",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalar",5,"void const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::SliderScalar",6,"char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SliderScalar",7,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalar");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderScalar");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalar");
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalar(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_SliderScalar__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderScalar__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SliderScalar__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SliderScalar__SWIG_3(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderScalar(char const *,ImGuiDataType,void *,void const *,void const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderScalar(char const *,ImGuiDataType,void *,void const *,void const *,char const *)\n"
    "    ImGui::SliderScalar(char const *,ImGuiDataType,void *,void const *,void const *)\n"
    "    ImGui::SliderScalar(char const *,ImGuiDataType,void *,void const *,void const *,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderScalarN__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderScalarN",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalarN",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalarN",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalarN",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderScalarN",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalarN",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderScalarN",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::SliderScalarN",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SliderScalarN",8,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalarN");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalarN");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderScalarN");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderScalarN(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_SliderScalarN__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SliderScalarN__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_SliderScalarN__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_SliderScalarN__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderScalarN'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *,char const *)\n"
    "    ImGui::SliderScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *)\n"
    "    ImGui::SliderScalarN(char const *,ImGuiDataType,void *,int,void const *,void const *,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderFloat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderFloat__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderFloat__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderFloat(char const *,float *,float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderFloat(char const *,float *,float,float,char const *)\n"
    "    ImGui::SliderFloat(char const *,float *,float,float)\n"
    "    ImGui::SliderFloat(char const *,float *,float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderFloat2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat2",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat2",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat2",2,"float [2]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat2",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat2",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat2",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat2",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat2",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat2(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderFloat2__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderFloat2__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat2__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat2__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderFloat2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderFloat2(char const *,float [2],float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderFloat2(char const *,float [2],float,float,char const *)\n"
    "    ImGui::SliderFloat2(char const *,float [2],float,float)\n"
    "    ImGui::SliderFloat2(char const *,float [2],float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderFloat3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat3",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat3",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat3",2,"float [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat3",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat3",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat3",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat3",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat3(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderFloat3__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderFloat3__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat3__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat3__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderFloat3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderFloat3(char const *,float [3],float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderFloat3(char const *,float [3],float,float,char const *)\n"
    "    ImGui::SliderFloat3(char const *,float [3],float,float)\n"
    "    ImGui::SliderFloat3(char const *,float [3],float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderFloat4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderFloat4",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat4",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat4",2,"float [4]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat4",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat4",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat4",6,"float");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SliderFloat4",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderFloat4(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SliderFloat4__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SliderFloat4__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat4__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SliderFloat4__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SliderFloat4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SliderFloat4(char const *,float [4],float,float,char const *,ImGuiSliderFlags)\n"
    "    ImGui::SliderFloat4(char const *,float [4],float,float,char const *)\n"
    "    ImGui::SliderFloat4(char const *,float [4],float,float)\n"
    "    ImGui::SliderFloat4(char const *,float [4],float,float,char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_BeginPopupContextWindow__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupContextWindow",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",2,"ImGuiMouseButton");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiMouseButton)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginPopupContextWindow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_BeginPopupContextWindow__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_BeginPopupContextWindow__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginPopupContextWindow__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginPopupContextWindow__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginPopupContextWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginPopupContextWindow(char const *,ImGuiPopupFlags)\n"
    "    ImGui::BeginPopupContextWindow(char const *)\n"
    "    ImGui::BeginPopupContextWindow()\n"
    "    ImGui::BeginPopupContextWindow(char const *,ImGuiMouseButton,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeAdvanceToLabelPos(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::TreeAdvanceToLabelPos",0,0)
  ImGui::TreeAdvanceToLabelPos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextTreeNodeOpen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGui::SetNextTreeNodeOpen",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextTreeNodeOpen",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextTreeNodeOpen",2,"ImGuiCond");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  ImGui::SetNextTreeNodeOpen(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextTreeNodeOpen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("ImGui::SetNextTreeNodeOpen",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextTreeNodeOpen",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  ImGui::SetNextTreeNodeOpen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextTreeNodeOpen(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetNextTreeNodeOpen__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetNextTreeNodeOpen__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetNextTreeNodeOpen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetNextTreeNodeOpen(bool,ImGuiCond)\n"
    "    ImGui::SetNextTreeNodeOpen(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_GetContentRegionAvailWidth(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("ImGui::GetContentRegionAvailWidth",0,0)
  result = (float)ImGui::GetContentRegionAvailWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetOverlayDrawList(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetOverlayDrawList",0,0)
  result = (ImDrawList *)ImGui::GetOverlayDrawList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("ImGui::SetScrollHere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollHere",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  ImGui::SetScrollHere(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::SetScrollHere",0,0)
  ImGui::SetScrollHere();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollHere(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_SetScrollHere__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollHere__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollHere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollHere(float)\n"
    "    ImGui::SetScrollHere()\n");
  lua_error(L);return 0;
}


static int _wrap_IsItemDeactivatedAfterChange(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemDeactivatedAfterChange",0,0)
  result = (bool)ImGui::IsItemDeactivatedAfterChange();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiOnceUponAFrame(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiOnceUponAFrame *result = 0 ;
  
  SWIG_check_num_args("ImGuiOnceUponAFrame::ImGuiOnceUponAFrame",0,0)
  result = (ImGuiOnceUponAFrame *)new ImGuiOnceUponAFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiOnceUponAFrame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiOnceUponAFrame_RefFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiOnceUponAFrame::RefFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",1,"ImGuiOnceUponAFrame *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiOnceUponAFrame,0))){
    SWIG_fail_ptr("ImGuiOnceUponAFrame_RefFrame_set",1,SWIGTYPE_p_ImGuiOnceUponAFrame);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->RefFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiOnceUponAFrame_RefFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiOnceUponAFrame::RefFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",1,"ImGuiOnceUponAFrame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiOnceUponAFrame,0))){
    SWIG_fail_ptr("ImGuiOnceUponAFrame_RefFrame_get",1,SWIGTYPE_p_ImGuiOnceUponAFrame);
  }
  
  result = (int) ((arg1)->RefFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiOnceUponAFrame(void *obj) {
ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiOnceUponAFrame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiOnceUponAFrame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiOnceUponAFrame_attributes[] = {
    { "RefFrame", _wrap_ImGuiOnceUponAFrame_RefFrame_get, _wrap_ImGuiOnceUponAFrame_RefFrame_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiOnceUponAFrame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiOnceUponAFrame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiOnceUponAFrame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiOnceUponAFrame_Sf_SwigStatic = {
    "ImGuiOnceUponAFrame",
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_methods,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_attributes,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_constants,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiOnceUponAFrame_bases[] = {0};
static const char *swig_ImGuiOnceUponAFrame_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiOnceUponAFrame = { "ImGuiOnceUponAFrame", "ImGuiOnceUponAFrame", &SWIGTYPE_p_ImGuiOnceUponAFrame,_proxy__wrap_new_ImGuiOnceUponAFrame, swig_delete_ImGuiOnceUponAFrame, swig_ImGuiOnceUponAFrame_methods, swig_ImGuiOnceUponAFrame_attributes, &swig_ImGuiOnceUponAFrame_Sf_SwigStatic, swig_ImGuiOnceUponAFrame_meta, swig_ImGuiOnceUponAFrame_bases, swig_ImGuiOnceUponAFrame_base_names };

static int _wrap_new_ImGuiTextFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiTextFilter *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::ImGuiTextFilter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGuiTextFilter::ImGuiTextFilter",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiTextFilter *)new ImGuiTextFilter((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiTextFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::ImGuiTextFilter",0,0)
  result = (ImGuiTextFilter *)new ImGuiTextFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiTextFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImGuiTextFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ImGuiTextFilter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiTextFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiTextFilter::ImGuiTextFilter(char const *)\n"
    "    ImGuiTextFilter::ImGuiTextFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiTextFilter_Draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::Draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Draw",1,"ImGuiTextFilter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::Draw",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiTextFilter::Draw",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Draw",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->Draw((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::Draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Draw",1,"ImGuiTextFilter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::Draw",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Draw",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->Draw((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Draw__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Draw",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Draw",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  result = (bool)(arg1)->Draw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Draw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImGuiTextFilter_Draw__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiTextFilter_Draw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiTextFilter_Draw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiTextFilter_Draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiTextFilter::Draw(char const *,float)\n"
    "    ImGuiTextFilter::Draw(char const *)\n"
    "    ImGuiTextFilter::Draw()\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiTextFilter_PassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::PassFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",1,"ImGuiTextFilter const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_PassFilter",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_PassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::PassFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",1,"ImGuiTextFilter const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_PassFilter",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_PassFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiTextFilter_PassFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiTextFilter_PassFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiTextFilter_PassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiTextFilter::PassFilter(char const *,char const *) const\n"
    "    ImGuiTextFilter::PassFilter(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiTextFilter_Build(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::Build",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Build",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Build",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  (arg1)->Build();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Clear",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Clear",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_IsActive(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextFilter::IsActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::IsActive",1,"ImGuiTextFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_IsActive",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  result = (bool)((ImGuiTextFilter const *)arg1)->IsActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_InputBuf_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("ImGuiTextFilter::InputBuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",1,"ImGuiTextFilter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",2,"char [256]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_InputBuf_set",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->InputBuf, (const char *)arg2, 256-1);
      arg1->InputBuf[256-1] = 0;
    } else {
      arg1->InputBuf[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_InputBuf_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::InputBuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_InputBuf_get",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  result = (char *)(char *) ((arg1)->InputBuf);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Filters_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::ImGuiTextRange > *arg2 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *) 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::Filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Filters",1,"ImGuiTextFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTextFilter::Filters",2,"ImVector< ImGuiTextFilter::ImGuiTextRange > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Filters_set",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Filters_set",2,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t);
  }
  
  if (arg1) (arg1)->Filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_Filters_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::ImGuiTextRange > *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextFilter::Filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Filters",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_Filters_get",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  result = (ImVector< ImGuiTextFilter::ImGuiTextRange > *)& ((arg1)->Filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_CountGrep_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTextFilter::CountGrep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",1,"ImGuiTextFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_CountGrep_set",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CountGrep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextFilter_CountGrep_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTextFilter::CountGrep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",1,"ImGuiTextFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
    SWIG_fail_ptr("ImGuiTextFilter_CountGrep_get",1,SWIGTYPE_p_ImGuiTextFilter);
  }
  
  result = (int) ((arg1)->CountGrep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiTextFilter(void *obj) {
ImGuiTextFilter *arg1 = (ImGuiTextFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTextFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTextFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTextFilter_attributes[] = {
    { "InputBuf", _wrap_ImGuiTextFilter_InputBuf_get, _wrap_ImGuiTextFilter_InputBuf_set },
    { "Filters", _wrap_ImGuiTextFilter_Filters_get, _wrap_ImGuiTextFilter_Filters_set },
    { "CountGrep", _wrap_ImGuiTextFilter_CountGrep_get, _wrap_ImGuiTextFilter_CountGrep_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTextFilter_methods[]= {
    { "Draw", _wrap_ImGuiTextFilter_Draw},
    { "PassFilter", _wrap_ImGuiTextFilter_PassFilter},
    { "Build", _wrap_ImGuiTextFilter_Build},
    { "Clear", _wrap_ImGuiTextFilter_Clear},
    { "IsActive", _wrap_ImGuiTextFilter_IsActive},
    {0,0}
};
static swig_lua_method swig_ImGuiTextFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTextFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTextFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTextFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTextFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTextFilter_Sf_SwigStatic = {
    "ImGuiTextFilter",
    swig_ImGuiTextFilter_Sf_SwigStatic_methods,
    swig_ImGuiTextFilter_Sf_SwigStatic_attributes,
    swig_ImGuiTextFilter_Sf_SwigStatic_constants,
    swig_ImGuiTextFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTextFilter_bases[] = {0};
static const char *swig_ImGuiTextFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTextFilter = { "ImGuiTextFilter", "ImGuiTextFilter", &SWIGTYPE_p_ImGuiTextFilter,_proxy__wrap_new_ImGuiTextFilter, swig_delete_ImGuiTextFilter, swig_ImGuiTextFilter_methods, swig_ImGuiTextFilter_attributes, &swig_ImGuiTextFilter_Sf_SwigStatic, swig_ImGuiTextFilter_meta, swig_ImGuiTextFilter_bases, swig_ImGuiTextFilter_base_names };

static int _wrap_ImGuiTextBuffer_Buf_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::Buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::Buf",1,"ImGuiTextBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTextBuffer::Buf",2,"ImVector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_Buf_set",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_char_t,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_Buf_set",2,SWIGTYPE_p_ImVectorT_char_t);
  }
  
  if (arg1) (arg1)->Buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_Buf_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::Buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::Buf",1,"ImGuiTextBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_Buf_get",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (ImVector< char > *)& ((arg1)->Buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_EmptyString_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::EmptyString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGuiTextBuffer::EmptyString",1,"char [1]");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if(arg1) {
      strncpy((char*)ImGuiTextBuffer::EmptyString, (const char *)arg1, 1-1);
      ImGuiTextBuffer::EmptyString[1-1] = 0;
    } else {
      ImGuiTextBuffer::EmptyString[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_EmptyString_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::EmptyString",0,0)
  result = (char *)(char *)ImGuiTextBuffer::EmptyString;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiTextBuffer(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::ImGuiTextBuffer",0,0)
  result = (ImGuiTextBuffer *)new ImGuiTextBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_begin(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::begin",1,"ImGuiTextBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_begin",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (char *)((ImGuiTextBuffer const *)arg1)->begin();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_c_end(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::end",1,"ImGuiTextBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_c_end",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (char *)((ImGuiTextBuffer const *)arg1)->end();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_size(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTextBuffer::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::size",1,"ImGuiTextBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_size",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (int)((ImGuiTextBuffer const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_empty(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTextBuffer::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::empty",1,"ImGuiTextBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_empty",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (bool)((ImGuiTextBuffer const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::clear",1,"ImGuiTextBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_clear",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_reserve(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::reserve",1,"ImGuiTextBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTextBuffer::reserve",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_reserve",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_c_str(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::c_str",1,"ImGuiTextBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_c_str",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  result = (char *)((ImGuiTextBuffer const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::append",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::append",1,"ImGuiTextBuffer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::append",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiTextBuffer::append",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_append",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->append((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::append",1,"ImGuiTextBuffer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::append",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_append",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->append((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_append(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiTextBuffer_append__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiTextBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiTextBuffer_append__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiTextBuffer_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiTextBuffer::append(char const *,char const *)\n"
    "    ImGuiTextBuffer::append(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiTextBuffer_appendf(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("ImGuiTextBuffer::appendf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::appendf",1,"ImGuiTextBuffer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::appendf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTextBuffer_appendf",1,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->appendf((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTextBuffer_appendfv(lua_State* L) {
  int SWIG_arg = 0;
//  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
//  char *arg2 = (char *) 0 ;
//  va_list arg3 ;
//  va_list *argp3 ;
//  
//  SWIG_check_num_args("ImGuiTextBuffer::appendfv",3,3)
//  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",1,"ImGuiTextBuffer *");
//  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",2,"char const *");
//  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",3,"va_list");
//  
//  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
//    SWIG_fail_ptr("ImGuiTextBuffer_appendfv",1,SWIGTYPE_p_ImGuiTextBuffer);
//  }
//  
//  arg2 = (char *)lua_tostring(L, 2);
//  
//  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
//    SWIG_fail_ptr("ImGuiTextBuffer_appendfv",3,SWIGTYPE_p_va_list);
//  }
//  arg3 = *argp3;
//  
//  (arg1)->appendfv((char const *)arg2,arg3);
//  
//  return SWIG_arg;
//  
//  if(0) SWIG_fail;
//  
//fail:
//  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiTextBuffer(void *obj) {
ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTextBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTextBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTextBuffer_attributes[] = {
    { "Buf", _wrap_ImGuiTextBuffer_Buf_get, _wrap_ImGuiTextBuffer_Buf_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_methods[]= {
    { "begin", _wrap_ImGuiTextBuffer_begin},
    { "c_end", _wrap_ImGuiTextBuffer_c_end},
    { "size", _wrap_ImGuiTextBuffer_size},
    { "empty", _wrap_ImGuiTextBuffer_empty},
    { "clear", _wrap_ImGuiTextBuffer_clear},
    { "reserve", _wrap_ImGuiTextBuffer_reserve},
    { "c_str", _wrap_ImGuiTextBuffer_c_str},
    { "append", _wrap_ImGuiTextBuffer_append},
    { "appendf", _wrap_ImGuiTextBuffer_appendf},
    { "appendfv", _wrap_ImGuiTextBuffer_appendfv},
    {0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTextBuffer_Sf_SwigStatic_attributes[] = {
    { "EmptyString", _wrap_ImGuiTextBuffer_EmptyString_get, _wrap_ImGuiTextBuffer_EmptyString_set },
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTextBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTextBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTextBuffer_Sf_SwigStatic = {
    "ImGuiTextBuffer",
    swig_ImGuiTextBuffer_Sf_SwigStatic_methods,
    swig_ImGuiTextBuffer_Sf_SwigStatic_attributes,
    swig_ImGuiTextBuffer_Sf_SwigStatic_constants,
    swig_ImGuiTextBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTextBuffer_bases[] = {0};
static const char *swig_ImGuiTextBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTextBuffer = { "ImGuiTextBuffer", "ImGuiTextBuffer", &SWIGTYPE_p_ImGuiTextBuffer,_proxy__wrap_new_ImGuiTextBuffer, swig_delete_ImGuiTextBuffer, swig_ImGuiTextBuffer_methods, swig_ImGuiTextBuffer_attributes, &swig_ImGuiTextBuffer_Sf_SwigStatic, swig_ImGuiTextBuffer_meta, swig_ImGuiTextBuffer_bases, swig_ImGuiTextBuffer_base_names };

static int _wrap_ImGuiStorage_Data_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::ImGuiStoragePair > *arg2 = (ImVector< ImGuiStorage::ImGuiStoragePair > *) 0 ;
  
  SWIG_check_num_args("ImGuiStorage::Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Data",1,"ImGuiStorage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStorage::Data",2,"ImVector< ImGuiStorage::ImGuiStoragePair > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_Data_set",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t,0))){
    SWIG_fail_ptr("ImGuiStorage_Data_set",2,SWIGTYPE_p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t);
  }
  
  if (arg1) (arg1)->Data = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_Data_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::ImGuiStoragePair > *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Data",1,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_Data_get",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  result = (ImVector< ImGuiStorage::ImGuiStoragePair > *)& ((arg1)->Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiStorage::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Clear",1,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_Clear",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("ImGuiStorage::GetInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetInt",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetInt",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetInt",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int result;
  
  SWIG_check_num_args("ImGuiStorage::GetInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetInt",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetInt",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetInt",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetInt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetInt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetInt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetInt(ImGuiID,int) const\n"
    "    ImGuiStorage::GetInt(ImGuiID) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_SetInt(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ImGuiStorage::SetInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetInt",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetInt",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::SetInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_SetInt",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetInt(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGuiStorage::GetBool",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBool",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBool",2,"ImGuiID");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::GetBool",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetBool",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGuiStorage::GetBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBool",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBool",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetBool",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetBool(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetBool__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetBool__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetBool(ImGuiID,bool) const\n"
    "    ImGuiStorage::GetBool(ImGuiID) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_SetBool(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImGuiStorage::SetBool",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetBool",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetBool",2,"ImGuiID");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::SetBool",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_SetBool",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetBool(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("ImGuiStorage::GetFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloat",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloat",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetFloat",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetFloat",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float result;
  
  SWIG_check_num_args("ImGuiStorage::GetFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloat",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloat",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetFloat",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetFloat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetFloat__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetFloat__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetFloat(ImGuiID,float) const\n"
    "    ImGuiStorage::GetFloat(ImGuiID) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_SetFloat(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ImGuiStorage::SetFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetFloat",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetFloat",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::SetFloat",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_SetFloat",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetFloat(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetVoidPtr(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetVoidPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetVoidPtr",1,"ImGuiStorage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetVoidPtr",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetVoidPtr",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (void *)((ImGuiStorage const *)arg1)->GetVoidPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_SetVoidPtr(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiStorage::SetVoidPtr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_SetVoidPtr",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImGuiStorage_SetVoidPtr");
  (arg1)->SetVoidPtr(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetIntRef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetIntRef",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetIntRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetIntRef",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetIntRef",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetIntRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int *)(arg1)->GetIntRef(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetIntRef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetIntRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetIntRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetIntRef",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetIntRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (int *)(arg1)->GetIntRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetIntRef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetIntRef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetIntRef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetIntRef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetIntRef(ImGuiID,int)\n"
    "    ImGuiStorage::GetIntRef(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_GetBoolRef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetBoolRef",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",2,"ImGuiID");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetBoolRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool *)(arg1)->GetBoolRef(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetBoolRef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetBoolRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetBoolRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool *)(arg1)->GetBoolRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetBoolRef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetBoolRef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetBoolRef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetBoolRef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetBoolRef(ImGuiID,bool)\n"
    "    ImGuiStorage::GetBoolRef(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_GetFloatRef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetFloatRef",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetFloatRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float *)(arg1)->GetFloatRef(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetFloatRef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetFloatRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetFloatRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (float *)(arg1)->GetFloatRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetFloatRef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetFloatRef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetFloatRef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetFloatRef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetFloatRef(ImGuiID,float)\n"
    "    ImGuiStorage::GetFloatRef(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_GetVoidPtrRef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  void **result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetVoidPtrRef",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetVoidPtrRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImGuiStorage_GetVoidPtrRef");
  result = (void **)(arg1)->GetVoidPtrRef(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetVoidPtrRef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void **result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::GetVoidPtrRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_GetVoidPtrRef",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (void **)(arg1)->GetVoidPtrRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_GetVoidPtrRef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiStorage_GetVoidPtrRef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiStorage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImGuiStorage_GetVoidPtrRef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiStorage_GetVoidPtrRef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStorage::GetVoidPtrRef(ImGuiID,void *)\n"
    "    ImGuiStorage::GetVoidPtrRef(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiStorage_SetAllInt(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiStorage::SetAllInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetAllInt",1,"ImGuiStorage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetAllInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_SetAllInt",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAllInt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStorage_BuildSortByKey(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiStorage::BuildSortByKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::BuildSortByKey",1,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiStorage_BuildSortByKey",1,SWIGTYPE_p_ImGuiStorage);
  }
  
  (arg1)->BuildSortByKey();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStorage(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiStorage::ImGuiStorage",0,0)
  result = (ImGuiStorage *)new ImGuiStorage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiStorage(void *obj) {
ImGuiStorage *arg1 = (ImGuiStorage *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStorage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStorage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStorage_attributes[] = {
    { "Data", _wrap_ImGuiStorage_Data_get, _wrap_ImGuiStorage_Data_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStorage_methods[]= {
    { "Clear", _wrap_ImGuiStorage_Clear},
    { "GetInt", _wrap_ImGuiStorage_GetInt},
    { "SetInt", _wrap_ImGuiStorage_SetInt},
    { "GetBool", _wrap_ImGuiStorage_GetBool},
    { "SetBool", _wrap_ImGuiStorage_SetBool},
    { "GetFloat", _wrap_ImGuiStorage_GetFloat},
    { "SetFloat", _wrap_ImGuiStorage_SetFloat},
    { "GetVoidPtr", _wrap_ImGuiStorage_GetVoidPtr},
    { "SetVoidPtr", _wrap_ImGuiStorage_SetVoidPtr},
    { "GetIntRef", _wrap_ImGuiStorage_GetIntRef},
    { "GetBoolRef", _wrap_ImGuiStorage_GetBoolRef},
    { "GetFloatRef", _wrap_ImGuiStorage_GetFloatRef},
    { "GetVoidPtrRef", _wrap_ImGuiStorage_GetVoidPtrRef},
    { "SetAllInt", _wrap_ImGuiStorage_SetAllInt},
    { "BuildSortByKey", _wrap_ImGuiStorage_BuildSortByKey},
    {0,0}
};
static swig_lua_method swig_ImGuiStorage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStorage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStorage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStorage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStorage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStorage_Sf_SwigStatic = {
    "ImGuiStorage",
    swig_ImGuiStorage_Sf_SwigStatic_methods,
    swig_ImGuiStorage_Sf_SwigStatic_attributes,
    swig_ImGuiStorage_Sf_SwigStatic_constants,
    swig_ImGuiStorage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStorage_bases[] = {0};
static const char *swig_ImGuiStorage_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStorage = { "ImGuiStorage", "ImGuiStorage", &SWIGTYPE_p_ImGuiStorage,_proxy__wrap_new_ImGuiStorage, swig_delete_ImGuiStorage, swig_ImGuiStorage_methods, swig_ImGuiStorage_attributes, &swig_ImGuiStorage_Sf_SwigStatic, swig_ImGuiStorage_meta, swig_ImGuiStorage_bases, swig_ImGuiStorage_base_names };

static int _wrap_ImGuiListClipper_DisplayStart_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::DisplayStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_DisplayStart_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DisplayStart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_DisplayStart_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiListClipper::DisplayStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_DisplayStart_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (int) ((arg1)->DisplayStart);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_DisplayEnd_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::DisplayEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_DisplayEnd_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DisplayEnd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_DisplayEnd_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiListClipper::DisplayEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_DisplayEnd_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (int) ((arg1)->DisplayEnd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_ItemsCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::ItemsCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_ItemsCount_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemsCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_ItemsCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiListClipper::ItemsCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_ItemsCount_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (int) ((arg1)->ItemsCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_StepNo_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::StepNo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StepNo",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::StepNo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_StepNo_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->StepNo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_StepNo_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiListClipper::StepNo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StepNo",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_StepNo_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (int) ((arg1)->StepNo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_ItemsHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::ItemsHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_ItemsHeight_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemsHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_ItemsHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiListClipper::ItemsHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_ItemsHeight_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (float) ((arg1)->ItemsHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_StartPosY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::StartPosY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartPosY",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::StartPosY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_StartPosY_set",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->StartPosY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_StartPosY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiListClipper::StartPosY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartPosY",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_StartPosY_get",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (float) ((arg1)->StartPosY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiListClipper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *result = 0 ;
  
  SWIG_check_num_args("ImGuiListClipper::ImGuiListClipper",0,0)
  result = (ImGuiListClipper *)new ImGuiListClipper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiListClipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_Begin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ImGuiListClipper::Begin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Begin",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::Begin",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiListClipper::Begin",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_Begin",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Begin(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_Begin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiListClipper::Begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Begin",1,"ImGuiListClipper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::Begin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_Begin",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Begin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_Begin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiListClipper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiListClipper_Begin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiListClipper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiListClipper_Begin__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiListClipper_Begin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiListClipper::Begin(int,float)\n"
    "    ImGuiListClipper::Begin(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiListClipper_End(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  SWIG_check_num_args("ImGuiListClipper::End",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::End",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_End",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  (arg1)->End();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiListClipper_Step(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiListClipper::Step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Step",1,"ImGuiListClipper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
    SWIG_fail_ptr("ImGuiListClipper_Step",1,SWIGTYPE_p_ImGuiListClipper);
  }
  
  result = (bool)(arg1)->Step();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiListClipper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  ImGuiListClipper *result = 0 ;
  
  SWIG_check_num_args("ImGuiListClipper::ImGuiListClipper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiListClipper::ImGuiListClipper",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ImGuiListClipper",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (ImGuiListClipper *)new ImGuiListClipper(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiListClipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiListClipper__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  ImGuiListClipper *result = 0 ;
  
  SWIG_check_num_args("ImGuiListClipper::ImGuiListClipper",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiListClipper::ImGuiListClipper",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (ImGuiListClipper *)new ImGuiListClipper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiListClipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiListClipper(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImGuiListClipper__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ImGuiListClipper__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ImGuiListClipper__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiListClipper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiListClipper::ImGuiListClipper()\n"
    "    ImGuiListClipper::ImGuiListClipper(int,float)\n"
    "    ImGuiListClipper::ImGuiListClipper(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImGuiListClipper(void *obj) {
ImGuiListClipper *arg1 = (ImGuiListClipper *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiListClipper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiListClipper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiListClipper_attributes[] = {
    { "DisplayStart", _wrap_ImGuiListClipper_DisplayStart_get, _wrap_ImGuiListClipper_DisplayStart_set },
    { "DisplayEnd", _wrap_ImGuiListClipper_DisplayEnd_get, _wrap_ImGuiListClipper_DisplayEnd_set },
    { "ItemsCount", _wrap_ImGuiListClipper_ItemsCount_get, _wrap_ImGuiListClipper_ItemsCount_set },
    { "StepNo", _wrap_ImGuiListClipper_StepNo_get, _wrap_ImGuiListClipper_StepNo_set },
    { "ItemsHeight", _wrap_ImGuiListClipper_ItemsHeight_get, _wrap_ImGuiListClipper_ItemsHeight_set },
    { "StartPosY", _wrap_ImGuiListClipper_StartPosY_get, _wrap_ImGuiListClipper_StartPosY_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiListClipper_methods[]= {
    { "Begin", _wrap_ImGuiListClipper_Begin},
    { "End", _wrap_ImGuiListClipper_End},
    { "Step", _wrap_ImGuiListClipper_Step},
    {0,0}
};
static swig_lua_method swig_ImGuiListClipper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiListClipper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiListClipper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiListClipper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiListClipper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiListClipper_Sf_SwigStatic = {
    "ImGuiListClipper",
    swig_ImGuiListClipper_Sf_SwigStatic_methods,
    swig_ImGuiListClipper_Sf_SwigStatic_attributes,
    swig_ImGuiListClipper_Sf_SwigStatic_constants,
    swig_ImGuiListClipper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiListClipper_bases[] = {0};
static const char *swig_ImGuiListClipper_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiListClipper = { "ImGuiListClipper", "ImGuiListClipper", &SWIGTYPE_p_ImGuiListClipper,_proxy__wrap_new_ImGuiListClipper, swig_delete_ImGuiListClipper, swig_ImGuiListClipper_methods, swig_ImGuiListClipper_attributes, &swig_ImGuiListClipper_Sf_SwigStatic, swig_ImGuiListClipper_meta, swig_ImGuiListClipper_bases, swig_ImGuiListClipper_base_names };

static int _wrap_ImColor_Value_set(lua_State* L) {
  int SWIG_arg = 0;
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImColor::Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::Value",1,"ImColor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImColor::Value",2,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
    SWIG_fail_ptr("ImColor_Value_set",1,SWIGTYPE_p_ImColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImColor_Value_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->Value = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImColor_Value_get(lua_State* L) {
  int SWIG_arg = 0;
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImColor::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::Value",1,"ImColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
    SWIG_fail_ptr("ImColor_Value_get",1,SWIGTYPE_p_ImColor);
  }
  
  result = (ImVec4 *)& ((arg1)->Value);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",0,0)
  result = (ImColor *)new ImColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::ImColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::ImColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::ImColor",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::ImColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::ImColor",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 arg1 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"ImU32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImU32)lua_tonumber(L, 1);
  result = (ImColor *)new ImColor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::ImColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::ImColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::ImColor",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::ImColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::ImColor",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  ImColor *result = 0 ;
  
  SWIG_check_num_args("ImColor::ImColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"ImVec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("new_ImColor",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (ImColor *)new ImColor((ImVec4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImColor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImColor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ImColor__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ImColor__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ImColor__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ImColor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ImColor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ImColor__SWIG_4(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImColor::ImColor()\n"
    "    ImColor::ImColor(int,int,int,int)\n"
    "    ImColor::ImColor(int,int,int)\n"
    "    ImColor::ImColor(ImU32)\n"
    "    ImColor::ImColor(float,float,float,float)\n"
    "    ImColor::ImColor(float,float,float)\n"
    "    ImColor::ImColor(ImVec4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImColor_SetHSV__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImColor::SetHSV",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::SetHSV",1,"ImColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::SetHSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::SetHSV",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::SetHSV",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImColor::SetHSV",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
    SWIG_fail_ptr("ImColor_SetHSV",1,SWIGTYPE_p_ImColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->SetHSV(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImColor_SetHSV__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("ImColor::SetHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::SetHSV",1,"ImColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::SetHSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::SetHSV",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::SetHSV",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
    SWIG_fail_ptr("ImColor_SetHSV",1,SWIGTYPE_p_ImColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->SetHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImColor_SetHSV(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImColor_SetHSV__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImColor_SetHSV__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImColor_SetHSV'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImColor::SetHSV(float,float,float,float)\n"
    "    ImColor::SetHSV(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImColor_HSV__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor result;
  
  SWIG_check_num_args("ImColor::HSV",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::HSV",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::HSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::HSV",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::HSV",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = ImColor::HSV(arg1,arg2,arg3,arg4);
  {
    ImColor * resultptr = new ImColor((const ImColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImColor_HSV__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor result;
  
  SWIG_check_num_args("ImColor::HSV",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::HSV",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::HSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::HSV",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = ImColor::HSV(arg1,arg2,arg3);
  {
    ImColor * resultptr = new ImColor((const ImColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImColor_HSV(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImColor_HSV__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImColor_HSV__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImColor_HSV'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImColor::HSV(float,float,float,float)\n"
    "    ImColor::HSV(float,float,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImColor(void *obj) {
ImColor *arg1 = (ImColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImColor_attributes[] = {
    { "Value", _wrap_ImColor_Value_get, _wrap_ImColor_Value_set },
    {0,0,0}
};
static swig_lua_method swig_ImColor_methods[]= {
    { "SetHSV", _wrap_ImColor_SetHSV},
    {0,0}
};
static swig_lua_method swig_ImColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImColor_Sf_SwigStatic_methods[]= {
    { "HSV", _wrap_ImColor_HSV},
    {0,0}
};
static swig_lua_class* swig_ImColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImColor_Sf_SwigStatic = {
    "ImColor",
    swig_ImColor_Sf_SwigStatic_methods,
    swig_ImColor_Sf_SwigStatic_attributes,
    swig_ImColor_Sf_SwigStatic_constants,
    swig_ImColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImColor_bases[] = {0};
static const char *swig_ImColor_base_names[] = {0};
static swig_lua_class _wrap_class_ImColor = { "ImColor", "ImColor", &SWIGTYPE_p_ImColor,_proxy__wrap_new_ImColor, swig_delete_ImColor, swig_ImColor_methods, swig_ImColor_attributes, &swig_ImColor_Sf_SwigStatic, swig_ImColor_meta, swig_ImColor_bases, swig_ImColor_base_names };

static int _wrap_ImDrawCmd_ClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImDrawCmd::ClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ClipRect",1,"ImDrawCmd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::ClipRect",2,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_ClipRect_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImDrawCmd_ClipRect_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->ClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_ClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImDrawCmd::ClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ClipRect",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_ClipRect_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (ImVec4 *)& ((arg1)->ClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_TextureId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  SWIG_check_num_args("ImDrawCmd::TextureId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::TextureId",1,"ImDrawCmd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::TextureId",2,"ImTextureID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_TextureId_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawCmd_TextureId_set");
  if (arg1) (arg1)->TextureId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_TextureId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  
  SWIG_check_num_args("ImDrawCmd::TextureId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::TextureId",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_TextureId_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (ImTextureID) ((arg1)->TextureId);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_VtxOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImDrawCmd::VtxOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::VtxOffset",1,"ImDrawCmd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::VtxOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_VtxOffset_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->VtxOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_VtxOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImDrawCmd::VtxOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::VtxOffset",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_VtxOffset_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (unsigned int) ((arg1)->VtxOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_IdxOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImDrawCmd::IdxOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::IdxOffset",1,"ImDrawCmd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::IdxOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_IdxOffset_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->IdxOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_IdxOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImDrawCmd::IdxOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::IdxOffset",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_IdxOffset_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (unsigned int) ((arg1)->IdxOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_ElemCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImDrawCmd::ElemCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ElemCount",1,"ImDrawCmd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::ElemCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_ElemCount_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ElemCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_ElemCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImDrawCmd::ElemCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ElemCount",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_ElemCount_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (unsigned int) ((arg1)->ElemCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_UserCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  
  SWIG_check_num_args("ImDrawCmd::UserCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallback",1,"ImDrawCmd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallback",2,"ImDrawCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_UserCallback_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0))){
    SWIG_fail_ptr("ImDrawCmd_UserCallback_set",2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void);
  }
  
  if (arg1) (arg1)->UserCallback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_UserCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback result;
  
  SWIG_check_num_args("ImDrawCmd::UserCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallback",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_UserCallback_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (ImDrawCallback) ((arg1)->UserCallback);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_UserCallbackData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImDrawCmd::UserCallbackData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",1,"ImDrawCmd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_UserCallbackData_set",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawCmd_UserCallbackData_set");
  if (arg1) (arg1)->UserCallbackData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawCmd_UserCallbackData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImDrawCmd::UserCallbackData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",1,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawCmd_UserCallbackData_get",1,SWIGTYPE_p_ImDrawCmd);
  }
  
  result = (void *) ((arg1)->UserCallbackData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawCmd(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawCmd *result = 0 ;
  
  SWIG_check_num_args("ImDrawCmd::ImDrawCmd",0,0)
  result = (ImDrawCmd *)new ImDrawCmd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawCmd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawCmd(void *obj) {
ImDrawCmd *arg1 = (ImDrawCmd *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawCmd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawCmd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawCmd_attributes[] = {
    { "ClipRect", _wrap_ImDrawCmd_ClipRect_get, _wrap_ImDrawCmd_ClipRect_set },
    { "TextureId", _wrap_ImDrawCmd_TextureId_get, _wrap_ImDrawCmd_TextureId_set },
    { "VtxOffset", _wrap_ImDrawCmd_VtxOffset_get, _wrap_ImDrawCmd_VtxOffset_set },
    { "IdxOffset", _wrap_ImDrawCmd_IdxOffset_get, _wrap_ImDrawCmd_IdxOffset_set },
    { "ElemCount", _wrap_ImDrawCmd_ElemCount_get, _wrap_ImDrawCmd_ElemCount_set },
    { "UserCallback", _wrap_ImDrawCmd_UserCallback_get, _wrap_ImDrawCmd_UserCallback_set },
    { "UserCallbackData", _wrap_ImDrawCmd_UserCallbackData_get, _wrap_ImDrawCmd_UserCallbackData_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawCmd_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawCmd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawCmd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawCmd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawCmd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawCmd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawCmd_Sf_SwigStatic = {
    "ImDrawCmd",
    swig_ImDrawCmd_Sf_SwigStatic_methods,
    swig_ImDrawCmd_Sf_SwigStatic_attributes,
    swig_ImDrawCmd_Sf_SwigStatic_constants,
    swig_ImDrawCmd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawCmd_bases[] = {0};
static const char *swig_ImDrawCmd_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawCmd = { "ImDrawCmd", "ImDrawCmd", &SWIGTYPE_p_ImDrawCmd,_proxy__wrap_new_ImDrawCmd, swig_delete_ImDrawCmd, swig_ImDrawCmd_methods, swig_ImDrawCmd_attributes, &swig_ImDrawCmd_Sf_SwigStatic, swig_ImDrawCmd_meta, swig_ImDrawCmd_bases, swig_ImDrawCmd_base_names };

static int _wrap_ImDrawVert_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawVert::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::pos",1,"ImDrawVert *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawVert::pos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_pos_set",1,SWIGTYPE_p_ImDrawVert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawVert_pos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawVert_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawVert::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::pos",1,"ImDrawVert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_pos_get",1,SWIGTYPE_p_ImDrawVert);
  }
  
  result = (ImVec2 *)& ((arg1)->pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawVert_uv_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawVert::uv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::uv",1,"ImDrawVert *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawVert::uv",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_uv_set",1,SWIGTYPE_p_ImDrawVert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawVert_uv_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->uv = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawVert_uv_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawVert::uv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::uv",1,"ImDrawVert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_uv_get",1,SWIGTYPE_p_ImDrawVert);
  }
  
  result = (ImVec2 *)& ((arg1)->uv);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawVert_col_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImDrawVert::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::col",1,"ImDrawVert *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawVert::col",2,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_col_set",1,SWIGTYPE_p_ImDrawVert);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  if (arg1) (arg1)->col = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawVert_col_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImDrawVert::col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::col",1,"ImDrawVert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
    SWIG_fail_ptr("ImDrawVert_col_get",1,SWIGTYPE_p_ImDrawVert);
  }
  
  result = (ImU32) ((arg1)->col);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawVert(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawVert *result = 0 ;
  
  SWIG_check_num_args("ImDrawVert::ImDrawVert",0,0)
  result = (ImDrawVert *)new ImDrawVert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawVert,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawVert(void *obj) {
ImDrawVert *arg1 = (ImDrawVert *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawVert(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawVert);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawVert_attributes[] = {
    { "pos", _wrap_ImDrawVert_pos_get, _wrap_ImDrawVert_pos_set },
    { "uv", _wrap_ImDrawVert_uv_get, _wrap_ImDrawVert_uv_set },
    { "col", _wrap_ImDrawVert_col_get, _wrap_ImDrawVert_col_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawVert_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawVert_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawVert_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawVert_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawVert_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawVert_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawVert_Sf_SwigStatic = {
    "ImDrawVert",
    swig_ImDrawVert_Sf_SwigStatic_methods,
    swig_ImDrawVert_Sf_SwigStatic_attributes,
    swig_ImDrawVert_Sf_SwigStatic_constants,
    swig_ImDrawVert_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawVert_bases[] = {0};
static const char *swig_ImDrawVert_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawVert = { "ImDrawVert", "ImDrawVert", &SWIGTYPE_p_ImDrawVert,_proxy__wrap_new_ImDrawVert, swig_delete_ImDrawVert, swig_ImDrawVert_methods, swig_ImDrawVert_attributes, &swig_ImDrawVert_Sf_SwigStatic, swig_ImDrawVert_meta, swig_ImDrawVert_bases, swig_ImDrawVert_base_names };

static int _wrap_ImDrawChannel__CmdBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;
  
  SWIG_check_num_args("ImDrawChannel::_CmdBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",1,"ImDrawChannel *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",2,"ImVector< ImDrawCmd > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
    SWIG_fail_ptr("ImDrawChannel__CmdBuffer_set",1,SWIGTYPE_p_ImDrawChannel);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0))){
    SWIG_fail_ptr("ImDrawChannel__CmdBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t);
  }
  
  if (arg1) (arg1)->_CmdBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawChannel__CmdBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  
  SWIG_check_num_args("ImDrawChannel::_CmdBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",1,"ImDrawChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
    SWIG_fail_ptr("ImDrawChannel__CmdBuffer_get",1,SWIGTYPE_p_ImDrawChannel);
  }
  
  result = (ImVector< ImDrawCmd > *)& ((arg1)->_CmdBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawChannel__IdxBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;
  
  SWIG_check_num_args("ImDrawChannel::_IdxBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",1,"ImDrawChannel *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",2,"ImVector< ImDrawIdx > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
    SWIG_fail_ptr("ImDrawChannel__IdxBuffer_set",1,SWIGTYPE_p_ImDrawChannel);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImDrawChannel__IdxBuffer_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->_IdxBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawChannel__IdxBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  
  SWIG_check_num_args("ImDrawChannel::_IdxBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",1,"ImDrawChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
    SWIG_fail_ptr("ImDrawChannel__IdxBuffer_get",1,SWIGTYPE_p_ImDrawChannel);
  }
  
  result = (ImVector< ImDrawIdx > *)& ((arg1)->_IdxBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawChannel(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawChannel *result = 0 ;
  
  SWIG_check_num_args("ImDrawChannel::ImDrawChannel",0,0)
  result = (ImDrawChannel *)new ImDrawChannel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawChannel,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawChannel(void *obj) {
ImDrawChannel *arg1 = (ImDrawChannel *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawChannel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawChannel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawChannel_attributes[] = {
    { "_CmdBuffer", _wrap_ImDrawChannel__CmdBuffer_get, _wrap_ImDrawChannel__CmdBuffer_set },
    { "_IdxBuffer", _wrap_ImDrawChannel__IdxBuffer_get, _wrap_ImDrawChannel__IdxBuffer_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawChannel_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawChannel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawChannel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawChannel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawChannel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawChannel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawChannel_Sf_SwigStatic = {
    "ImDrawChannel",
    swig_ImDrawChannel_Sf_SwigStatic_methods,
    swig_ImDrawChannel_Sf_SwigStatic_attributes,
    swig_ImDrawChannel_Sf_SwigStatic_constants,
    swig_ImDrawChannel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawChannel_bases[] = {0};
static const char *swig_ImDrawChannel_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawChannel = { "ImDrawChannel", "ImDrawChannel", &SWIGTYPE_p_ImDrawChannel,_proxy__wrap_new_ImDrawChannel, swig_delete_ImDrawChannel, swig_ImDrawChannel_methods, swig_ImDrawChannel_attributes, &swig_ImDrawChannel_Sf_SwigStatic, swig_ImDrawChannel_meta, swig_ImDrawChannel_bases, swig_ImDrawChannel_base_names };

static int _wrap_ImDrawListSplitter__Current_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawListSplitter::_Current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Current",1,"ImDrawListSplitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Current",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Current_set",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->_Current = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter__Current_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  SWIG_check_num_args("ImDrawListSplitter::_Current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Current",1,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Current_get",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  result = (int) ((arg1)->_Current);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter__Count_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawListSplitter::_Count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Count",1,"ImDrawListSplitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Count",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Count_set",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->_Count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter__Count_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  SWIG_check_num_args("ImDrawListSplitter::_Count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Count",1,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Count_get",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  result = (int) ((arg1)->_Count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter__Channels_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector< ImDrawChannel > *arg2 = (ImVector< ImDrawChannel > *) 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::_Channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Channels",1,"ImDrawListSplitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Channels",2,"ImVector< ImDrawChannel > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Channels_set",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawChannel_t,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Channels_set",2,SWIGTYPE_p_ImVectorT_ImDrawChannel_t);
  }
  
  if (arg1) (arg1)->_Channels = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter__Channels_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector< ImDrawChannel > *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::_Channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Channels",1,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter__Channels_get",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  result = (ImVector< ImDrawChannel > *)& ((arg1)->_Channels);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawChannel_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawListSplitter(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::ImDrawListSplitter",0,0)
  result = (ImDrawListSplitter *)new ImDrawListSplitter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSplitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Clear",1,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter_Clear",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter_ClearFreeMemory(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::ClearFreeMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::ClearFreeMemory",1,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter_ClearFreeMemory",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  (arg1)->ClearFreeMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter_Split(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ImDrawListSplitter::Split",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Split",1,"ImDrawListSplitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::Split",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawListSplitter::Split",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter_Split",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawListSplitter_Split",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Split(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter_Merge(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawListSplitter::Merge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Merge",1,"ImDrawListSplitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::Merge",2,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter_Merge",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawListSplitter_Merge",2,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->Merge(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSplitter_SetCurrentChannel(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ImDrawListSplitter::SetCurrentChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",1,"ImDrawListSplitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawListSplitter_SetCurrentChannel",1,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawListSplitter_SetCurrentChannel",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetCurrentChannel(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawListSplitter(void *obj) {
ImDrawListSplitter *arg1 = (ImDrawListSplitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawListSplitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawListSplitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawListSplitter_attributes[] = {
    { "_Current", _wrap_ImDrawListSplitter__Current_get, _wrap_ImDrawListSplitter__Current_set },
    { "_Count", _wrap_ImDrawListSplitter__Count_get, _wrap_ImDrawListSplitter__Count_set },
    { "_Channels", _wrap_ImDrawListSplitter__Channels_get, _wrap_ImDrawListSplitter__Channels_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawListSplitter_methods[]= {
    { "Clear", _wrap_ImDrawListSplitter_Clear},
    { "ClearFreeMemory", _wrap_ImDrawListSplitter_ClearFreeMemory},
    { "Split", _wrap_ImDrawListSplitter_Split},
    { "Merge", _wrap_ImDrawListSplitter_Merge},
    { "SetCurrentChannel", _wrap_ImDrawListSplitter_SetCurrentChannel},
    {0,0}
};
static swig_lua_method swig_ImDrawListSplitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawListSplitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawListSplitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawListSplitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawListSplitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawListSplitter_Sf_SwigStatic = {
    "ImDrawListSplitter",
    swig_ImDrawListSplitter_Sf_SwigStatic_methods,
    swig_ImDrawListSplitter_Sf_SwigStatic_attributes,
    swig_ImDrawListSplitter_Sf_SwigStatic_constants,
    swig_ImDrawListSplitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawListSplitter_bases[] = {0};
static const char *swig_ImDrawListSplitter_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawListSplitter = { "ImDrawListSplitter", "ImDrawListSplitter", &SWIGTYPE_p_ImDrawListSplitter,_proxy__wrap_new_ImDrawListSplitter, swig_delete_ImDrawListSplitter, swig_ImDrawListSplitter_methods, swig_ImDrawListSplitter_attributes, &swig_ImDrawListSplitter_Sf_SwigStatic, swig_ImDrawListSplitter_meta, swig_ImDrawListSplitter_bases, swig_ImDrawListSplitter_base_names };

static int _wrap_ImDrawList_CmdBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::CmdBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CmdBuffer",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::CmdBuffer",2,"ImVector< ImDrawCmd > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_CmdBuffer_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0))){
    SWIG_fail_ptr("ImDrawList_CmdBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t);
  }
  
  if (arg1) (arg1)->CmdBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_CmdBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::CmdBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CmdBuffer",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_CmdBuffer_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_IdxBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::IdxBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::IdxBuffer",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::IdxBuffer",2,"ImVector< ImDrawIdx > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_IdxBuffer_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImDrawList_IdxBuffer_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->IdxBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_IdxBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::IdxBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::IdxBuffer",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_IdxBuffer_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_VtxBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *arg2 = (ImVector< ImDrawVert > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::VtxBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::VtxBuffer",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::VtxBuffer",2,"ImVector< ImDrawVert > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_VtxBuffer_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawVert_t,0))){
    SWIG_fail_ptr("ImDrawList_VtxBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawVert_t);
  }
  
  if (arg1) (arg1)->VtxBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_VtxBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::VtxBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::VtxBuffer",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_VtxBuffer_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImDrawVert > *)& ((arg1)->VtxBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawVert_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags arg2 ;
  
  SWIG_check_num_args("ImDrawList::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::Flags",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::Flags",2,"ImDrawListFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_Flags_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (ImDrawListFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags result;
  
  SWIG_check_num_args("ImDrawList::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::Flags",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_Flags_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawListFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Data_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Data",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Data",2,"ImDrawListSharedData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Data_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSharedData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawList__Data_set",2,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  if (arg1) (arg1)->_Data = (ImDrawListSharedData const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Data_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Data",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Data_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawListSharedData *) ((arg1)->_Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__OwnerName_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_OwnerName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OwnerName",1,"ImDrawList *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImDrawList::_OwnerName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__OwnerName_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->_OwnerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_OwnerName, (const char *)arg2);
    } else {
      arg1->_OwnerName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__OwnerName_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_OwnerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OwnerName",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__OwnerName_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (char *) ((arg1)->_OwnerName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__VtxCurrentIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImDrawList::_VtxCurrentIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__VtxCurrentIdx_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->_VtxCurrentIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__VtxCurrentIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImDrawList::_VtxCurrentIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__VtxCurrentIdx_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (unsigned int) ((arg1)->_VtxCurrentIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__VtxWritePtr_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_VtxWritePtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",2,"ImDrawVert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__VtxWritePtr_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawVert,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawList__VtxWritePtr_set",2,SWIGTYPE_p_ImDrawVert);
  }
  
  if (arg1) (arg1)->_VtxWritePtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__VtxWritePtr_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_VtxWritePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__VtxWritePtr_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawVert,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__IdxWritePtr_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_IdxWritePtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",2,"ImDrawIdx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__IdxWritePtr_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawList__IdxWritePtr_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  if (arg1) (arg1)->_IdxWritePtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__IdxWritePtr_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_IdxWritePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__IdxWritePtr_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawIdx *) ((arg1)->_IdxWritePtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__ClipRectStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *arg2 = (ImVector< ImVec4 > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_ClipRectStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClipRectStack",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_ClipRectStack",2,"ImVector< ImVec4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__ClipRectStack_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImVec4_t,0))){
    SWIG_fail_ptr("ImDrawList__ClipRectStack_set",2,SWIGTYPE_p_ImVectorT_ImVec4_t);
  }
  
  if (arg1) (arg1)->_ClipRectStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__ClipRectStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_ClipRectStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClipRectStack",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__ClipRectStack_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImVec4 > *)& ((arg1)->_ClipRectStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImVec4_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__TextureIdStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *arg2 = (ImVector< ImTextureID > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_TextureIdStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_TextureIdStack",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_TextureIdStack",2,"ImVector< ImTextureID > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__TextureIdStack_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_void_p_t,0))){
    SWIG_fail_ptr("ImDrawList__TextureIdStack_set",2,SWIGTYPE_p_ImVectorT_void_p_t);
  }
  
  if (arg1) (arg1)->_TextureIdStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__TextureIdStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_TextureIdStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_TextureIdStack",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__TextureIdStack_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImTextureID > *)& ((arg1)->_TextureIdStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_void_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Path_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *arg2 = (ImVector< ImVec2 > *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Path",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Path",2,"ImVector< ImVec2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Path_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImVec2_t,0))){
    SWIG_fail_ptr("ImDrawList__Path_set",2,SWIGTYPE_p_ImVectorT_ImVec2_t);
  }
  
  if (arg1) (arg1)->_Path = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Path_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Path",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Path_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImVector< ImVec2 > *)& ((arg1)->_Path);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImVec2_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__CmdHeader_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCmd *arg2 = (ImDrawCmd *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_CmdHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CmdHeader",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_CmdHeader",2,"ImDrawCmd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__CmdHeader_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawCmd,0))){
    SWIG_fail_ptr("ImDrawList__CmdHeader_set",2,SWIGTYPE_p_ImDrawCmd);
  }
  
  if (arg1) (arg1)->_CmdHeader = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__CmdHeader_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCmd *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_CmdHeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CmdHeader",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__CmdHeader_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawCmd *)& ((arg1)->_CmdHeader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawCmd,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Splitter_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *arg2 = (ImDrawListSplitter *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_Splitter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Splitter",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Splitter",2,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Splitter_set",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImDrawList__Splitter_set",2,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  if (arg1) (arg1)->_Splitter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__Splitter_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::_Splitter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Splitter",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__Splitter_get",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawListSplitter *)& ((arg1)->_Splitter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSplitter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawList(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::ImDrawList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ImDrawList",1,"ImDrawListSharedData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("new_ImDrawList",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImDrawList *)new ImDrawList((ImDrawListSharedData const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PushClipRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  bool arg4 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  
  SWIG_check_num_args("ImDrawList::PushClipRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushClipRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PushClipRect",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PushClipRect",3,"ImVec2");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImDrawList::PushClipRect",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->PushClipRect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PushClipRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  
  SWIG_check_num_args("ImDrawList::PushClipRect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushClipRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PushClipRect",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PushClipRect",3,"ImVec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRect",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  (arg1)->PushClipRect(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PushClipRect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImDrawList_PushClipRect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_PushClipRect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_PushClipRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::PushClipRect(ImVec2,ImVec2,bool)\n"
    "    ImDrawList::PushClipRect(ImVec2,ImVec2)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_PushClipRectFullScreen(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::PushClipRectFullScreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushClipRectFullScreen",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PushClipRectFullScreen",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->PushClipRectFullScreen();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PopClipRect(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::PopClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PopClipRect",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PopClipRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->PopClipRect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PushTextureID(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  SWIG_check_num_args("ImDrawList::PushTextureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushTextureID",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::PushTextureID",2,"ImTextureID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PushTextureID",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_PushTextureID");
  (arg1)->PushTextureID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PopTextureID(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::PopTextureID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PopTextureID",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PopTextureID",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->PopTextureID();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_GetClipRectMin(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImDrawList::GetClipRectMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::GetClipRectMin",1,"ImDrawList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_GetClipRectMin",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = ((ImDrawList const *)arg1)->GetClipRectMin();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_GetClipRectMax(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImDrawList::GetClipRectMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::GetClipRectMax",1,"ImDrawList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_GetClipRectMax",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = ((ImDrawList const *)arg1)->GetClipRectMax();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddLine",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddLine",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddLine",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddLine",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddLine",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddLine",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddLine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddLine",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddLine",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddLine",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddLine",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddLine",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddLine(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddLine__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddLine__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddLine(ImVec2 const &,ImVec2 const &,ImU32,float)\n"
    "    ImDrawList::AddLine(ImVec2 const &,ImVec2 const &,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawCornerFlags arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("ImDrawList::AddRect",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRect",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRect",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRect",6,"ImDrawCornerFlags");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddRect",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (ImDrawCornerFlags)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawCornerFlags arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddRect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRect",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRect",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRect",6,"ImDrawCornerFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (ImDrawCornerFlags)lua_tonumber(L, 6);
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRect",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRect",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRect",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRect",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRect(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddRect__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddRect__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddRect__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImDrawList_AddRect__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddRect(ImVec2 const &,ImVec2 const &,ImU32,float,ImDrawCornerFlags,float)\n"
    "    ImDrawList::AddRect(ImVec2 const &,ImVec2 const &,ImU32,float,ImDrawCornerFlags)\n"
    "    ImDrawList::AddRect(ImVec2 const &,ImVec2 const &,ImU32,float)\n"
    "    ImDrawList::AddRect(ImVec2 const &,ImVec2 const &,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddRectFilled__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawCornerFlags arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddRectFilled",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilled",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilled",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilled",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRectFilled",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRectFilled",6,"ImDrawCornerFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (ImDrawCornerFlags)lua_tonumber(L, 6);
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRectFilled__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddRectFilled",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilled",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilled",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilled",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRectFilled",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRectFilled__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddRectFilled",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilled",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilled",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilled",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilled",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddRectFilled(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddRectFilled__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddRectFilled__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddRectFilled__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddRectFilled'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddRectFilled(ImVec2 const &,ImVec2 const &,ImU32,float,ImDrawCornerFlags)\n"
    "    ImDrawList::AddRectFilled(ImVec2 const &,ImVec2 const &,ImU32,float)\n"
    "    ImDrawList::AddRectFilled(ImVec2 const &,ImVec2 const &,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddRectFilledMultiColor(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  
  SWIG_check_num_args("ImDrawList::AddRectFilledMultiColor",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",5,"ImU32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",7,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  (arg1)->AddRectFilledMultiColor((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddQuad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("ImDrawList::AddQuad",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddQuad",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddQuad",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddQuad",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddQuad",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddQuad",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddQuad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddQuad",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddQuad",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddQuad",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddQuad",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddQuad",6,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddQuad(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddQuad__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImDrawList_AddQuad__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddQuad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddQuad(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float)\n"
    "    ImDrawList::AddQuad(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddQuadFilled(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddQuadFilled",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddQuadFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddQuadFilled",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddQuadFilled",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddQuadFilled",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddQuadFilled",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddQuadFilled",6,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddQuadFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuadFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuadFilled",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuadFilled",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddQuadFilled",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  (arg1)->AddQuadFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddTriangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddTriangle",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddTriangle",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddTriangle",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddTriangle",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddTriangle",5,"ImU32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddTriangle",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddTriangle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddTriangle",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddTriangle",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddTriangle",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddTriangle",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddTriangle",5,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangle",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddTriangle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddTriangle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddTriangle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddTriangle(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float)\n"
    "    ImDrawList::AddTriangle(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddTriangleFilled(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddTriangleFilled",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",5,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangleFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangleFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangleFilled",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddTriangleFilled",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  (arg1)->AddTriangleFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddCircle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircle",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircle",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircle",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddCircle",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddCircle",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddCircle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircle",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircle",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircle",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddCircle",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddCircle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircle",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircle",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircle",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddCircle",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddCircle__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddCircle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddCircle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddCircle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddCircle(ImVec2 const &,float,ImU32,int,float)\n"
    "    ImDrawList::AddCircle(ImVec2 const &,float,ImU32,int)\n"
    "    ImDrawList::AddCircle(ImVec2 const &,float,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddCircleFilled__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddCircleFilled",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircleFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircleFilled",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircleFilled",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircleFilled",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddCircleFilled",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCircleFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddCircleFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircleFilled__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddCircleFilled",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircleFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircleFilled",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircleFilled",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircleFilled",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCircleFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddCircleFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddCircleFilled(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddCircleFilled__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddCircleFilled__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddCircleFilled'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddCircleFilled(ImVec2 const &,float,ImU32,int)\n"
    "    ImDrawList::AddCircleFilled(ImVec2 const &,float,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddNgon__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddNgon",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddNgon",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddNgon",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddNgon",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddNgon",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddNgon",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddNgon",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddNgon",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddNgon",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->AddNgon((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddNgon__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddNgon",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddNgon",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddNgon",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddNgon",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddNgon",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddNgon",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddNgon",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddNgon",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->AddNgon((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddNgon(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddNgon__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddNgon__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddNgon'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddNgon(ImVec2 const &,float,ImU32,int,float)\n"
    "    ImDrawList::AddNgon(ImVec2 const &,float,ImU32,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddNgonFilled(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::AddNgonFilled",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddNgonFilled",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddNgonFilled",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddNgonFilled",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddNgonFilled",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddNgonFilled",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddNgonFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddNgonFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->AddNgonFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddText",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"ImU32");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddText",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"ImU32");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec4 *arg9 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddText",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImFont const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"ImU32");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImDrawList::AddText",6,"char const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImDrawList::AddText",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddText",8,"float");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("ImDrawList::AddText",9,"ImVec4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImFont);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImDrawList_AddText",9,SWIGTYPE_p_ImVec4);
  }
  
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  
  SWIG_check_num_args("ImDrawList::AddText",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImFont const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"ImU32");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImDrawList::AddText",6,"char const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImDrawList::AddText",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddText",8,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImFont);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddText",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImFont const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"ImU32");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImDrawList::AddText",6,"char const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImDrawList::AddText",7,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImFont);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddText",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImFont const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"ImU32");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImDrawList::AddText",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImFont);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddText",4,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddText(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_AddText__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_AddText__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_AddText__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImDrawList_AddText__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ImDrawList_AddText__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec4, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_ImDrawList_AddText__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddText(ImVec2 const &,ImU32,char const *,char const *)\n"
    "    ImDrawList::AddText(ImVec2 const &,ImU32,char const *)\n"
    "    ImDrawList::AddText(ImFont const *,float,ImVec2 const &,ImU32,char const *,char const *,float,ImVec4 const *)\n"
    "    ImDrawList::AddText(ImFont const *,float,ImVec2 const &,ImU32,char const *,char const *,float)\n"
    "    ImDrawList::AddText(ImFont const *,float,ImVec2 const &,ImU32,char const *,char const *)\n"
    "    ImDrawList::AddText(ImFont const *,float,ImVec2 const &,ImU32,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddPolyline(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  bool arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("ImDrawList::AddPolyline",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddPolyline",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddPolyline",2,"ImVec2 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddPolyline",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddPolyline",4,"ImU32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ImDrawList::AddPolyline",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddPolyline",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddPolyline",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddPolyline",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->AddPolyline((ImVec2 const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddConvexPolyFilled(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::AddConvexPolyFilled",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",2,"ImVec2 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddConvexPolyFilled",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddConvexPolyFilled",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->AddConvexPolyFilled((ImVec2 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddBezierCurve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  int arg8 ;
  
  SWIG_check_num_args("ImDrawList::AddBezierCurve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddBezierCurve",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddBezierCurve",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddBezierCurve",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddBezierCurve",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddBezierCurve",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddBezierCurve",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddBezierCurve",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddBezierCurve",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddBezierCurve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("ImDrawList::AddBezierCurve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddBezierCurve",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddBezierCurve",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddBezierCurve",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddBezierCurve",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddBezierCurve",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddBezierCurve",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddBezierCurve",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddBezierCurve",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddBezierCurve(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImDrawList_AddBezierCurve__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ImDrawList_AddBezierCurve__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddBezierCurve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddBezierCurve(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float,int)\n"
    "    ImDrawList::AddBezierCurve(ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddImage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  
  SWIG_check_num_args("ImDrawList::AddImage",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImage",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImage",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImage",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImage",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImage",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImage",6,"ImVec2 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddImage",7,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",6,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImage",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImage",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImage",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImage",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImage",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImage",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImage",6,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",6,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImage",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImage",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImage",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImage",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImage",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImage",5,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",5,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImage__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImage",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImage",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImage",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImage",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImage",4,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImage",4,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImage(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImDrawList_AddImage__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImDrawList_AddImage__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ImDrawList_AddImage__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImDrawList_AddImage__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddImage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddImage(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32)\n"
    "    ImDrawList::AddImage(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImage(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImage(ImTextureID,ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  ImU32 arg11 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::AddImageQuad",8,"ImVec2 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::AddImageQuad",9,"ImVec2 const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("ImDrawList::AddImageQuad",10,"ImVec2 const &");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ImDrawList::AddImageQuad",11,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",8,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",9,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",10,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (ImU32)lua_tonumber(L, 11);
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::AddImageQuad",8,"ImVec2 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::AddImageQuad",9,"ImVec2 const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("ImDrawList::AddImageQuad",10,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",8,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",9,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",10,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::AddImageQuad",8,"ImVec2 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::AddImageQuad",9,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",8,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",9,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::AddImageQuad",8,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",8,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  
  SWIG_check_num_args("ImDrawList::AddImageQuad",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageQuad");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageQuad(lua_State* L) {
  int argc;
  int argv[12]={
    1,2,3,4,5,6,7,8,9,10,11,12
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ImDrawList_AddImageQuad__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ImDrawList_AddImageQuad__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ImDrawList_AddImageQuad__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_ImDrawList_AddImageQuad__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        return _wrap_ImDrawList_AddImageQuad__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_ImDrawList_AddImageQuad__SWIG_0(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddImageQuad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32)\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImDrawList::AddImageQuad(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddImageRounded__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;
  ImDrawCornerFlags arg9 ;
  
  SWIG_check_num_args("ImDrawList::AddImageRounded",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageRounded",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageRounded",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageRounded",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageRounded",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageRounded",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageRounded",6,"ImVec2 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddImageRounded",7,"ImU32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddImageRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImDrawList::AddImageRounded",9,"ImDrawCornerFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageRounded");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",6,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (ImDrawCornerFlags)lua_tonumber(L, 9);
  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageRounded__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;
  
  SWIG_check_num_args("ImDrawList::AddImageRounded",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageRounded",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddImageRounded",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageRounded",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageRounded",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageRounded",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageRounded",6,"ImVec2 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddImageRounded",7,"ImU32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddImageRounded",8,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawList_AddImageRounded");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_AddImageRounded",6,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddImageRounded(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ImDrawList_AddImageRounded__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_ImDrawList_AddImageRounded__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddImageRounded'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::AddImageRounded(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float,ImDrawCornerFlags)\n"
    "    ImDrawList::AddImageRounded(ImTextureID,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImVec2 const &,ImU32,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_PathClear(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::PathClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathClear",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathClear",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->PathClear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathLineTo(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImDrawList::PathLineTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathLineTo",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathLineTo",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathLineTo",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathLineTo",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->PathLineTo((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathLineToMergeDuplicate(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImDrawList::PathLineToMergeDuplicate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathLineToMergeDuplicate",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathLineToMergeDuplicate",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathLineToMergeDuplicate",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathLineToMergeDuplicate",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->PathLineToMergeDuplicate((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathFillConvex(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImDrawList::PathFillConvex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathFillConvex",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathFillConvex",2,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathFillConvex",1,SWIGTYPE_p_ImDrawList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  (arg1)->PathFillConvex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathStroke__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("ImDrawList::PathStroke",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathStroke",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathStroke",2,"ImU32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImDrawList::PathStroke",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathStroke",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathStroke",1,SWIGTYPE_p_ImDrawList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->PathStroke(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathStroke__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImDrawList::PathStroke",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathStroke",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathStroke",2,"ImU32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImDrawList::PathStroke",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathStroke",1,SWIGTYPE_p_ImDrawList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->PathStroke(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathStroke(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImDrawList_PathStroke__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_PathStroke__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_PathStroke'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::PathStroke(ImU32,bool,float)\n"
    "    ImDrawList::PathStroke(ImU32,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_PathArcTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("ImDrawList::PathArcTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathArcTo",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathArcTo",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathArcTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathArcTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathArcTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::PathArcTo",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathArcTo",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathArcTo",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathArcTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImDrawList::PathArcTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathArcTo",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathArcTo",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathArcTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathArcTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathArcTo",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathArcTo",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathArcTo",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathArcTo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_PathArcTo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImDrawList_PathArcTo__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_PathArcTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::PathArcTo(ImVec2 const &,float,float,float,int)\n"
    "    ImDrawList::PathArcTo(ImVec2 const &,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_PathArcToFast(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::PathArcToFast",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathArcToFast",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathArcToFast",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathArcToFast",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathArcToFast",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathArcToFast",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathArcToFast",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathArcToFast",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->PathArcToFast((ImVec2 const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathBezierCurveTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  
  SWIG_check_num_args("ImDrawList::PathBezierCurveTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathBezierCurveTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  SWIG_check_num_args("ImDrawList::PathBezierCurveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PathBezierCurveTo",4,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathBezierCurveTo",4,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathBezierCurveTo(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImDrawList_PathBezierCurveTo__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_PathBezierCurveTo__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_PathBezierCurveTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::PathBezierCurveTo(ImVec2 const &,ImVec2 const &,ImVec2 const &,int)\n"
    "    ImDrawList::PathBezierCurveTo(ImVec2 const &,ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_PathRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  ImDrawCornerFlags arg5 ;
  
  SWIG_check_num_args("ImDrawList::PathRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathRect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathRect",5,"ImDrawCornerFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (ImDrawCornerFlags)lua_tonumber(L, 5);
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("ImDrawList::PathRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathRect",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ImDrawList::PathRect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathRect",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PathRect",3,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PathRect(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImDrawList_PathRect__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImDrawList_PathRect__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImDrawList_PathRect__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_PathRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImDrawList::PathRect(ImVec2 const &,ImVec2 const &,float,ImDrawCornerFlags)\n"
    "    ImDrawList::PathRect(ImVec2 const &,ImVec2 const &,float)\n"
    "    ImDrawList::PathRect(ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImDrawList_AddCallback(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddCallback",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCallback",1,"ImDrawList *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddCallback",2,"ImDrawCallback");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImDrawList::AddCallback",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddCallback",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0))){
    SWIG_fail_ptr("ImDrawList_AddCallback",2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImDrawList_AddCallback");
  (arg1)->AddCallback(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_AddDrawCmd(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::AddDrawCmd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddDrawCmd",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_AddDrawCmd",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->AddDrawCmd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_CloneOutput(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImDrawList::CloneOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CloneOutput",1,"ImDrawList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_CloneOutput",1,SWIGTYPE_p_ImDrawList);
  }
  
  result = (ImDrawList *)((ImDrawList const *)arg1)->CloneOutput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_ChannelsSplit(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawList::ChannelsSplit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsSplit",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::ChannelsSplit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_ChannelsSplit",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->ChannelsSplit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_ChannelsMerge(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::ChannelsMerge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsMerge",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_ChannelsMerge",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->ChannelsMerge();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_ChannelsSetCurrent(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawList::ChannelsSetCurrent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsSetCurrent",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::ChannelsSetCurrent",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_ChannelsSetCurrent",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->ChannelsSetCurrent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimReserve(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ImDrawList::PrimReserve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimReserve",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PrimReserve",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PrimReserve",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimReserve",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->PrimReserve(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimUnreserve(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ImDrawList::PrimUnreserve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimUnreserve",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PrimUnreserve",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PrimUnreserve",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimUnreserve",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->PrimUnreserve(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimRect(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::PrimRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimRect",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimRect",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimRect",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimRect",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRect",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRect",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->PrimRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimRectUV(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  SWIG_check_num_args("ImDrawList::PrimRectUV",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimRectUV",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimRectUV",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimRectUV",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PrimRectUV",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::PrimRectUV",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::PrimRectUV",6,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimRectUV",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRectUV",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRectUV",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRectUV",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimRectUV",5,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  (arg1)->PrimRectUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimQuadUV(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImU32 arg10 ;
  
  SWIG_check_num_args("ImDrawList::PrimQuadUV",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimQuadUV",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimQuadUV",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimQuadUV",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PrimQuadUV",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::PrimQuadUV",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::PrimQuadUV",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::PrimQuadUV",7,"ImVec2 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::PrimQuadUV",8,"ImVec2 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::PrimQuadUV",9,"ImVec2 const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ImDrawList::PrimQuadUV",10,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",8,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimQuadUV",9,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (ImU32)lua_tonumber(L, 10);
  (arg1)->PrimQuadUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimWriteVtx(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::PrimWriteVtx",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimWriteVtx",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimWriteVtx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimWriteVtx",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->PrimWriteVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimWriteIdx(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx arg2 ;
  
  SWIG_check_num_args("ImDrawList::PrimWriteIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimWriteIdx",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PrimWriteIdx",2,"ImDrawIdx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimWriteIdx",1,SWIGTYPE_p_ImDrawList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImDrawIdx)lua_tonumber(L, 2);
  (arg1)->PrimWriteIdx(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList_PrimVtx(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImDrawList::PrimVtx",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimVtx",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimVtx",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimVtx",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimVtx",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList_PrimVtx",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimVtx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawList_PrimVtx",3,SWIGTYPE_p_ImVec2);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  (arg1)->PrimVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__ResetForNewFrame(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_ResetForNewFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ResetForNewFrame",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__ResetForNewFrame",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_ResetForNewFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__ClearFreeMemory(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_ClearFreeMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClearFreeMemory",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__ClearFreeMemory",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_ClearFreeMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__PopUnusedDrawCmd(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_PopUnusedDrawCmd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_PopUnusedDrawCmd",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__PopUnusedDrawCmd",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_PopUnusedDrawCmd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__OnChangedClipRect(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_OnChangedClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedClipRect",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__OnChangedClipRect",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_OnChangedClipRect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__OnChangedTextureID(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_OnChangedTextureID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedTextureID",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__OnChangedTextureID",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_OnChangedTextureID();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawList__OnChangedVtxOffset(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImDrawList::_OnChangedVtxOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedVtxOffset",1,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawList__OnChangedVtxOffset",1,SWIGTYPE_p_ImDrawList);
  }
  
  (arg1)->_OnChangedVtxOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawList(void *obj) {
ImDrawList *arg1 = (ImDrawList *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawList_attributes[] = {
    { "CmdBuffer", _wrap_ImDrawList_CmdBuffer_get, _wrap_ImDrawList_CmdBuffer_set },
    { "IdxBuffer", _wrap_ImDrawList_IdxBuffer_get, _wrap_ImDrawList_IdxBuffer_set },
    { "VtxBuffer", _wrap_ImDrawList_VtxBuffer_get, _wrap_ImDrawList_VtxBuffer_set },
    { "Flags", _wrap_ImDrawList_Flags_get, _wrap_ImDrawList_Flags_set },
    { "_Data", _wrap_ImDrawList__Data_get, _wrap_ImDrawList__Data_set },
    { "_OwnerName", _wrap_ImDrawList__OwnerName_get, _wrap_ImDrawList__OwnerName_set },
    { "_VtxCurrentIdx", _wrap_ImDrawList__VtxCurrentIdx_get, _wrap_ImDrawList__VtxCurrentIdx_set },
    { "_VtxWritePtr", _wrap_ImDrawList__VtxWritePtr_get, _wrap_ImDrawList__VtxWritePtr_set },
    { "_IdxWritePtr", _wrap_ImDrawList__IdxWritePtr_get, _wrap_ImDrawList__IdxWritePtr_set },
    { "_ClipRectStack", _wrap_ImDrawList__ClipRectStack_get, _wrap_ImDrawList__ClipRectStack_set },
    { "_TextureIdStack", _wrap_ImDrawList__TextureIdStack_get, _wrap_ImDrawList__TextureIdStack_set },
    { "_Path", _wrap_ImDrawList__Path_get, _wrap_ImDrawList__Path_set },
    { "_CmdHeader", _wrap_ImDrawList__CmdHeader_get, _wrap_ImDrawList__CmdHeader_set },
    { "_Splitter", _wrap_ImDrawList__Splitter_get, _wrap_ImDrawList__Splitter_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawList_methods[]= {
    { "PushClipRect", _wrap_ImDrawList_PushClipRect},
    { "PushClipRectFullScreen", _wrap_ImDrawList_PushClipRectFullScreen},
    { "PopClipRect", _wrap_ImDrawList_PopClipRect},
    { "PushTextureID", _wrap_ImDrawList_PushTextureID},
    { "PopTextureID", _wrap_ImDrawList_PopTextureID},
    { "GetClipRectMin", _wrap_ImDrawList_GetClipRectMin},
    { "GetClipRectMax", _wrap_ImDrawList_GetClipRectMax},
    { "AddLine", _wrap_ImDrawList_AddLine},
    { "AddRect", _wrap_ImDrawList_AddRect},
    { "AddRectFilled", _wrap_ImDrawList_AddRectFilled},
    { "AddRectFilledMultiColor", _wrap_ImDrawList_AddRectFilledMultiColor},
    { "AddQuad", _wrap_ImDrawList_AddQuad},
    { "AddQuadFilled", _wrap_ImDrawList_AddQuadFilled},
    { "AddTriangle", _wrap_ImDrawList_AddTriangle},
    { "AddTriangleFilled", _wrap_ImDrawList_AddTriangleFilled},
    { "AddCircle", _wrap_ImDrawList_AddCircle},
    { "AddCircleFilled", _wrap_ImDrawList_AddCircleFilled},
    { "AddNgon", _wrap_ImDrawList_AddNgon},
    { "AddNgonFilled", _wrap_ImDrawList_AddNgonFilled},
    { "AddText", _wrap_ImDrawList_AddText},
    { "AddPolyline", _wrap_ImDrawList_AddPolyline},
    { "AddConvexPolyFilled", _wrap_ImDrawList_AddConvexPolyFilled},
    { "AddBezierCurve", _wrap_ImDrawList_AddBezierCurve},
    { "AddImage", _wrap_ImDrawList_AddImage},
    { "AddImageQuad", _wrap_ImDrawList_AddImageQuad},
    { "AddImageRounded", _wrap_ImDrawList_AddImageRounded},
    { "PathClear", _wrap_ImDrawList_PathClear},
    { "PathLineTo", _wrap_ImDrawList_PathLineTo},
    { "PathLineToMergeDuplicate", _wrap_ImDrawList_PathLineToMergeDuplicate},
    { "PathFillConvex", _wrap_ImDrawList_PathFillConvex},
    { "PathStroke", _wrap_ImDrawList_PathStroke},
    { "PathArcTo", _wrap_ImDrawList_PathArcTo},
    { "PathArcToFast", _wrap_ImDrawList_PathArcToFast},
    { "PathBezierCurveTo", _wrap_ImDrawList_PathBezierCurveTo},
    { "PathRect", _wrap_ImDrawList_PathRect},
    { "AddCallback", _wrap_ImDrawList_AddCallback},
    { "AddDrawCmd", _wrap_ImDrawList_AddDrawCmd},
    { "CloneOutput", _wrap_ImDrawList_CloneOutput},
    { "ChannelsSplit", _wrap_ImDrawList_ChannelsSplit},
    { "ChannelsMerge", _wrap_ImDrawList_ChannelsMerge},
    { "ChannelsSetCurrent", _wrap_ImDrawList_ChannelsSetCurrent},
    { "PrimReserve", _wrap_ImDrawList_PrimReserve},
    { "PrimUnreserve", _wrap_ImDrawList_PrimUnreserve},
    { "PrimRect", _wrap_ImDrawList_PrimRect},
    { "PrimRectUV", _wrap_ImDrawList_PrimRectUV},
    { "PrimQuadUV", _wrap_ImDrawList_PrimQuadUV},
    { "PrimWriteVtx", _wrap_ImDrawList_PrimWriteVtx},
    { "PrimWriteIdx", _wrap_ImDrawList_PrimWriteIdx},
    { "PrimVtx", _wrap_ImDrawList_PrimVtx},
    { "_ResetForNewFrame", _wrap_ImDrawList__ResetForNewFrame},
    { "_ClearFreeMemory", _wrap_ImDrawList__ClearFreeMemory},
    { "_PopUnusedDrawCmd", _wrap_ImDrawList__PopUnusedDrawCmd},
    { "_OnChangedClipRect", _wrap_ImDrawList__OnChangedClipRect},
    { "_OnChangedTextureID", _wrap_ImDrawList__OnChangedTextureID},
    { "_OnChangedVtxOffset", _wrap_ImDrawList__OnChangedVtxOffset},
    {0,0}
};
static swig_lua_method swig_ImDrawList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawList_Sf_SwigStatic = {
    "ImDrawList",
    swig_ImDrawList_Sf_SwigStatic_methods,
    swig_ImDrawList_Sf_SwigStatic_attributes,
    swig_ImDrawList_Sf_SwigStatic_constants,
    swig_ImDrawList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawList_bases[] = {0};
static const char *swig_ImDrawList_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawList = { "ImDrawList", "ImDrawList", &SWIGTYPE_p_ImDrawList,_proxy__wrap_new_ImDrawList, swig_delete_ImDrawList, swig_ImDrawList_methods, swig_ImDrawList_attributes, &swig_ImDrawList_Sf_SwigStatic, swig_ImDrawList_meta, swig_ImDrawList_bases, swig_ImDrawList_base_names };

static int _wrap_ImDrawData_Valid_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImDrawData::Valid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Valid",1,"ImDrawData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImDrawData::Valid",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_Valid_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Valid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_Valid_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImDrawData::Valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Valid",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_Valid_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (bool) ((arg1)->Valid);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_CmdLists_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **arg2 = (ImDrawList **) 0 ;
  
  SWIG_check_num_args("ImDrawData::CmdLists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdLists",1,"ImDrawData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::CmdLists",2,"ImDrawList **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_CmdLists_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_ImDrawList,0))){
    SWIG_fail_ptr("ImDrawData_CmdLists_set",2,SWIGTYPE_p_p_ImDrawList);
  }
  
  if (arg1) (arg1)->CmdLists = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_CmdLists_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **result = 0 ;
  
  SWIG_check_num_args("ImDrawData::CmdLists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdLists",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_CmdLists_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (ImDrawList **) ((arg1)->CmdLists);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_CmdListsCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawData::CmdListsCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdListsCount",1,"ImDrawData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::CmdListsCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_CmdListsCount_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CmdListsCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_CmdListsCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImDrawData::CmdListsCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdListsCount",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_CmdListsCount_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (int) ((arg1)->CmdListsCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_TotalIdxCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawData::TotalIdxCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalIdxCount",1,"ImDrawData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::TotalIdxCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_TotalIdxCount_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TotalIdxCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_TotalIdxCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImDrawData::TotalIdxCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalIdxCount",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_TotalIdxCount_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (int) ((arg1)->TotalIdxCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_TotalVtxCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImDrawData::TotalVtxCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalVtxCount",1,"ImDrawData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::TotalVtxCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_TotalVtxCount_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TotalVtxCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_TotalVtxCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImDrawData::TotalVtxCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalVtxCount",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_TotalVtxCount_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (int) ((arg1)->TotalVtxCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_DisplayPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawData::DisplayPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplayPos",1,"ImDrawData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::DisplayPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_DisplayPos_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawData_DisplayPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplayPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_DisplayPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawData::DisplayPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplayPos",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_DisplayPos_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplayPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_DisplaySize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawData::DisplaySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplaySize",1,"ImDrawData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::DisplaySize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_DisplaySize_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawData_DisplaySize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->DisplaySize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_DisplaySize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawData::DisplaySize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplaySize",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_DisplaySize_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_FramebufferScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawData::FramebufferScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::FramebufferScale",1,"ImDrawData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::FramebufferScale",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_FramebufferScale_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawData_FramebufferScale_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->FramebufferScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_FramebufferScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawData::FramebufferScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::FramebufferScale",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_FramebufferScale_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (ImVec2 *)& ((arg1)->FramebufferScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_OwnerViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImGuiViewport *arg2 = (ImGuiViewport *) 0 ;
  
  SWIG_check_num_args("ImDrawData::OwnerViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::OwnerViewport",1,"ImDrawData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::OwnerViewport",2,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_OwnerViewport_set",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewport,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawData_OwnerViewport_set",2,SWIGTYPE_p_ImGuiViewport);
  }
  
  if (arg1) (arg1)->OwnerViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_OwnerViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImDrawData::OwnerViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::OwnerViewport",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_OwnerViewport_get",1,SWIGTYPE_p_ImDrawData);
  }
  
  result = (ImGuiViewport *) ((arg1)->OwnerViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawData(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *result = 0 ;
  
  SWIG_check_num_args("ImDrawData::ImDrawData",0,0)
  result = (ImDrawData *)new ImDrawData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  SWIG_check_num_args("ImDrawData::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Clear",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_Clear",1,SWIGTYPE_p_ImDrawData);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_DeIndexAllBuffers(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  SWIG_check_num_args("ImDrawData::DeIndexAllBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DeIndexAllBuffers",1,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_DeIndexAllBuffers",1,SWIGTYPE_p_ImDrawData);
  }
  
  (arg1)->DeIndexAllBuffers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawData_ScaleClipRects(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImDrawData::ScaleClipRects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::ScaleClipRects",1,"ImDrawData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawData::ScaleClipRects",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImDrawData_ScaleClipRects",1,SWIGTYPE_p_ImDrawData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawData_ScaleClipRects",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->ScaleClipRects((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawData(void *obj) {
ImDrawData *arg1 = (ImDrawData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawData_attributes[] = {
    { "Valid", _wrap_ImDrawData_Valid_get, _wrap_ImDrawData_Valid_set },
    { "CmdLists", _wrap_ImDrawData_CmdLists_get, _wrap_ImDrawData_CmdLists_set },
    { "CmdListsCount", _wrap_ImDrawData_CmdListsCount_get, _wrap_ImDrawData_CmdListsCount_set },
    { "TotalIdxCount", _wrap_ImDrawData_TotalIdxCount_get, _wrap_ImDrawData_TotalIdxCount_set },
    { "TotalVtxCount", _wrap_ImDrawData_TotalVtxCount_get, _wrap_ImDrawData_TotalVtxCount_set },
    { "DisplayPos", _wrap_ImDrawData_DisplayPos_get, _wrap_ImDrawData_DisplayPos_set },
    { "DisplaySize", _wrap_ImDrawData_DisplaySize_get, _wrap_ImDrawData_DisplaySize_set },
    { "FramebufferScale", _wrap_ImDrawData_FramebufferScale_get, _wrap_ImDrawData_FramebufferScale_set },
    { "OwnerViewport", _wrap_ImDrawData_OwnerViewport_get, _wrap_ImDrawData_OwnerViewport_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawData_methods[]= {
    { "Clear", _wrap_ImDrawData_Clear},
    { "DeIndexAllBuffers", _wrap_ImDrawData_DeIndexAllBuffers},
    { "ScaleClipRects", _wrap_ImDrawData_ScaleClipRects},
    {0,0}
};
static swig_lua_method swig_ImDrawData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawData_Sf_SwigStatic = {
    "ImDrawData",
    swig_ImDrawData_Sf_SwigStatic_methods,
    swig_ImDrawData_Sf_SwigStatic_attributes,
    swig_ImDrawData_Sf_SwigStatic_constants,
    swig_ImDrawData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawData_bases[] = {0};
static const char *swig_ImDrawData_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawData = { "ImDrawData", "ImDrawData", &SWIGTYPE_p_ImDrawData,_proxy__wrap_new_ImDrawData, swig_delete_ImDrawData, swig_ImDrawData_methods, swig_ImDrawData_attributes, &swig_ImDrawData_Sf_SwigStatic, swig_ImDrawData_meta, swig_ImDrawData_bases, swig_ImDrawData_base_names };

static int _wrap_ImFontConfig_FontData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImFontConfig::FontData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontData",1,"ImFontConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::FontData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontData_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontConfig_FontData_set");
  if (arg1) (arg1)->FontData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::FontData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontData",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontData_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (void *) ((arg1)->FontData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontDataSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontConfig::FontDataSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataSize",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::FontDataSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontDataSize_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontDataSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontDataSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontConfig::FontDataSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataSize",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontDataSize_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (int) ((arg1)->FontDataSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontDataOwnedByAtlas_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImFontConfig::FontDataOwnedByAtlas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",1,"ImFontConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontDataOwnedByAtlas_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->FontDataOwnedByAtlas = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontDataOwnedByAtlas_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontConfig::FontDataOwnedByAtlas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontDataOwnedByAtlas_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (bool) ((arg1)->FontDataOwnedByAtlas);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontNo_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontConfig::FontNo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontNo",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::FontNo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontNo_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontNo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_FontNo_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontConfig::FontNo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontNo",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_FontNo_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (int) ((arg1)->FontNo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_SizePixels_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontConfig::SizePixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::SizePixels",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::SizePixels",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_SizePixels_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->SizePixels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_SizePixels_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontConfig::SizePixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::SizePixels",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_SizePixels_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (float) ((arg1)->SizePixels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_OversampleH_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontConfig::OversampleH",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleH",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::OversampleH",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_OversampleH_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->OversampleH = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_OversampleH_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontConfig::OversampleH",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleH",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_OversampleH_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (int) ((arg1)->OversampleH);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_OversampleV_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontConfig::OversampleV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleV",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::OversampleV",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_OversampleV_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->OversampleV = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_OversampleV_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontConfig::OversampleV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleV",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_OversampleV_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (int) ((arg1)->OversampleV);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_PixelSnapH_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImFontConfig::PixelSnapH",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::PixelSnapH",1,"ImFontConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::PixelSnapH",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_PixelSnapH_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PixelSnapH = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_PixelSnapH_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontConfig::PixelSnapH",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::PixelSnapH",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_PixelSnapH_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (bool) ((arg1)->PixelSnapH);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphExtraSpacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphExtraSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",1,"ImFontConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphExtraSpacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphExtraSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphOffset",1,"ImFontConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphOffset",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphOffset_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphOffset_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->GlyphOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphOffset",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphOffset_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphRanges_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphRanges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphRanges",1,"ImFontConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphRanges",2,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphRanges_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFontConfig_GlyphRanges_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphRanges_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphRanges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphRanges",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphRanges_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImWchar *) ((arg1)->GlyphRanges);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphMinAdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphMinAdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphMinAdvanceX_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->GlyphMinAdvanceX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphMinAdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontConfig::GlyphMinAdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphMinAdvanceX_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (float) ((arg1)->GlyphMinAdvanceX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphMaxAdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontConfig::GlyphMaxAdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphMaxAdvanceX_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->GlyphMaxAdvanceX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_GlyphMaxAdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontConfig::GlyphMaxAdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_GlyphMaxAdvanceX_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (float) ((arg1)->GlyphMaxAdvanceX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_MergeMode_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImFontConfig::MergeMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::MergeMode",1,"ImFontConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::MergeMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_MergeMode_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->MergeMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_MergeMode_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontConfig::MergeMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::MergeMode",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_MergeMode_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (bool) ((arg1)->MergeMode);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_RasterizerFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImFontConfig::RasterizerFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerFlags",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::RasterizerFlags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_RasterizerFlags_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->RasterizerFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_RasterizerFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImFontConfig::RasterizerFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerFlags",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_RasterizerFlags_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (unsigned int) ((arg1)->RasterizerFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_RasterizerMultiply_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontConfig::RasterizerMultiply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_RasterizerMultiply_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->RasterizerMultiply = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_RasterizerMultiply_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontConfig::RasterizerMultiply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_RasterizerMultiply_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (float) ((arg1)->RasterizerMultiply);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_EllipsisChar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImFontConfig::EllipsisChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::EllipsisChar",1,"ImFontConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::EllipsisChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_EllipsisChar_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  if (arg1) (arg1)->EllipsisChar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_EllipsisChar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar result;
  
  SWIG_check_num_args("ImFontConfig::EllipsisChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::EllipsisChar",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_EllipsisChar_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImWchar) ((arg1)->EllipsisChar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_Name_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("ImFontConfig::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::Name",1,"ImFontConfig *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontConfig::Name",2,"char [40]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_Name_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 40-1);
      arg1->Name[40-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_Name_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::Name",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_Name_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (char *)(char *) ((arg1)->Name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_DstFont_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImFontConfig::DstFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::DstFont",1,"ImFontConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::DstFont",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_DstFont_set",1,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFontConfig_DstFont_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->DstFont = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontConfig_DstFont_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::DstFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::DstFont",1,"ImFontConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontConfig_DstFont_get",1,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *) ((arg1)->DstFont);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImFontConfig(lua_State* L) {
  int SWIG_arg = 0;
  ImFontConfig *result = 0 ;
  
  SWIG_check_num_args("ImFontConfig::ImFontConfig",0,0)
  result = (ImFontConfig *)new ImFontConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFontConfig(void *obj) {
ImFontConfig *arg1 = (ImFontConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontConfig_attributes[] = {
    { "FontData", _wrap_ImFontConfig_FontData_get, _wrap_ImFontConfig_FontData_set },
    { "FontDataSize", _wrap_ImFontConfig_FontDataSize_get, _wrap_ImFontConfig_FontDataSize_set },
    { "FontDataOwnedByAtlas", _wrap_ImFontConfig_FontDataOwnedByAtlas_get, _wrap_ImFontConfig_FontDataOwnedByAtlas_set },
    { "FontNo", _wrap_ImFontConfig_FontNo_get, _wrap_ImFontConfig_FontNo_set },
    { "SizePixels", _wrap_ImFontConfig_SizePixels_get, _wrap_ImFontConfig_SizePixels_set },
    { "OversampleH", _wrap_ImFontConfig_OversampleH_get, _wrap_ImFontConfig_OversampleH_set },
    { "OversampleV", _wrap_ImFontConfig_OversampleV_get, _wrap_ImFontConfig_OversampleV_set },
    { "PixelSnapH", _wrap_ImFontConfig_PixelSnapH_get, _wrap_ImFontConfig_PixelSnapH_set },
    { "GlyphExtraSpacing", _wrap_ImFontConfig_GlyphExtraSpacing_get, _wrap_ImFontConfig_GlyphExtraSpacing_set },
    { "GlyphOffset", _wrap_ImFontConfig_GlyphOffset_get, _wrap_ImFontConfig_GlyphOffset_set },
    { "GlyphRanges", _wrap_ImFontConfig_GlyphRanges_get, _wrap_ImFontConfig_GlyphRanges_set },
    { "GlyphMinAdvanceX", _wrap_ImFontConfig_GlyphMinAdvanceX_get, _wrap_ImFontConfig_GlyphMinAdvanceX_set },
    { "GlyphMaxAdvanceX", _wrap_ImFontConfig_GlyphMaxAdvanceX_get, _wrap_ImFontConfig_GlyphMaxAdvanceX_set },
    { "MergeMode", _wrap_ImFontConfig_MergeMode_get, _wrap_ImFontConfig_MergeMode_set },
    { "RasterizerFlags", _wrap_ImFontConfig_RasterizerFlags_get, _wrap_ImFontConfig_RasterizerFlags_set },
    { "RasterizerMultiply", _wrap_ImFontConfig_RasterizerMultiply_get, _wrap_ImFontConfig_RasterizerMultiply_set },
    { "EllipsisChar", _wrap_ImFontConfig_EllipsisChar_get, _wrap_ImFontConfig_EllipsisChar_set },
    { "Name", _wrap_ImFontConfig_Name_get, _wrap_ImFontConfig_Name_set },
    { "DstFont", _wrap_ImFontConfig_DstFont_get, _wrap_ImFontConfig_DstFont_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImFontConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontConfig_Sf_SwigStatic = {
    "ImFontConfig",
    swig_ImFontConfig_Sf_SwigStatic_methods,
    swig_ImFontConfig_Sf_SwigStatic_attributes,
    swig_ImFontConfig_Sf_SwigStatic_constants,
    swig_ImFontConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontConfig_bases[] = {0};
static const char *swig_ImFontConfig_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontConfig = { "ImFontConfig", "ImFontConfig", &SWIGTYPE_p_ImFontConfig,_proxy__wrap_new_ImFontConfig, swig_delete_ImFontConfig, swig_ImFontConfig_methods, swig_ImFontConfig_attributes, &swig_ImFontConfig_Sf_SwigStatic, swig_ImFontConfig_meta, swig_ImFontConfig_bases, swig_ImFontConfig_base_names };

static int _wrap_ImFontGlyph_Codepoint_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::Codepoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Codepoint",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Codepoint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Codepoint_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Codepoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Codepoint_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImFontGlyph::Codepoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Codepoint",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Codepoint_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (unsigned int) ((arg1)->Codepoint);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Visible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::Visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Visible",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Visible",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Visible_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Visible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Visible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImFontGlyph::Visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Visible",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Visible_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (unsigned int) ((arg1)->Visible);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_AdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::AdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::AdvanceX",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::AdvanceX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_AdvanceX_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->AdvanceX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_AdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::AdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::AdvanceX",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_AdvanceX_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->AdvanceX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_X0_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::X0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X0",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::X0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_X0_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->X0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_X0_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::X0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X0",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_X0_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->X0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Y0_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::Y0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y0",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Y0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Y0_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Y0_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::Y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y0",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Y0_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->Y0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_X1_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::X1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X1",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::X1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_X1_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->X1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_X1_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::X1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X1",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_X1_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->X1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Y1_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::Y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y1",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Y1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Y1_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_Y1_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::Y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y1",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_Y1_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->Y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_U0_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::U0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U0",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::U0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_U0_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->U0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_U0_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::U0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U0",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_U0_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->U0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_V0_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::V0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V0",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::V0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_V0_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->V0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_V0_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::V0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V0",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_V0_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->V0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_U1_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::U1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U1",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::U1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_U1_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->U1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_U1_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::U1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U1",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_U1_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->U1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_V1_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontGlyph::V1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V1",1,"ImFontGlyph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::V1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_V1_set",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->V1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyph_V1_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontGlyph::V1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V1",1,"ImFontGlyph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
    SWIG_fail_ptr("ImFontGlyph_V1_get",1,SWIGTYPE_p_ImFontGlyph);
  }
  
  result = (float) ((arg1)->V1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImFontGlyph(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyph *result = 0 ;
  
  SWIG_check_num_args("ImFontGlyph::ImFontGlyph",0,0)
  result = (ImFontGlyph *)new ImFontGlyph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFontGlyph(void *obj) {
ImFontGlyph *arg1 = (ImFontGlyph *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontGlyph(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontGlyph);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontGlyph_attributes[] = {
    { "Codepoint", _wrap_ImFontGlyph_Codepoint_get, _wrap_ImFontGlyph_Codepoint_set },
    { "Visible", _wrap_ImFontGlyph_Visible_get, _wrap_ImFontGlyph_Visible_set },
    { "AdvanceX", _wrap_ImFontGlyph_AdvanceX_get, _wrap_ImFontGlyph_AdvanceX_set },
    { "X0", _wrap_ImFontGlyph_X0_get, _wrap_ImFontGlyph_X0_set },
    { "Y0", _wrap_ImFontGlyph_Y0_get, _wrap_ImFontGlyph_Y0_set },
    { "X1", _wrap_ImFontGlyph_X1_get, _wrap_ImFontGlyph_X1_set },
    { "Y1", _wrap_ImFontGlyph_Y1_get, _wrap_ImFontGlyph_Y1_set },
    { "U0", _wrap_ImFontGlyph_U0_get, _wrap_ImFontGlyph_U0_set },
    { "V0", _wrap_ImFontGlyph_V0_get, _wrap_ImFontGlyph_V0_set },
    { "U1", _wrap_ImFontGlyph_U1_get, _wrap_ImFontGlyph_U1_set },
    { "V1", _wrap_ImFontGlyph_V1_get, _wrap_ImFontGlyph_V1_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontGlyph_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImFontGlyph_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontGlyph_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontGlyph_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontGlyph_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontGlyph_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontGlyph_Sf_SwigStatic = {
    "ImFontGlyph",
    swig_ImFontGlyph_Sf_SwigStatic_methods,
    swig_ImFontGlyph_Sf_SwigStatic_attributes,
    swig_ImFontGlyph_Sf_SwigStatic_constants,
    swig_ImFontGlyph_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontGlyph_bases[] = {0};
static const char *swig_ImFontGlyph_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontGlyph = { "ImFontGlyph", "ImFontGlyph", &SWIGTYPE_p_ImFontGlyph,_proxy__wrap_new_ImFontGlyph, swig_delete_ImFontGlyph, swig_ImFontGlyph_methods, swig_ImFontGlyph_attributes, &swig_ImFontGlyph_Sf_SwigStatic, swig_ImFontGlyph_meta, swig_ImFontGlyph_bases, swig_ImFontGlyph_base_names };

static int _wrap_ImFontGlyphRangesBuilder_UsedChars_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImU32 > *arg2 = (ImVector< ImU32 > *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::UsedChars",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",1,"ImFontGlyphRangesBuilder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",2,"ImVector< ImU32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_set",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_set",2,SWIGTYPE_p_ImVectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->UsedChars = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_UsedChars_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImU32 > *result = 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::UsedChars",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",1,"ImFontGlyphRangesBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_get",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  result = (ImVector< ImU32 > *)& ((arg1)->UsedChars);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImFontGlyphRangesBuilder(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *result = 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::ImFontGlyphRangesBuilder",0,0)
  result = (ImFontGlyphRangesBuilder *)new ImFontGlyphRangesBuilder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyphRangesBuilder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::Clear",1,"ImFontGlyphRangesBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_Clear",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_GetBit(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::GetBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::GetBit",1,"ImFontGlyphRangesBuilder const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::GetBit",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_GetBit",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)((ImFontGlyphRangesBuilder const *)arg1)->GetBit(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_SetBit(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::SetBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::SetBit",1,"ImFontGlyphRangesBuilder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::SetBit",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_SetBit",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetBit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_AddChar(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::AddChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddChar",1,"ImFontGlyphRangesBuilder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddChar",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  (arg1)->AddChar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_AddText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::AddText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",1,"ImFontGlyphRangesBuilder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddText",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->AddText((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_AddText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::AddText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",1,"ImFontGlyphRangesBuilder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddText",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->AddText((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_AddText(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontGlyphRangesBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImFontGlyphRangesBuilder_AddText__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontGlyphRangesBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImFontGlyphRangesBuilder_AddText__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontGlyphRangesBuilder_AddText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontGlyphRangesBuilder::AddText(char const *,char const *)\n"
    "    ImFontGlyphRangesBuilder::AddText(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontGlyphRangesBuilder_AddRanges(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::AddRanges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddRanges",1,"ImFontGlyphRangesBuilder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddRanges",2,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddRanges",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddRanges",2,SWIGTYPE_p_unsigned_short);
  }
  
  (arg1)->AddRanges((ImWchar const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontGlyphRangesBuilder_BuildRanges(lua_State* L) {
  int SWIG_arg = 0;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  SWIG_check_num_args("ImFontGlyphRangesBuilder::BuildRanges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::BuildRanges",1,"ImFontGlyphRangesBuilder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::BuildRanges",2,"ImVector< ImWchar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_BuildRanges",1,SWIGTYPE_p_ImFontGlyphRangesBuilder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImFontGlyphRangesBuilder_BuildRanges",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  (arg1)->BuildRanges(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFontGlyphRangesBuilder(void *obj) {
ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontGlyphRangesBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontGlyphRangesBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontGlyphRangesBuilder_attributes[] = {
    { "UsedChars", _wrap_ImFontGlyphRangesBuilder_UsedChars_get, _wrap_ImFontGlyphRangesBuilder_UsedChars_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_methods[]= {
    { "Clear", _wrap_ImFontGlyphRangesBuilder_Clear},
    { "GetBit", _wrap_ImFontGlyphRangesBuilder_GetBit},
    { "SetBit", _wrap_ImFontGlyphRangesBuilder_SetBit},
    { "AddChar", _wrap_ImFontGlyphRangesBuilder_AddChar},
    { "AddText", _wrap_ImFontGlyphRangesBuilder_AddText},
    { "AddRanges", _wrap_ImFontGlyphRangesBuilder_AddRanges},
    { "BuildRanges", _wrap_ImFontGlyphRangesBuilder_BuildRanges},
    {0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontGlyphRangesBuilder_Sf_SwigStatic = {
    "ImFontGlyphRangesBuilder",
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_methods,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_attributes,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_constants,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontGlyphRangesBuilder_bases[] = {0};
static const char *swig_ImFontGlyphRangesBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontGlyphRangesBuilder = { "ImFontGlyphRangesBuilder", "ImFontGlyphRangesBuilder", &SWIGTYPE_p_ImFontGlyphRangesBuilder,_proxy__wrap_new_ImFontGlyphRangesBuilder, swig_delete_ImFontGlyphRangesBuilder, swig_ImFontGlyphRangesBuilder_methods, swig_ImFontGlyphRangesBuilder_attributes, &swig_ImFontGlyphRangesBuilder_Sf_SwigStatic, swig_ImFontGlyphRangesBuilder_meta, swig_ImFontGlyphRangesBuilder_bases, swig_ImFontGlyphRangesBuilder_base_names };

static int _wrap_ImFontAtlasCustomRect_Width_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Width_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->Width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Width_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Width_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (unsigned short) ((arg1)->Width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Height_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Height_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->Height = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Height_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Height_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (unsigned short) ((arg1)->Height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_X_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::X",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::X",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_X_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_X_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::X",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_X_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (unsigned short) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Y_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Y_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (unsigned short) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphID_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->GlyphID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphID_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (unsigned int) ((arg1)->GlyphID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphAdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",1,"ImFontAtlasCustomRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphAdvanceX_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->GlyphAdvanceX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphAdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphAdvanceX_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (float) ((arg1)->GlyphAdvanceX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",1,"ImFontAtlasCustomRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->GlyphOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_GlyphOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::GlyphOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Font_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",1,"ImFontAtlasCustomRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Font_set",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Font_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->Font = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_Font_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::Font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",1,"ImFontAtlasCustomRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_Font_get",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (ImFont *) ((arg1)->Font);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImFontAtlasCustomRect(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::ImFontAtlasCustomRect",0,0)
  result = (ImFontAtlasCustomRect *)new ImFontAtlasCustomRect();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlasCustomRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasCustomRect_IsPacked(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlasCustomRect::IsPacked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::IsPacked",1,"ImFontAtlasCustomRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlasCustomRect_IsPacked",1,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  result = (bool)((ImFontAtlasCustomRect const *)arg1)->IsPacked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFontAtlasCustomRect(void *obj) {
ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontAtlasCustomRect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontAtlasCustomRect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontAtlasCustomRect_attributes[] = {
    { "Width", _wrap_ImFontAtlasCustomRect_Width_get, _wrap_ImFontAtlasCustomRect_Width_set },
    { "Height", _wrap_ImFontAtlasCustomRect_Height_get, _wrap_ImFontAtlasCustomRect_Height_set },
    { "X", _wrap_ImFontAtlasCustomRect_X_get, _wrap_ImFontAtlasCustomRect_X_set },
    { "Y", _wrap_ImFontAtlasCustomRect_Y_get, _wrap_ImFontAtlasCustomRect_Y_set },
    { "GlyphID", _wrap_ImFontAtlasCustomRect_GlyphID_get, _wrap_ImFontAtlasCustomRect_GlyphID_set },
    { "GlyphAdvanceX", _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_get, _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_set },
    { "GlyphOffset", _wrap_ImFontAtlasCustomRect_GlyphOffset_get, _wrap_ImFontAtlasCustomRect_GlyphOffset_set },
    { "Font", _wrap_ImFontAtlasCustomRect_Font_get, _wrap_ImFontAtlasCustomRect_Font_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_methods[]= {
    { "IsPacked", _wrap_ImFontAtlasCustomRect_IsPacked},
    {0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontAtlasCustomRect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontAtlasCustomRect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontAtlasCustomRect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontAtlasCustomRect_Sf_SwigStatic = {
    "ImFontAtlasCustomRect",
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_methods,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_attributes,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_constants,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontAtlasCustomRect_bases[] = {0};
static const char *swig_ImFontAtlasCustomRect_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontAtlasCustomRect = { "ImFontAtlasCustomRect", "ImFontAtlasCustomRect", &SWIGTYPE_p_ImFontAtlasCustomRect,_proxy__wrap_new_ImFontAtlasCustomRect, swig_delete_ImFontAtlasCustomRect, swig_ImFontAtlasCustomRect_methods, swig_ImFontAtlasCustomRect_attributes, &swig_ImFontAtlasCustomRect_Sf_SwigStatic, swig_ImFontAtlasCustomRect_meta, swig_ImFontAtlasCustomRect_bases, swig_ImFontAtlasCustomRect_base_names };

static int _wrap_new_ImFontAtlas(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ImFontAtlas",0,0)
  result = (ImFontAtlas *)new ImFontAtlas();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFont",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFont",2,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFont",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFont",2,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFont((ImFontConfig const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontDefault__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontDefault",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontDefault",2,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontDefault",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontDefault",2,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFontDefault((ImFontConfig const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontDefault__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontDefault",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontDefault",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImFont *)(arg1)->AddFontDefault();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontDefault(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImFontAtlas_AddFontDefault__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImFontAtlas_AddFontDefault__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddFontDefault'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddFontDefault(ImFontConfig const *)\n"
    "    ImFontAtlas::AddFontDefault()\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromFileTTF",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",4,"ImFontConfig const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",5,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",4,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",5,SWIGTYPE_p_unsigned_short);
  }
  
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromFileTTF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",4,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",4,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromFileTTF",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromFileTTF(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddFontFromFileTTF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddFontFromFileTTF(char const *,float,ImFontConfig const *,ImWchar const *)\n"
    "    ImFontAtlas::AddFontFromFileTTF(char const *,float,ImFontConfig const *)\n"
    "    ImFontAtlas::AddFontFromFileTTF(char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryTTF",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",5,"ImFontConfig const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",6,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",5,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",6,SWIGTYPE_p_unsigned_short);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryTTF",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",5,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",5,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryTTF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryTTF(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddFontFromMemoryTTF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddFontFromMemoryTTF(void *,int,float,ImFontConfig const *,ImWchar const *)\n"
    "    ImFontAtlas::AddFontFromMemoryTTF(void *,int,float,ImFontConfig const *)\n"
    "    ImFontAtlas::AddFontFromMemoryTTF(void *,int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedTTF",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",5,"ImFontConfig const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",6,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryCompressedTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",5,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",6,SWIGTYPE_p_unsigned_short);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedTTF",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",5,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryCompressedTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",5,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryCompressedTTF");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddFontFromMemoryCompressedTTF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedTTF(void const *,int,float,ImFontConfig const *,ImWchar const *)\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedTTF(void const *,int,float,ImFontConfig const *)\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedTTF(void const *,int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",4,"ImFontConfig const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",5,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",4,SWIGTYPE_p_ImFontConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",5,SWIGTYPE_p_unsigned_short);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",4,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",4,SWIGTYPE_p_ImFontConfig);
  }
  
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",1,"ImFontAtlas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddFontFromMemoryCompressedBase85TTF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(char const *,float,ImFontConfig const *,ImWchar const *)\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(char const *,float,ImFontConfig const *)\n"
    "    ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_ClearInputData(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ClearInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearInputData",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_ClearInputData",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  (arg1)->ClearInputData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_ClearTexData(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ClearTexData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearTexData",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_ClearTexData",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  (arg1)->ClearTexData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_ClearFonts(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ClearFonts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearFonts",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_ClearFonts",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  (arg1)->ClearFonts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Clear",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Clear",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Build(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlas::Build",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Build",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Build",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (bool)(arg1)->Build();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetTexDataAsAlpha8",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",2,"unsigned char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",4,"int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",4,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",5,SWIGTYPE_p_int);
  }
  
  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetTexDataAsAlpha8",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",2,"unsigned char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",4,SWIGTYPE_p_int);
  }
  
  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetTexDataAsAlpha8(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_GetTexDataAsAlpha8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::GetTexDataAsAlpha8(unsigned char **,int *,int *,int *)\n"
    "    ImFontAtlas::GetTexDataAsAlpha8(unsigned char **,int *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetTexDataAsRGBA32",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",2,"unsigned char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",4,"int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",4,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",5,SWIGTYPE_p_int);
  }
  
  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetTexDataAsRGBA32",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",2,"unsigned char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",4,SWIGTYPE_p_int);
  }
  
  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetTexDataAsRGBA32(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_GetTexDataAsRGBA32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::GetTexDataAsRGBA32(unsigned char **,int *,int *,int *)\n"
    "    ImFontAtlas::GetTexDataAsRGBA32(unsigned char **,int *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_IsBuilt(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlas::IsBuilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::IsBuilt",1,"ImFontAtlas const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_IsBuilt",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (bool)((ImFontAtlas const *)arg1)->IsBuilt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_SetTexID(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::SetTexID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::SetTexID",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::SetTexID",2,"ImTextureID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_SetTexID",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_SetTexID");
  (arg1)->SetTexID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesDefault(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesDefault",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesDefault",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesDefault();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesKorean(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesKorean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesKorean",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesKorean",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesKorean();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesJapanese(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesJapanese",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesJapanese",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesJapanese",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesJapanese();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesChineseFull(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesChineseFull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesChineseFull",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesChineseFull",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesChineseFull();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesChineseSimplifiedCommon();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesCyrillic(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesCyrillic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesCyrillic",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesCyrillic",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesCyrillic();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesThai(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesThai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesThai",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesThai",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesThai();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetGlyphRangesVietnamese(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetGlyphRangesVietnamese",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesVietnamese",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesVietnamese",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImWchar *)(arg1)->GetGlyphRangesVietnamese();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddCustomRectRegular(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::AddCustomRectRegular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectRegular",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->AddCustomRectRegular(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddCustomRectFontGlyph__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 *arg7 = 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::AddCustomRectFontGlyph",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",2,"ImFont *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",3,"ImWchar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",6,"float");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",7,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",2,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImWchar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",7,SWIGTYPE_p_ImVec2);
  }
  
  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6,(ImVec2 const &)*arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddCustomRectFontGlyph__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::AddCustomRectFontGlyph",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",2,"ImFont *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",3,"ImWchar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",2,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImWchar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_AddCustomRectFontGlyph(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImFontAtlas_AddCustomRectFontGlyph__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFontAtlas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ImFontAtlas_AddCustomRectFontGlyph__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFontAtlas_AddCustomRectFontGlyph'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFontAtlas::AddCustomRectFontGlyph(ImFont *,ImWchar,int,int,float,ImVec2 const &)\n"
    "    ImFontAtlas::AddCustomRectFontGlyph(ImFont *,ImWchar,int,int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFontAtlas_GetCustomRectByIndex(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::GetCustomRectByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetCustomRectByIndex",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::GetCustomRectByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetCustomRectByIndex",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImFontAtlasCustomRect *)(arg1)->GetCustomRectByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlasCustomRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_CalcCustomRectUV(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasCustomRect *arg2 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::CalcCustomRectUV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",1,"ImFontAtlas const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",2,"ImFontAtlasCustomRect const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",3,"ImVec2 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",4,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
    SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",2,SWIGTYPE_p_ImFontAtlasCustomRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",4,SWIGTYPE_p_ImVec2);
  }
  
  ((ImFontAtlas const *)arg1)->CalcCustomRectUV((ImFontAtlasCustomRect const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_GetMouseCursorTexData(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiMouseCursor arg2 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  ImVec2 *arg5 ;
  ImVec2 *arg6 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlas::GetMouseCursorTexData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",2,"ImGuiMouseCursor");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",3,"ImVec2 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",4,"ImVec2 *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",5,"ImVec2 [2]");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",6,"ImVec2 [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (ImGuiMouseCursor)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",6,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)(arg1)->GetMouseCursorTexData(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Locked_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::Locked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Locked",1,"ImFontAtlas *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontAtlas::Locked",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Locked_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Locked = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Locked_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlas::Locked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Locked",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Locked_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (bool) ((arg1)->Locked);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Flags",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::Flags",2,"ImFontAtlasFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Flags_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (ImFontAtlasFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags result;
  
  SWIG_check_num_args("ImFontAtlas::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Flags",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Flags_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImFontAtlasFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexID",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexID",2,"ImTextureID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexID_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_TexID_set");
  if (arg1) (arg1)->TexID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID result;
  
  SWIG_check_num_args("ImFontAtlas::TexID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexID",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexID_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImTextureID) ((arg1)->TexID);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexDesiredWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::TexDesiredWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexDesiredWidth_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TexDesiredWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexDesiredWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::TexDesiredWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexDesiredWidth_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->TexDesiredWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexGlyphPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::TexGlyphPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexGlyphPadding_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TexGlyphPadding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexGlyphPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::TexGlyphPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexGlyphPadding_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->TexGlyphPadding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexPixelsAlpha8_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexPixelsAlpha8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->TexPixelsAlpha8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexPixelsAlpha8_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexPixelsAlpha8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (unsigned char *) ((arg1)->TexPixelsAlpha8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexPixelsRGBA32_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexPixelsRGBA32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_set",2,SWIGTYPE_p_unsigned_int);
  }
  
  if (arg1) (arg1)->TexPixelsRGBA32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexPixelsRGBA32_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexPixelsRGBA32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (unsigned int *) ((arg1)->TexPixelsRGBA32);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::TexWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexWidth",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexWidth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexWidth_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TexWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::TexWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexWidth",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexWidth_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->TexWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::TexHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexHeight",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexHeight",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexHeight_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TexHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::TexHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexHeight",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexHeight_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->TexHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvScale",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvScale",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvScale_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvScale_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->TexUvScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvScale",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvScale_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVec2 *)& ((arg1)->TexUvScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvWhitePixel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvWhitePixel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->TexUvWhitePixel = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvWhitePixel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvWhitePixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVec2 *)& ((arg1)->TexUvWhitePixel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Fonts_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *arg2 = (ImVector< ImFont * > *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::Fonts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Fonts",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::Fonts",2,"ImVector< ImFont * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Fonts_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFont_p_t,0))){
    SWIG_fail_ptr("ImFontAtlas_Fonts_set",2,SWIGTYPE_p_ImVectorT_ImFont_p_t);
  }
  
  if (arg1) (arg1)->Fonts = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_Fonts_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::Fonts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Fonts",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_Fonts_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVector< ImFont * > *)& ((arg1)->Fonts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFont_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_CustomRects_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlasCustomRect > *arg2 = (ImVector< ImFontAtlasCustomRect > *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::CustomRects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CustomRects",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::CustomRects",2,"ImVector< ImFontAtlasCustomRect > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_CustomRects_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t,0))){
    SWIG_fail_ptr("ImFontAtlas_CustomRects_set",2,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t);
  }
  
  if (arg1) (arg1)->CustomRects = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_CustomRects_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlasCustomRect > *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::CustomRects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CustomRects",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_CustomRects_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVector< ImFontAtlasCustomRect > *)& ((arg1)->CustomRects);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_ConfigData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *arg2 = (ImVector< ImFontConfig > *) 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ConfigData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ConfigData",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::ConfigData",2,"ImVector< ImFontConfig > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_ConfigData_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontConfig_t,0))){
    SWIG_fail_ptr("ImFontAtlas_ConfigData_set",2,SWIGTYPE_p_ImVectorT_ImFontConfig_t);
  }
  
  if (arg1) (arg1)->ConfigData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_ConfigData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::ConfigData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ConfigData",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_ConfigData_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVector< ImFontConfig > *)& ((arg1)->ConfigData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontConfig_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvLines_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec4 *arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvLines",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvLines",2,"ImVec4 [(63) +1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvLines_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvLines_set",2,SWIGTYPE_p_ImVec4);
  }
  
  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->TexUvLines;
    for (ii = 0; ii < (size_t)(63) +1; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_TexUvLines_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImFontAtlas::TexUvLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvLines",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_TexUvLines_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImVec4 *)(ImVec4 *) ((arg1)->TexUvLines);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_PackIdMouseCursors_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::PackIdMouseCursors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_PackIdMouseCursors_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->PackIdMouseCursors = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_PackIdMouseCursors_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::PackIdMouseCursors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_PackIdMouseCursors_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->PackIdMouseCursors);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_PackIdLines_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFontAtlas::PackIdLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdLines",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::PackIdLines",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_PackIdLines_set",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->PackIdLines = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlas_PackIdLines_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFontAtlas::PackIdLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdLines",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlas_PackIdLines_get",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (int) ((arg1)->PackIdLines);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFontAtlas(void *obj) {
ImFontAtlas *arg1 = (ImFontAtlas *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontAtlas(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontAtlas);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontAtlas_attributes[] = {
    { "Locked", _wrap_ImFontAtlas_Locked_get, _wrap_ImFontAtlas_Locked_set },
    { "Flags", _wrap_ImFontAtlas_Flags_get, _wrap_ImFontAtlas_Flags_set },
    { "TexID", _wrap_ImFontAtlas_TexID_get, _wrap_ImFontAtlas_TexID_set },
    { "TexDesiredWidth", _wrap_ImFontAtlas_TexDesiredWidth_get, _wrap_ImFontAtlas_TexDesiredWidth_set },
    { "TexGlyphPadding", _wrap_ImFontAtlas_TexGlyphPadding_get, _wrap_ImFontAtlas_TexGlyphPadding_set },
    { "TexPixelsAlpha8", _wrap_ImFontAtlas_TexPixelsAlpha8_get, _wrap_ImFontAtlas_TexPixelsAlpha8_set },
    { "TexPixelsRGBA32", _wrap_ImFontAtlas_TexPixelsRGBA32_get, _wrap_ImFontAtlas_TexPixelsRGBA32_set },
    { "TexWidth", _wrap_ImFontAtlas_TexWidth_get, _wrap_ImFontAtlas_TexWidth_set },
    { "TexHeight", _wrap_ImFontAtlas_TexHeight_get, _wrap_ImFontAtlas_TexHeight_set },
    { "TexUvScale", _wrap_ImFontAtlas_TexUvScale_get, _wrap_ImFontAtlas_TexUvScale_set },
    { "TexUvWhitePixel", _wrap_ImFontAtlas_TexUvWhitePixel_get, _wrap_ImFontAtlas_TexUvWhitePixel_set },
    { "Fonts", _wrap_ImFontAtlas_Fonts_get, _wrap_ImFontAtlas_Fonts_set },
    { "CustomRects", _wrap_ImFontAtlas_CustomRects_get, _wrap_ImFontAtlas_CustomRects_set },
    { "ConfigData", _wrap_ImFontAtlas_ConfigData_get, _wrap_ImFontAtlas_ConfigData_set },
    { "TexUvLines", _wrap_ImFontAtlas_TexUvLines_get, _wrap_ImFontAtlas_TexUvLines_set },
    { "PackIdMouseCursors", _wrap_ImFontAtlas_PackIdMouseCursors_get, _wrap_ImFontAtlas_PackIdMouseCursors_set },
    { "PackIdLines", _wrap_ImFontAtlas_PackIdLines_get, _wrap_ImFontAtlas_PackIdLines_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontAtlas_methods[]= {
    { "AddFont", _wrap_ImFontAtlas_AddFont},
    { "AddFontDefault", _wrap_ImFontAtlas_AddFontDefault},
    { "AddFontFromFileTTF", _wrap_ImFontAtlas_AddFontFromFileTTF},
    { "AddFontFromMemoryTTF", _wrap_ImFontAtlas_AddFontFromMemoryTTF},
    { "AddFontFromMemoryCompressedTTF", _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF},
    { "AddFontFromMemoryCompressedBase85TTF", _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF},
    { "ClearInputData", _wrap_ImFontAtlas_ClearInputData},
    { "ClearTexData", _wrap_ImFontAtlas_ClearTexData},
    { "ClearFonts", _wrap_ImFontAtlas_ClearFonts},
    { "Clear", _wrap_ImFontAtlas_Clear},
    { "Build", _wrap_ImFontAtlas_Build},
    { "GetTexDataAsAlpha8", _wrap_ImFontAtlas_GetTexDataAsAlpha8},
    { "GetTexDataAsRGBA32", _wrap_ImFontAtlas_GetTexDataAsRGBA32},
    { "IsBuilt", _wrap_ImFontAtlas_IsBuilt},
    { "SetTexID", _wrap_ImFontAtlas_SetTexID},
    { "GetGlyphRangesDefault", _wrap_ImFontAtlas_GetGlyphRangesDefault},
    { "GetGlyphRangesKorean", _wrap_ImFontAtlas_GetGlyphRangesKorean},
    { "GetGlyphRangesJapanese", _wrap_ImFontAtlas_GetGlyphRangesJapanese},
    { "GetGlyphRangesChineseFull", _wrap_ImFontAtlas_GetGlyphRangesChineseFull},
    { "GetGlyphRangesChineseSimplifiedCommon", _wrap_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon},
    { "GetGlyphRangesCyrillic", _wrap_ImFontAtlas_GetGlyphRangesCyrillic},
    { "GetGlyphRangesThai", _wrap_ImFontAtlas_GetGlyphRangesThai},
    { "GetGlyphRangesVietnamese", _wrap_ImFontAtlas_GetGlyphRangesVietnamese},
    { "AddCustomRectRegular", _wrap_ImFontAtlas_AddCustomRectRegular},
    { "AddCustomRectFontGlyph", _wrap_ImFontAtlas_AddCustomRectFontGlyph},
    { "GetCustomRectByIndex", _wrap_ImFontAtlas_GetCustomRectByIndex},
    { "CalcCustomRectUV", _wrap_ImFontAtlas_CalcCustomRectUV},
    { "GetMouseCursorTexData", _wrap_ImFontAtlas_GetMouseCursorTexData},
    {0,0}
};
static swig_lua_method swig_ImFontAtlas_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontAtlas_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontAtlas_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontAtlas_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontAtlas_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontAtlas_Sf_SwigStatic = {
    "ImFontAtlas",
    swig_ImFontAtlas_Sf_SwigStatic_methods,
    swig_ImFontAtlas_Sf_SwigStatic_attributes,
    swig_ImFontAtlas_Sf_SwigStatic_constants,
    swig_ImFontAtlas_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontAtlas_bases[] = {0};
static const char *swig_ImFontAtlas_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontAtlas = { "ImFontAtlas", "ImFontAtlas", &SWIGTYPE_p_ImFontAtlas,_proxy__wrap_new_ImFontAtlas, swig_delete_ImFontAtlas, swig_ImFontAtlas_methods, swig_ImFontAtlas_attributes, &swig_ImFontAtlas_Sf_SwigStatic, swig_ImFontAtlas_meta, swig_ImFontAtlas_bases, swig_ImFontAtlas_base_names };

static int _wrap_ImFont_IndexAdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *arg2 = (ImVector< float > *) 0 ;
  
  SWIG_check_num_args("ImFont::IndexAdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexAdvanceX",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::IndexAdvanceX",2,"ImVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IndexAdvanceX_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_float_t,0))){
    SWIG_fail_ptr("ImFont_IndexAdvanceX_set",2,SWIGTYPE_p_ImVectorT_float_t);
  }
  
  if (arg1) (arg1)->IndexAdvanceX = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_IndexAdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *result = 0 ;
  
  SWIG_check_num_args("ImFont::IndexAdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexAdvanceX",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IndexAdvanceX_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImVector< float > *)& ((arg1)->IndexAdvanceX);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackAdvanceX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFont::FallbackAdvanceX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackAdvanceX",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FallbackAdvanceX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackAdvanceX_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FallbackAdvanceX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackAdvanceX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFont::FallbackAdvanceX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackAdvanceX",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackAdvanceX_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (float) ((arg1)->FallbackAdvanceX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FontSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFont::FontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FontSize",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FontSize_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FontSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFont::FontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FontSize",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FontSize_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (float) ((arg1)->FontSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_IndexLookup_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  SWIG_check_num_args("ImFont::IndexLookup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexLookup",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::IndexLookup",2,"ImVector< ImWchar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IndexLookup_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImFont_IndexLookup_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->IndexLookup = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_IndexLookup_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImWchar > *result = 0 ;
  
  SWIG_check_num_args("ImFont::IndexLookup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexLookup",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IndexLookup_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImVector< ImWchar > *)& ((arg1)->IndexLookup);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Glyphs_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFontGlyph > *arg2 = (ImVector< ImFontGlyph > *) 0 ;
  
  SWIG_check_num_args("ImFont::Glyphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Glyphs",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::Glyphs",2,"ImVector< ImFontGlyph > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Glyphs_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontGlyph_t,0))){
    SWIG_fail_ptr("ImFont_Glyphs_set",2,SWIGTYPE_p_ImVectorT_ImFontGlyph_t);
  }
  
  if (arg1) (arg1)->Glyphs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Glyphs_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFontGlyph > *result = 0 ;
  
  SWIG_check_num_args("ImFont::Glyphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Glyphs",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Glyphs_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImVector< ImFontGlyph > *)& ((arg1)->Glyphs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontGlyph_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackGlyph_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *arg2 = (ImFontGlyph *) 0 ;
  
  SWIG_check_num_args("ImFont::FallbackGlyph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackGlyph",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::FallbackGlyph",2,"ImFontGlyph const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackGlyph_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontGlyph,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFont_FallbackGlyph_set",2,SWIGTYPE_p_ImFontGlyph);
  }
  
  if (arg1) (arg1)->FallbackGlyph = (ImFontGlyph const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackGlyph_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *result = 0 ;
  
  SWIG_check_num_args("ImFont::FallbackGlyph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackGlyph",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackGlyph_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImFontGlyph *) ((arg1)->FallbackGlyph);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ContainerAtlas_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFont::ContainerAtlas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ContainerAtlas",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::ContainerAtlas",2,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ContainerAtlas_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlas,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFont_ContainerAtlas_set",2,SWIGTYPE_p_ImFontAtlas);
  }
  
  if (arg1) (arg1)->ContainerAtlas = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ContainerAtlas_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *result = 0 ;
  
  SWIG_check_num_args("ImFont::ContainerAtlas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ContainerAtlas",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ContainerAtlas_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImFontAtlas *) ((arg1)->ContainerAtlas);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ConfigData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  
  SWIG_check_num_args("ImFont::ConfigData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigData",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::ConfigData",2,"ImFontConfig const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ConfigData_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImFont_ConfigData_set",2,SWIGTYPE_p_ImFontConfig);
  }
  
  if (arg1) (arg1)->ConfigData = (ImFontConfig const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ConfigData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *result = 0 ;
  
  SWIG_check_num_args("ImFont::ConfigData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigData",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ConfigData_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImFontConfig *) ((arg1)->ConfigData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ConfigDataCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImFont::ConfigDataCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigDataCount",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::ConfigDataCount",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ConfigDataCount_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->ConfigDataCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ConfigDataCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  short result;
  
  SWIG_check_num_args("ImFont::ConfigDataCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigDataCount",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ConfigDataCount_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (short) ((arg1)->ConfigDataCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackChar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImFont::FallbackChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackChar",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FallbackChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackChar_set",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  if (arg1) (arg1)->FallbackChar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FallbackChar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  SWIG_check_num_args("ImFont::FallbackChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackChar",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FallbackChar_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImWchar) ((arg1)->FallbackChar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_EllipsisChar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImFont::EllipsisChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisChar",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::EllipsisChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_EllipsisChar_set",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  if (arg1) (arg1)->EllipsisChar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_EllipsisChar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  SWIG_check_num_args("ImFont::EllipsisChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisChar",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_EllipsisChar_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImWchar) ((arg1)->EllipsisChar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_DirtyLookupTables_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImFont::DirtyLookupTables",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::DirtyLookupTables",1,"ImFont *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFont::DirtyLookupTables",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_DirtyLookupTables_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DirtyLookupTables = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_DirtyLookupTables_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFont::DirtyLookupTables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::DirtyLookupTables",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_DirtyLookupTables_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (bool) ((arg1)->DirtyLookupTables);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Scale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFont::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Scale",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Scale_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Scale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFont::Scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Scale",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Scale_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (float) ((arg1)->Scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Ascent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFont::Ascent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Ascent",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Ascent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Ascent_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Ascent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Ascent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFont::Ascent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Ascent",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Ascent_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (float) ((arg1)->Ascent);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Descent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFont::Descent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Descent",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Descent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Descent_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Descent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Descent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  SWIG_check_num_args("ImFont::Descent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Descent",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Descent_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (float) ((arg1)->Descent);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_MetricsTotalSurface_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFont::MetricsTotalSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::MetricsTotalSurface",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::MetricsTotalSurface",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_MetricsTotalSurface_set",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MetricsTotalSurface = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_MetricsTotalSurface_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  int result;
  
  SWIG_check_num_args("ImFont::MetricsTotalSurface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::MetricsTotalSurface",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_MetricsTotalSurface_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (int) ((arg1)->MetricsTotalSurface);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Used4kPagesMap_set(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImU8 *arg2 ;
  
  SWIG_check_num_args("ImFont::Used4kPagesMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Used4kPagesMap",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::Used4kPagesMap",2,"ImU8 [(0xFFFF+1)/4096/8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Used4kPagesMap_set",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFont_Used4kPagesMap_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    ImU8 *b = (ImU8 *) arg1->Used4kPagesMap;
    for (ii = 0; ii < (size_t)(0xFFFF+1)/4096/8; ii++) b[ii] = *((ImU8 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_Used4kPagesMap_get(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImU8 *result = 0 ;
  
  SWIG_check_num_args("ImFont::Used4kPagesMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Used4kPagesMap",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_Used4kPagesMap_get",1,SWIGTYPE_p_ImFont);
  }
  
  result = (ImU8 *)(ImU8 *) ((arg1)->Used4kPagesMap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImFont::ImFont",0,0)
  result = (ImFont *)new ImFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FindGlyph(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  SWIG_check_num_args("ImFont::FindGlyph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FindGlyph",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FindGlyph",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FindGlyph",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyph(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_FindGlyphNoFallback(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  SWIG_check_num_args("ImFont::FindGlyphNoFallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FindGlyphNoFallback",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FindGlyphNoFallback",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_FindGlyphNoFallback",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyphNoFallback(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_GetCharAdvance(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float result;
  
  SWIG_check_num_args("ImFont::GetCharAdvance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GetCharAdvance",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::GetCharAdvance",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_GetCharAdvance",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  result = (float)((ImFont const *)arg1)->GetCharAdvance(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_IsLoaded(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFont::IsLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IsLoaded",1,"ImFont const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IsLoaded",1,SWIGTYPE_p_ImFont);
  }
  
  result = (bool)((ImFont const *)arg1)->IsLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_GetDebugName(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImFont::GetDebugName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GetDebugName",1,"ImFont const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_GetDebugName",1,SWIGTYPE_p_ImFont);
  }
  
  result = (char *)((ImFont const *)arg1)->GetDebugName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_CalcTextSizeA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImFont::CalcTextSizeA",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcTextSizeA",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcTextSizeA",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::CalcTextSizeA",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::CalcTextSizeA",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImFont::CalcTextSizeA",5,"char const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImFont::CalcTextSizeA",6,"char const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImFont::CalcTextSizeA",7,"char const **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_CalcTextSizeA",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ImFont_CalcTextSizeA",7,SWIGTYPE_p_p_char);
  }
  
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_CalcTextSizeA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImFont::CalcTextSizeA",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcTextSizeA",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcTextSizeA",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::CalcTextSizeA",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::CalcTextSizeA",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImFont::CalcTextSizeA",5,"char const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImFont::CalcTextSizeA",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_CalcTextSizeA",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_CalcTextSizeA__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImFont::CalcTextSizeA",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcTextSizeA",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcTextSizeA",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::CalcTextSizeA",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::CalcTextSizeA",4,"float");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImFont::CalcTextSizeA",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_CalcTextSizeA",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_CalcTextSizeA(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImFont_CalcTextSizeA__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImFont_CalcTextSizeA__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ImFont_CalcTextSizeA__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFont_CalcTextSizeA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFont::CalcTextSizeA(float,float,float,char const *,char const *,char const **) const\n"
    "    ImFont::CalcTextSizeA(float,float,float,char const *,char const *) const\n"
    "    ImFont::CalcTextSizeA(float,float,float,char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImFont_CalcWordWrapPositionA(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImFont::CalcWordWrapPositionA",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",1,"ImFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",2,"float");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_CalcWordWrapPositionA",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (char *)((ImFont const *)arg1)->CalcWordWrapPositionA(arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_RenderChar(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImWchar arg6 ;
  ImVec2 *argp4 ;
  
  SWIG_check_num_args("ImFont::RenderChar",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderChar",1,"ImFont const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderChar",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderChar",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderChar",4,"ImVec2");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderChar",5,"ImU32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFont::RenderChar",6,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_RenderChar",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImFont_RenderChar",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFont_RenderChar",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImWchar)lua_tonumber(L, 6);
  ((ImFont const *)arg1)->RenderChar(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_RenderText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool arg10 ;
  ImVec2 *argp4 ;
  
  SWIG_check_num_args("ImFont::RenderText",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderText",1,"ImFont const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderText",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderText",4,"ImVec2");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderText",5,"ImU32");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImFont::RenderText",6,"ImVec4 const &");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImFont::RenderText",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImFont::RenderText",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImFont::RenderText",9,"float");
  if(!lua_isboolean(L,10)) SWIG_fail_arg("ImFont::RenderText",10,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_RenderText",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImFont_RenderText",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFont_RenderText",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImFont_RenderText",6,SWIGTYPE_p_ImVec4);
  }
  
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (lua_toboolean(L, 10)!=0);
  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_RenderText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  ImVec2 *argp4 ;
  
  SWIG_check_num_args("ImFont::RenderText",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderText",1,"ImFont const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderText",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderText",4,"ImVec2");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderText",5,"ImU32");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImFont::RenderText",6,"ImVec4 const &");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImFont::RenderText",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImFont::RenderText",8,"char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImFont::RenderText",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_RenderText",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImFont_RenderText",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFont_RenderText",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImFont_RenderText",6,SWIGTYPE_p_ImVec4);
  }
  
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_RenderText__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImVec2 *argp4 ;
  
  SWIG_check_num_args("ImFont::RenderText",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderText",1,"ImFont const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderText",2,"ImDrawList *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderText",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderText",4,"ImVec2");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderText",5,"ImU32");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImFont::RenderText",6,"ImVec4 const &");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImFont::RenderText",7,"char const *");
  if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImFont::RenderText",8,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_RenderText",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImFont_RenderText",2,SWIGTYPE_p_ImDrawList);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFont_RenderText",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImFont_RenderText",6,SWIGTYPE_p_ImVec4);
  }
  
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_RenderText(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ImFont_RenderText__SWIG_2(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_ImFont_RenderText__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = SWIG_lua_isnilstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = SWIG_lua_isnilstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isboolean(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_ImFont_RenderText__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFont_RenderText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFont::RenderText(ImDrawList *,float,ImVec2,ImU32,ImVec4 const &,char const *,char const *,float,bool) const\n"
    "    ImFont::RenderText(ImDrawList *,float,ImVec2,ImU32,ImVec4 const &,char const *,char const *,float) const\n"
    "    ImFont::RenderText(ImDrawList *,float,ImVec2,ImU32,ImVec4 const &,char const *,char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImFont_BuildLookupTable(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImFont::BuildLookupTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::BuildLookupTable",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_BuildLookupTable",1,SWIGTYPE_p_ImFont);
  }
  
  (arg1)->BuildLookupTable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_ClearOutputData(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImFont::ClearOutputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ClearOutputData",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_ClearOutputData",1,SWIGTYPE_p_ImFont);
  }
  
  (arg1)->ClearOutputData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_GrowIndex(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImFont::GrowIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GrowIndex",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::GrowIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_GrowIndex",1,SWIGTYPE_p_ImFont);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->GrowIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_AddGlyph(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImWchar arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  
  SWIG_check_num_args("ImFont::AddGlyph",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::AddGlyph",1,"ImFont *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::AddGlyph",2,"ImFontConfig const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::AddGlyph",3,"ImWchar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::AddGlyph",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::AddGlyph",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFont::AddGlyph",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImFont::AddGlyph",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImFont::AddGlyph",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImFont::AddGlyph",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ImFont::AddGlyph",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ImFont::AddGlyph",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ImFont::AddGlyph",12,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_AddGlyph",1,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFont_AddGlyph",2,SWIGTYPE_p_ImFontConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImWchar)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  (arg1)->AddGlyph((ImFontConfig const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_AddRemapChar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("ImFont::AddRemapChar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::AddRemapChar",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::AddRemapChar",2,"ImWchar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::AddRemapChar",3,"ImWchar");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImFont::AddRemapChar",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_AddRemapChar",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImWchar)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->AddRemapChar(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_AddRemapChar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  
  SWIG_check_num_args("ImFont::AddRemapChar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::AddRemapChar",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::AddRemapChar",2,"ImWchar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::AddRemapChar",3,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_AddRemapChar",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImWchar)lua_tonumber(L, 3);
  (arg1)->AddRemapChar(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_AddRemapChar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImFont_AddRemapChar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImFont_AddRemapChar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFont_AddRemapChar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFont::AddRemapChar(ImWchar,ImWchar,bool)\n"
    "    ImFont::AddRemapChar(ImWchar,ImWchar)\n");
  lua_error(L);return 0;
}


static int _wrap_ImFont_SetGlyphVisible(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImFont::SetGlyphVisible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::SetGlyphVisible",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::SetGlyphVisible",2,"ImWchar");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImFont::SetGlyphVisible",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_SetGlyphVisible",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetGlyphVisible(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_SetFallbackChar(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  SWIG_check_num_args("ImFont::SetFallbackChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::SetFallbackChar",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::SetFallbackChar",2,"ImWchar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_SetFallbackChar",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImWchar)lua_tonumber(L, 2);
  (arg1)->SetFallbackChar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFont_IsGlyphRangeUnused(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("ImFont::IsGlyphRangeUnused",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",1,"ImFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFont_IsGlyphRangeUnused",1,SWIGTYPE_p_ImFont);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->IsGlyphRangeUnused(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImFont(void *obj) {
ImFont *arg1 = (ImFont *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFont(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFont);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFont_attributes[] = {
    { "IndexAdvanceX", _wrap_ImFont_IndexAdvanceX_get, _wrap_ImFont_IndexAdvanceX_set },
    { "FallbackAdvanceX", _wrap_ImFont_FallbackAdvanceX_get, _wrap_ImFont_FallbackAdvanceX_set },
    { "FontSize", _wrap_ImFont_FontSize_get, _wrap_ImFont_FontSize_set },
    { "IndexLookup", _wrap_ImFont_IndexLookup_get, _wrap_ImFont_IndexLookup_set },
    { "Glyphs", _wrap_ImFont_Glyphs_get, _wrap_ImFont_Glyphs_set },
    { "FallbackGlyph", _wrap_ImFont_FallbackGlyph_get, _wrap_ImFont_FallbackGlyph_set },
    { "ContainerAtlas", _wrap_ImFont_ContainerAtlas_get, _wrap_ImFont_ContainerAtlas_set },
    { "ConfigData", _wrap_ImFont_ConfigData_get, _wrap_ImFont_ConfigData_set },
    { "ConfigDataCount", _wrap_ImFont_ConfigDataCount_get, _wrap_ImFont_ConfigDataCount_set },
    { "FallbackChar", _wrap_ImFont_FallbackChar_get, _wrap_ImFont_FallbackChar_set },
    { "EllipsisChar", _wrap_ImFont_EllipsisChar_get, _wrap_ImFont_EllipsisChar_set },
    { "DirtyLookupTables", _wrap_ImFont_DirtyLookupTables_get, _wrap_ImFont_DirtyLookupTables_set },
    { "Scale", _wrap_ImFont_Scale_get, _wrap_ImFont_Scale_set },
    { "Ascent", _wrap_ImFont_Ascent_get, _wrap_ImFont_Ascent_set },
    { "Descent", _wrap_ImFont_Descent_get, _wrap_ImFont_Descent_set },
    { "MetricsTotalSurface", _wrap_ImFont_MetricsTotalSurface_get, _wrap_ImFont_MetricsTotalSurface_set },
    { "Used4kPagesMap", _wrap_ImFont_Used4kPagesMap_get, _wrap_ImFont_Used4kPagesMap_set },
    {0,0,0}
};
static swig_lua_method swig_ImFont_methods[]= {
    { "FindGlyph", _wrap_ImFont_FindGlyph},
    { "FindGlyphNoFallback", _wrap_ImFont_FindGlyphNoFallback},
    { "GetCharAdvance", _wrap_ImFont_GetCharAdvance},
    { "IsLoaded", _wrap_ImFont_IsLoaded},
    { "GetDebugName", _wrap_ImFont_GetDebugName},
    { "CalcTextSizeA", _wrap_ImFont_CalcTextSizeA},
    { "CalcWordWrapPositionA", _wrap_ImFont_CalcWordWrapPositionA},
    { "RenderChar", _wrap_ImFont_RenderChar},
    { "RenderText", _wrap_ImFont_RenderText},
    { "BuildLookupTable", _wrap_ImFont_BuildLookupTable},
    { "ClearOutputData", _wrap_ImFont_ClearOutputData},
    { "GrowIndex", _wrap_ImFont_GrowIndex},
    { "AddGlyph", _wrap_ImFont_AddGlyph},
    { "AddRemapChar", _wrap_ImFont_AddRemapChar},
    { "SetGlyphVisible", _wrap_ImFont_SetGlyphVisible},
    { "SetFallbackChar", _wrap_ImFont_SetFallbackChar},
    { "IsGlyphRangeUnused", _wrap_ImFont_IsGlyphRangeUnused},
    {0,0}
};
static swig_lua_method swig_ImFont_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFont_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFont_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFont_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFont_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFont_Sf_SwigStatic = {
    "ImFont",
    swig_ImFont_Sf_SwigStatic_methods,
    swig_ImFont_Sf_SwigStatic_attributes,
    swig_ImFont_Sf_SwigStatic_constants,
    swig_ImFont_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFont_bases[] = {0};
static const char *swig_ImFont_base_names[] = {0};
static swig_lua_class _wrap_class_ImFont = { "ImFont", "ImFont", &SWIGTYPE_p_ImFont,_proxy__wrap_new_ImFont, swig_delete_ImFont, swig_ImFont_methods, swig_ImFont_attributes, &swig_ImFont_Sf_SwigStatic, swig_ImFont_meta, swig_ImFont_bases, swig_ImFont_base_names };

static int _wrap_ImGuiPlatformIO_Platform_CreateWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_CreateWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_CreateWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_CreateWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_DestroyWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_DestroyWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_DestroyWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_DestroyWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_DestroyWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_DestroyWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_ShowWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_ShowWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_ShowWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_ShowWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_ShowWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_ShowWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",2,"void (*)(ImGuiViewport *,ImVec2)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void);
  }
  
  if (arg1) (arg1)->Platform_SetWindowPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",2,"ImVec2 (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_set",2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2);
  }
  
  if (arg1) (arg1)->Platform_GetWindowPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",2,"void (*)(ImGuiViewport *,ImVec2)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void);
  }
  
  if (arg1) (arg1)->Platform_SetWindowSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",2,"ImVec2 (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2);
  }
  
  if (arg1) (arg1)->Platform_GetWindowSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_SetWindowFocus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_SetWindowFocus);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",2,"bool (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__bool,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_set",2,SWIGTYPE_p_f_p_ImGuiViewport__bool);
  }
  
  if (arg1) (arg1)->Platform_GetWindowFocus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowFocus);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowMinimized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",2,"bool (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__bool,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_set",2,SWIGTYPE_p_f_p_ImGuiViewport__bool);
  }
  
  if (arg1) (arg1)->Platform_GetWindowMinimized = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowMinimized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowMinimized);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,char const *) = (void (*)(ImGuiViewport *,char const *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",2,"void (*)(ImGuiViewport *,char const *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void);
  }
  
  if (arg1) (arg1)->Platform_SetWindowTitle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,char const *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,char const *)) ((arg1)->Platform_SetWindowTitle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,float) = (void (*)(ImGuiViewport *,float)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",2,"void (*)(ImGuiViewport *,float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_float__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_set",2,SWIGTYPE_p_f_p_ImGuiViewport_float__void);
  }
  
  if (arg1) (arg1)->Platform_SetWindowAlpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,float) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,float)) ((arg1)->Platform_SetWindowAlpha);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_float__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_UpdateWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_UpdateWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_UpdateWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_UpdateWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_UpdateWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_UpdateWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_RenderWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_RenderWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",2,"void (*)(ImGuiViewport *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void);
  }
  
  if (arg1) (arg1)->Platform_RenderWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_RenderWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_RenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_RenderWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SwapBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SwapBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",2,"void (*)(ImGuiViewport *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void);
  }
  
  if (arg1) (arg1)->Platform_SwapBuffers = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SwapBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SwapBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_SwapBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  float (*arg2)(ImGuiViewport *) = (float (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowDpiScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",2,"float (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__float,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_set",2,SWIGTYPE_p_f_p_ImGuiViewport__float);
  }
  
  if (arg1) (arg1)->Platform_GetWindowDpiScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  float (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (float (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowDpiScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_OnChangedViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Platform_OnChangedViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_OnChangedViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_OnChangedViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetImeInputPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetImeInputPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeInputPos",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeInputPos",2,"void (*)(ImGuiViewport *,ImVec2)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeInputPos_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeInputPos_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void);
  }
  
  if (arg1) (arg1)->Platform_SetImeInputPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_SetImeInputPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_SetImeInputPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeInputPos",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeInputPos_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetImeInputPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  int (*arg2)(ImGuiViewport *,ImU64,void const *,ImU64 *) = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateVkSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",2,"int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_set",2,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int);
  }
  
  if (arg1) (arg1)->Platform_CreateVkSurface = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  int (*result)(ImGuiViewport *,ImU64,void const *,ImU64 *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateVkSurface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) ((arg1)->Platform_CreateVkSurface);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_CreateWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_CreateWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Renderer_CreateWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_CreateWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_CreateWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_CreateWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_DestroyWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",2,"void (*)(ImGuiViewport *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void);
  }
  
  if (arg1) (arg1)->Renderer_DestroyWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_DestroyWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_DestroyWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_SetWindowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",2,"void (*)(ImGuiViewport *,ImVec2)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void);
  }
  
  if (arg1) (arg1)->Renderer_SetWindowSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_SetWindowSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Renderer_SetWindowSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_RenderWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",2,"void (*)(ImGuiViewport *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void);
  }
  
  if (arg1) (arg1)->Renderer_RenderWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_RenderWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_RenderWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_SwapBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",2,"void (*)(ImGuiViewport *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void);
  }
  
  if (arg1) (arg1)->Renderer_SwapBuffers = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Renderer_SwapBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_SwapBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Monitors_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiPlatformMonitor > *arg2 = (ImVector< ImGuiPlatformMonitor > *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Monitors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",2,"ImVector< ImGuiPlatformMonitor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Monitors_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Monitors_set",2,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t);
  }
  
  if (arg1) (arg1)->Monitors = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Monitors_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiPlatformMonitor > *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Monitors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Monitors_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (ImVector< ImGuiPlatformMonitor > *)& ((arg1)->Monitors);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_MainViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImGuiViewport *arg2 = (ImGuiViewport *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::MainViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::MainViewport",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::MainViewport",2,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_MainViewport_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewport,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiPlatformIO_MainViewport_set",2,SWIGTYPE_p_ImGuiViewport);
  }
  
  if (arg1) (arg1)->MainViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_MainViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::MainViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::MainViewport",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_MainViewport_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (ImGuiViewport *) ((arg1)->MainViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Viewports_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiViewport * > *arg2 = (ImVector< ImGuiViewport * > *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Viewports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",1,"ImGuiPlatformIO *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",2,"ImVector< ImGuiViewport * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Viewports_set",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Viewports_set",2,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t);
  }
  
  if (arg1) (arg1)->Viewports = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformIO_Viewports_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiViewport * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::Viewports",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",1,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiPlatformIO_Viewports_get",1,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  result = (ImVector< ImGuiViewport * > *)& ((arg1)->Viewports);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPlatformIO(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformIO *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformIO::ImGuiPlatformIO",0,0)
  result = (ImGuiPlatformIO *)new ImGuiPlatformIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiPlatformIO(void *obj) {
ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPlatformIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPlatformIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPlatformIO_attributes[] = {
    { "Platform_CreateWindow", _wrap_ImGuiPlatformIO_Platform_CreateWindow_get, _wrap_ImGuiPlatformIO_Platform_CreateWindow_set },
    { "Platform_DestroyWindow", _wrap_ImGuiPlatformIO_Platform_DestroyWindow_get, _wrap_ImGuiPlatformIO_Platform_DestroyWindow_set },
    { "Platform_ShowWindow", _wrap_ImGuiPlatformIO_Platform_ShowWindow_get, _wrap_ImGuiPlatformIO_Platform_ShowWindow_set },
    { "Platform_SetWindowPos", _wrap_ImGuiPlatformIO_Platform_SetWindowPos_get, _wrap_ImGuiPlatformIO_Platform_SetWindowPos_set },
    { "Platform_GetWindowPos", _wrap_ImGuiPlatformIO_Platform_GetWindowPos_get, _wrap_ImGuiPlatformIO_Platform_GetWindowPos_set },
    { "Platform_SetWindowSize", _wrap_ImGuiPlatformIO_Platform_SetWindowSize_get, _wrap_ImGuiPlatformIO_Platform_SetWindowSize_set },
    { "Platform_GetWindowSize", _wrap_ImGuiPlatformIO_Platform_GetWindowSize_get, _wrap_ImGuiPlatformIO_Platform_GetWindowSize_set },
    { "Platform_SetWindowFocus", _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_get, _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_set },
    { "Platform_GetWindowFocus", _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_get, _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_set },
    { "Platform_GetWindowMinimized", _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_get, _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_set },
    { "Platform_SetWindowTitle", _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_get, _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_set },
    { "Platform_SetWindowAlpha", _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_get, _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_set },
    { "Platform_UpdateWindow", _wrap_ImGuiPlatformIO_Platform_UpdateWindow_get, _wrap_ImGuiPlatformIO_Platform_UpdateWindow_set },
    { "Platform_RenderWindow", _wrap_ImGuiPlatformIO_Platform_RenderWindow_get, _wrap_ImGuiPlatformIO_Platform_RenderWindow_set },
    { "Platform_SwapBuffers", _wrap_ImGuiPlatformIO_Platform_SwapBuffers_get, _wrap_ImGuiPlatformIO_Platform_SwapBuffers_set },
    { "Platform_GetWindowDpiScale", _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_get, _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_set },
    { "Platform_OnChangedViewport", _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_get, _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_set },
    { "Platform_SetImeInputPos", _wrap_ImGuiPlatformIO_Platform_SetImeInputPos_get, _wrap_ImGuiPlatformIO_Platform_SetImeInputPos_set },
    { "Platform_CreateVkSurface", _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_get, _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_set },
    { "Renderer_CreateWindow", _wrap_ImGuiPlatformIO_Renderer_CreateWindow_get, _wrap_ImGuiPlatformIO_Renderer_CreateWindow_set },
    { "Renderer_DestroyWindow", _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_get, _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_set },
    { "Renderer_SetWindowSize", _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_get, _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_set },
    { "Renderer_RenderWindow", _wrap_ImGuiPlatformIO_Renderer_RenderWindow_get, _wrap_ImGuiPlatformIO_Renderer_RenderWindow_set },
    { "Renderer_SwapBuffers", _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_get, _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_set },
    { "Monitors", _wrap_ImGuiPlatformIO_Monitors_get, _wrap_ImGuiPlatformIO_Monitors_set },
    { "MainViewport", _wrap_ImGuiPlatformIO_MainViewport_get, _wrap_ImGuiPlatformIO_MainViewport_set },
    { "Viewports", _wrap_ImGuiPlatformIO_Viewports_get, _wrap_ImGuiPlatformIO_Viewports_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPlatformIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPlatformIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPlatformIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPlatformIO_Sf_SwigStatic = {
    "ImGuiPlatformIO",
    swig_ImGuiPlatformIO_Sf_SwigStatic_methods,
    swig_ImGuiPlatformIO_Sf_SwigStatic_attributes,
    swig_ImGuiPlatformIO_Sf_SwigStatic_constants,
    swig_ImGuiPlatformIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPlatformIO_bases[] = {0};
static const char *swig_ImGuiPlatformIO_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPlatformIO = { "ImGuiPlatformIO", "ImGuiPlatformIO", &SWIGTYPE_p_ImGuiPlatformIO,_proxy__wrap_new_ImGuiPlatformIO, swig_delete_ImGuiPlatformIO, swig_ImGuiPlatformIO_methods, swig_ImGuiPlatformIO_attributes, &swig_ImGuiPlatformIO_Sf_SwigStatic, swig_ImGuiPlatformIO_meta, swig_ImGuiPlatformIO_bases, swig_ImGuiPlatformIO_base_names };

static int _wrap_ImGuiPlatformMonitor_MainPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::MainPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",1,"ImGuiPlatformMonitor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_set",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MainPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_MainPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::MainPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",1,"ImGuiPlatformMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_get",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  result = (ImVec2 *)& ((arg1)->MainPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_MainSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::MainSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",1,"ImGuiPlatformMonitor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_set",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MainSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_MainSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::MainSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",1,"ImGuiPlatformMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_get",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  result = (ImVec2 *)& ((arg1)->MainSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_WorkPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::WorkPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",1,"ImGuiPlatformMonitor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_set",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WorkPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_WorkPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::WorkPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",1,"ImGuiPlatformMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_get",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  result = (ImVec2 *)& ((arg1)->WorkPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_WorkSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::WorkSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",1,"ImGuiPlatformMonitor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_set",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WorkSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_WorkSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::WorkSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",1,"ImGuiPlatformMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_get",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  result = (ImVec2 *)& ((arg1)->WorkSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_DpiScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::DpiScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",1,"ImGuiPlatformMonitor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_DpiScale_set",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DpiScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPlatformMonitor_DpiScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::DpiScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",1,"ImGuiPlatformMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
    SWIG_fail_ptr("ImGuiPlatformMonitor_DpiScale_get",1,SWIGTYPE_p_ImGuiPlatformMonitor);
  }
  
  result = (float) ((arg1)->DpiScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPlatformMonitor(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlatformMonitor *result = 0 ;
  
  SWIG_check_num_args("ImGuiPlatformMonitor::ImGuiPlatformMonitor",0,0)
  result = (ImGuiPlatformMonitor *)new ImGuiPlatformMonitor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformMonitor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiPlatformMonitor(void *obj) {
ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPlatformMonitor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPlatformMonitor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPlatformMonitor_attributes[] = {
    { "MainPos", _wrap_ImGuiPlatformMonitor_MainPos_get, _wrap_ImGuiPlatformMonitor_MainPos_set },
    { "MainSize", _wrap_ImGuiPlatformMonitor_MainSize_get, _wrap_ImGuiPlatformMonitor_MainSize_set },
    { "WorkPos", _wrap_ImGuiPlatformMonitor_WorkPos_get, _wrap_ImGuiPlatformMonitor_WorkPos_set },
    { "WorkSize", _wrap_ImGuiPlatformMonitor_WorkSize_get, _wrap_ImGuiPlatformMonitor_WorkSize_set },
    { "DpiScale", _wrap_ImGuiPlatformMonitor_DpiScale_get, _wrap_ImGuiPlatformMonitor_DpiScale_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPlatformMonitor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPlatformMonitor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPlatformMonitor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPlatformMonitor_Sf_SwigStatic = {
    "ImGuiPlatformMonitor",
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_methods,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_attributes,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_constants,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPlatformMonitor_bases[] = {0};
static const char *swig_ImGuiPlatformMonitor_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPlatformMonitor = { "ImGuiPlatformMonitor", "ImGuiPlatformMonitor", &SWIGTYPE_p_ImGuiPlatformMonitor,_proxy__wrap_new_ImGuiPlatformMonitor, swig_delete_ImGuiPlatformMonitor, swig_ImGuiPlatformMonitor_methods, swig_ImGuiPlatformMonitor_attributes, &swig_ImGuiPlatformMonitor_Sf_SwigStatic, swig_ImGuiPlatformMonitor_meta, swig_ImGuiPlatformMonitor_bases, swig_ImGuiPlatformMonitor_base_names };

static int _wrap_ImGuiViewport_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ID",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_ID_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiViewport::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ID",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_ID_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Flags",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::Flags",2,"ImGuiViewportFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Flags_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiViewportFlags result;
  
  SWIG_check_num_args("ImGuiViewport::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Flags",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Flags_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImGuiViewportFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Pos",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::Pos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Pos_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewport_Pos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Pos",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Pos_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImVec2 *)& ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Size",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::Size",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Size_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewport_Size_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Size = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Size",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_Size_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImVec2 *)& ((arg1)->Size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_WorkOffsetMin_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::WorkOffsetMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMin",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMin",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMin_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMin_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WorkOffsetMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_WorkOffsetMin_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::WorkOffsetMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMin",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMin_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImVec2 *)& ((arg1)->WorkOffsetMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_WorkOffsetMax_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::WorkOffsetMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMax",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMax",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMax_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMax_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WorkOffsetMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_WorkOffsetMax_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::WorkOffsetMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkOffsetMax",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_WorkOffsetMax_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImVec2 *)& ((arg1)->WorkOffsetMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_DpiScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::DpiScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DpiScale",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::DpiScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_DpiScale_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DpiScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_DpiScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiViewport::DpiScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DpiScale",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_DpiScale_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (float) ((arg1)->DpiScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_DrawData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawData *arg2 = (ImDrawData *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::DrawData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DrawData",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::DrawData",2,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_DrawData_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiViewport_DrawData_set",2,SWIGTYPE_p_ImDrawData);
  }
  
  if (arg1) (arg1)->DrawData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_DrawData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawData *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::DrawData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DrawData",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_DrawData_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImDrawData *) ((arg1)->DrawData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_ParentViewportId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::ParentViewportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",1,"ImGuiViewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_ParentViewportId_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ParentViewportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_ParentViewportId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiViewport::ParentViewportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_ParentViewportId_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (ImGuiID) ((arg1)->ParentViewportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_RendererUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::RendererUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::RendererUserData",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::RendererUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_RendererUserData_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_RendererUserData_set");
  if (arg1) (arg1)->RendererUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_RendererUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::RendererUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::RendererUserData",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_RendererUserData_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (void *) ((arg1)->RendererUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformUserData_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformUserData_set");
  if (arg1) (arg1)->PlatformUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformUserData_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (void *) ((arg1)->PlatformUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformHandle_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformHandle_set");
  if (arg1) (arg1)->PlatformHandle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformHandle_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (void *) ((arg1)->PlatformHandle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformHandleRaw_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformHandleRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",1,"ImGuiViewport *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformHandleRaw_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformHandleRaw_set");
  if (arg1) (arg1)->PlatformHandleRaw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformHandleRaw_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformHandleRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformHandleRaw_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (void *) ((arg1)->PlatformHandleRaw);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestMove_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",1,"ImGuiViewport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestMove_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PlatformRequestMove = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestMove_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestMove",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestMove_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (bool) ((arg1)->PlatformRequestMove);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestResize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",1,"ImGuiViewport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestResize_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PlatformRequestResize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestResize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestResize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestResize_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (bool) ((arg1)->PlatformRequestResize);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestClose_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestClose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",1,"ImGuiViewport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestClose_set",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PlatformRequestClose = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_PlatformRequestClose_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiViewport::PlatformRequestClose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_PlatformRequestClose_get",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (bool) ((arg1)->PlatformRequestClose);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewport::ImGuiViewport",0,0)
  result = (ImGuiViewport *)new ImGuiViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_GetCenter(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGuiViewport::GetCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::GetCenter",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_GetCenter",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (arg1)->GetCenter();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_GetWorkPos(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGuiViewport::GetWorkPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::GetWorkPos",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_GetWorkPos",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (arg1)->GetWorkPos();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewport_GetWorkSize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGuiViewport::GetWorkSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::GetWorkSize",1,"ImGuiViewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
    SWIG_fail_ptr("ImGuiViewport_GetWorkSize",1,SWIGTYPE_p_ImGuiViewport);
  }
  
  result = (arg1)->GetWorkSize();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiViewport(void *obj) {
ImGuiViewport *arg1 = (ImGuiViewport *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiViewport(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiViewport);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiViewport_attributes[] = {
    { "ID", _wrap_ImGuiViewport_ID_get, _wrap_ImGuiViewport_ID_set },
    { "Flags", _wrap_ImGuiViewport_Flags_get, _wrap_ImGuiViewport_Flags_set },
    { "Pos", _wrap_ImGuiViewport_Pos_get, _wrap_ImGuiViewport_Pos_set },
    { "Size", _wrap_ImGuiViewport_Size_get, _wrap_ImGuiViewport_Size_set },
    { "WorkOffsetMin", _wrap_ImGuiViewport_WorkOffsetMin_get, _wrap_ImGuiViewport_WorkOffsetMin_set },
    { "WorkOffsetMax", _wrap_ImGuiViewport_WorkOffsetMax_get, _wrap_ImGuiViewport_WorkOffsetMax_set },
    { "DpiScale", _wrap_ImGuiViewport_DpiScale_get, _wrap_ImGuiViewport_DpiScale_set },
    { "DrawData", _wrap_ImGuiViewport_DrawData_get, _wrap_ImGuiViewport_DrawData_set },
    { "ParentViewportId", _wrap_ImGuiViewport_ParentViewportId_get, _wrap_ImGuiViewport_ParentViewportId_set },
    { "RendererUserData", _wrap_ImGuiViewport_RendererUserData_get, _wrap_ImGuiViewport_RendererUserData_set },
    { "PlatformUserData", _wrap_ImGuiViewport_PlatformUserData_get, _wrap_ImGuiViewport_PlatformUserData_set },
    { "PlatformHandle", _wrap_ImGuiViewport_PlatformHandle_get, _wrap_ImGuiViewport_PlatformHandle_set },
    { "PlatformHandleRaw", _wrap_ImGuiViewport_PlatformHandleRaw_get, _wrap_ImGuiViewport_PlatformHandleRaw_set },
    { "PlatformRequestMove", _wrap_ImGuiViewport_PlatformRequestMove_get, _wrap_ImGuiViewport_PlatformRequestMove_set },
    { "PlatformRequestResize", _wrap_ImGuiViewport_PlatformRequestResize_get, _wrap_ImGuiViewport_PlatformRequestResize_set },
    { "PlatformRequestClose", _wrap_ImGuiViewport_PlatformRequestClose_get, _wrap_ImGuiViewport_PlatformRequestClose_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiViewport_methods[]= {
    { "GetCenter", _wrap_ImGuiViewport_GetCenter},
    { "GetWorkPos", _wrap_ImGuiViewport_GetWorkPos},
    { "GetWorkSize", _wrap_ImGuiViewport_GetWorkSize},
    {0,0}
};
static swig_lua_method swig_ImGuiViewport_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiViewport_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiViewport_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiViewport_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiViewport_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiViewport_Sf_SwigStatic = {
    "ImGuiViewport",
    swig_ImGuiViewport_Sf_SwigStatic_methods,
    swig_ImGuiViewport_Sf_SwigStatic_attributes,
    swig_ImGuiViewport_Sf_SwigStatic_constants,
    swig_ImGuiViewport_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiViewport_bases[] = {0};
static const char *swig_ImGuiViewport_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiViewport = { "ImGuiViewport", "ImGuiViewport", &SWIGTYPE_p_ImGuiViewport,_proxy__wrap_new_ImGuiViewport, swig_delete_ImGuiViewport, swig_ImGuiViewport_methods, swig_ImGuiViewport_attributes, &swig_ImGuiViewport_Sf_SwigStatic, swig_ImGuiViewport_meta, swig_ImGuiViewport_bases, swig_ImGuiViewport_base_names };

static int _wrap_GImGui_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("GImGui",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GImGui",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("GImGui_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  GImGui = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GImGui_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *result = 0 ;
  
  SWIG_check_num_args("GImGui",0,0)
  result = (ImGuiContext *)GImGui;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHashData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImHashData",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHashData",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImHashData",3,"ImU32");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImHashData");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  result = (ImU32)ImHashData((void const *)arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHashData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImHashData",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHashData",2,"size_t");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImHashData");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (ImU32)ImHashData((void const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashData(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImHashData__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImHashData__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImHashData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImHashData(void const *,size_t,ImU32)\n"
    "    ImHashData(void const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ImHashStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHashStr",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImHashStr",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHashStr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImHashStr",3,"ImU32");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  result = (ImU32)ImHashStr((char const *)arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHashStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImHashStr",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHashStr",2,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (ImU32)ImHashStr((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashStr__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHashStr",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImHashStr",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImU32)ImHashStr((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHashStr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImHashStr__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImHashStr__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImHashStr__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImHashStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImHashStr(char const *,size_t,ImU32)\n"
    "    ImHashStr(char const *,size_t)\n"
    "    ImHashStr(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImHash__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHash",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImHash",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHash",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImHash",3,"ImU32");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImHash");
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  result = (ImU32)ImHash((void const *)arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHash__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  ImU32 result;
  
  SWIG_check_num_args("ImHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImHash",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImHash",2,"int");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImHash");
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImU32)ImHash((void const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImHash(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImHash__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImHash__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImHash'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImHash(void const *,int,ImU32)\n"
    "    ImHash(void const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ImAlphaBlendColors(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 arg1 ;
  ImU32 arg2 ;
  ImU32 result;
  
  SWIG_check_num_args("ImAlphaBlendColors",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImAlphaBlendColors",1,"ImU32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImAlphaBlendColors",2,"ImU32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImU32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  result = (ImU32)ImAlphaBlendColors(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImIsPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("ImIsPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImIsPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)ImIsPowerOfTwo(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImUpperPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("ImUpperPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImUpperPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)ImUpperPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStricmp(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImStricmp",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStricmp",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStricmp",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)ImStricmp((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrnicmp(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int result;
  
  SWIG_check_num_args("ImStrnicmp",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrnicmp",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStrnicmp",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImStrnicmp",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int)ImStrnicmp((char const *)arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrncpy(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ImStrncpy",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrncpy",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStrncpy",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImStrncpy",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  ImStrncpy(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrdup(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStrdup",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrdup",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ImStrdup((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrdupcpy(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStrdupcpy",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrdupcpy",1,"char *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImStrdupcpy",2,"size_t *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImStrdupcpy",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ImStrdupcpy",2,SWIGTYPE_p_size_t);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (char *)ImStrdupcpy(arg1,arg2,(char const *)arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrchrRange(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStrchrRange",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrchrRange",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStrchrRange",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImStrchrRange",3,"char");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (char *)ImStrchrRange((char const *)arg1,(char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrlenW(lua_State* L) {
  int SWIG_arg = 0;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int result;
  
  SWIG_check_num_args("ImStrlenW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImStrlenW",1,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImStrlenW",1,SWIGTYPE_p_unsigned_short);
  }
  
  result = (int)ImStrlenW((unsigned short const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStreolRange(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStreolRange",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStreolRange",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStreolRange",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)ImStreolRange((char const *)arg1,(char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrbolW(lua_State* L) {
  int SWIG_arg = 0;
  ImWchar *arg1 = (ImWchar *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  ImWchar *result = 0 ;
  
  SWIG_check_num_args("ImStrbolW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImStrbolW",1,"ImWchar const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImStrbolW",2,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImStrbolW",1,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImStrbolW",2,SWIGTYPE_p_unsigned_short);
  }
  
  result = (ImWchar *)ImStrbolW((unsigned short const *)arg1,(unsigned short const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStristr(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStristr",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStristr",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImStristr",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImStristr",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImStristr",4,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (char *)ImStristr((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrTrimBlanks(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImStrTrimBlanks",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrTrimBlanks",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  ImStrTrimBlanks(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImStrSkipBlank(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImStrSkipBlank",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImStrSkipBlank",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ImStrSkipBlank((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFormatString(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ImFormatString",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFormatString",1,"char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFormatString",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFormatString",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)ImFormatString(arg1,arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFormatStringV(lua_State* L) {
  int SWIG_arg = 0;
//  char *arg1 = (char *) 0 ;
//  size_t arg2 ;
//  char *arg3 = (char *) 0 ;
//  va_list arg4 ;
//  va_list *argp4 ;
//  int result;
//
//  SWIG_check_num_args("ImFormatStringV",4,4)
//  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFormatStringV",1,"char *");
//  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFormatStringV",2,"size_t");
//  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFormatStringV",3,"char const *");
//  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFormatStringV",4,"va_list");
//  arg1 = (char *)lua_tostring(L, 1);
//  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
//  arg2 = (size_t)lua_tonumber(L, 2);
//  arg3 = (char *)lua_tostring(L, 3);
//
//  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_va_list,0))){
//    SWIG_fail_ptr("ImFormatStringV",4,SWIGTYPE_p_va_list);
//  }
//  arg4 = *argp4;
//
//  result = (int)ImFormatStringV(arg1,arg2,(char const *)arg3,arg4);
//  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
//  return SWIG_arg;
//
//  if(0) SWIG_fail;
//
//fail:
//  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImParseFormatFindStart(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImParseFormatFindStart",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImParseFormatFindStart",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ImParseFormatFindStart((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImParseFormatFindEnd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImParseFormatFindEnd",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImParseFormatFindEnd",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ImParseFormatFindEnd((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImParseFormatTrimDecorations(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImParseFormatTrimDecorations",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImParseFormatTrimDecorations",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImParseFormatTrimDecorations",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImParseFormatTrimDecorations",3,"size_t");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (char *)ImParseFormatTrimDecorations((char const *)arg1,arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImParseFormatPrecision(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("ImParseFormatPrecision",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImParseFormatPrecision",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImParseFormatPrecision",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)ImParseFormatPrecision((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImCharIsBlankA(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  bool result;
  
  SWIG_check_num_args("ImCharIsBlankA",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImCharIsBlankA",1,"char");
  arg1 = (lua_tostring(L, 1))[0];
  result = (bool)ImCharIsBlankA(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImCharIsBlankW(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  bool result;
  
  SWIG_check_num_args("ImCharIsBlankW",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImCharIsBlankW",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (bool)ImCharIsBlankW(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextStrToUtf8(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImWchar *arg3 = (ImWchar *) 0 ;
  ImWchar *arg4 = (ImWchar *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextStrToUtf8",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImTextStrToUtf8",1,"char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImTextStrToUtf8",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImTextStrToUtf8",3,"ImWchar const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImTextStrToUtf8",4,"ImWchar const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextStrToUtf8",3,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextStrToUtf8",4,SWIGTYPE_p_unsigned_short);
  }
  
  result = (int)ImTextStrToUtf8(arg1,arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextCharFromUtf8(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = (unsigned int *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextCharFromUtf8",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImTextCharFromUtf8",1,"unsigned int *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImTextCharFromUtf8",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImTextCharFromUtf8",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImTextCharFromUtf8",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)ImTextCharFromUtf8(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextStrFromUtf8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextStrFromUtf8",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImTextStrFromUtf8",1,"ImWchar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImTextStrFromUtf8",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImTextStrFromUtf8",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImTextStrFromUtf8",4,"char const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImTextStrFromUtf8",5,"char const **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextStrFromUtf8",1,SWIGTYPE_p_unsigned_short);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("ImTextStrFromUtf8",5,SWIGTYPE_p_p_char);
  }
  
  result = (int)ImTextStrFromUtf8(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextStrFromUtf8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextStrFromUtf8",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImTextStrFromUtf8",1,"ImWchar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImTextStrFromUtf8",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImTextStrFromUtf8",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImTextStrFromUtf8",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextStrFromUtf8",1,SWIGTYPE_p_unsigned_short);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)ImTextStrFromUtf8(arg1,arg2,(char const *)arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextStrFromUtf8(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImTextStrFromUtf8__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImTextStrFromUtf8__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImTextStrFromUtf8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImTextStrFromUtf8(ImWchar *,int,char const *,char const *,char const **)\n"
    "    ImTextStrFromUtf8(ImWchar *,int,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImTextCountCharsFromUtf8(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextCountCharsFromUtf8",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImTextCountCharsFromUtf8",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImTextCountCharsFromUtf8",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)ImTextCountCharsFromUtf8((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextCountUtf8BytesFromChar(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextCountUtf8BytesFromChar",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImTextCountUtf8BytesFromChar",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImTextCountUtf8BytesFromChar",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)ImTextCountUtf8BytesFromChar((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTextCountUtf8BytesFromStr(lua_State* L) {
  int SWIG_arg = 0;
  ImWchar *arg1 = (ImWchar *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  int result;
  
  SWIG_check_num_args("ImTextCountUtf8BytesFromStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImTextCountUtf8BytesFromStr",1,"ImWchar const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImTextCountUtf8BytesFromStr",2,"ImWchar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextCountUtf8BytesFromStr",1,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ImTextCountUtf8BytesFromStr",2,SWIGTYPE_p_unsigned_short);
  }
  
  result = (int)ImTextCountUtf8BytesFromStr((unsigned short const *)arg1,(unsigned short const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileOpen(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImFileHandle result;
  
  SWIG_check_num_args("ImFileOpen",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFileOpen",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFileOpen",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (ImFileHandle)ImFileOpen((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileClose(lua_State* L) {
  int SWIG_arg = 0;
  ImFileHandle arg1 = (ImFileHandle) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFileClose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFileClose",1,"ImFileHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("ImFileClose",1,SWIGTYPE_p_FILE);
  }
  
  result = (bool)ImFileClose(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileGetSize(lua_State* L) {
  int SWIG_arg = 0;
  ImFileHandle arg1 = (ImFileHandle) 0 ;
  ImU64 result;
  
  SWIG_check_num_args("ImFileGetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFileGetSize",1,"ImFileHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("ImFileGetSize",1,SWIGTYPE_p_FILE);
  }
  
  result = (ImU64)ImFileGetSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileRead(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImU64 arg2 ;
  ImU64 arg3 ;
  ImFileHandle arg4 = (ImFileHandle) 0 ;
  ImU64 result;
  
  SWIG_check_num_args("ImFileRead",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFileRead",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFileRead",2,"ImU64");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFileRead",3,"ImU64");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFileRead",4,"ImFileHandle");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImFileRead");
  arg2 = (ImU64)lua_tonumber(L, 2);
  arg3 = (ImU64)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("ImFileRead",4,SWIGTYPE_p_FILE);
  }
  
  result = (ImU64)ImFileRead(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileWrite(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImU64 arg2 ;
  ImU64 arg3 ;
  ImFileHandle arg4 = (ImFileHandle) 0 ;
  ImU64 result;
  
  SWIG_check_num_args("ImFileWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFileWrite",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFileWrite",2,"ImU64");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFileWrite",3,"ImU64");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFileWrite",4,"ImFileHandle");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"ImFileWrite");
  arg2 = (ImU64)lua_tonumber(L, 2);
  arg3 = (ImU64)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("ImFileWrite",4,SWIGTYPE_p_FILE);
  }
  
  result = (ImU64)ImFileWrite((void const *)arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileLoadToMemory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  int arg4 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImFileLoadToMemory",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFileLoadToMemory",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFileLoadToMemory",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFileLoadToMemory",3,"size_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFileLoadToMemory",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ImFileLoadToMemory",3,SWIGTYPE_p_size_t);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileLoadToMemory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImFileLoadToMemory",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFileLoadToMemory",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFileLoadToMemory",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFileLoadToMemory",3,"size_t *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ImFileLoadToMemory",3,SWIGTYPE_p_size_t);
  }
  
  result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileLoadToMemory__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImFileLoadToMemory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImFileLoadToMemory",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFileLoadToMemory",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFileLoadToMemory(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImFileLoadToMemory__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImFileLoadToMemory__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImFileLoadToMemory__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFileLoadToMemory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFileLoadToMemory(char const *,char const *,size_t *,int)\n"
    "    ImFileLoadToMemory(char const *,char const *,size_t *)\n"
    "    ImFileLoadToMemory(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImPow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImPow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImPow",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImPow",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)ImPow(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImPow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("ImPow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImPow",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImPow",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)ImPow(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImPow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImPow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImPow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImPow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImPow(float,float)\n"
    "    ImPow(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_ImLog__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("ImLog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImLog",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)ImLog(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLog__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("ImLog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImLog",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)ImLog(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLog(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImLog__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImLog__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImLog'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImLog(float)\n"
    "    ImLog(double)\n");
  lua_error(L);return 0;
}


static int _wrap_ImAbs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("ImAbs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImAbs",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)ImAbs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImAbs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("ImAbs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImAbs",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)ImAbs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImAbs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImAbs__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImAbs__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImAbs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImAbs(float)\n"
    "    ImAbs(double)\n");
  lua_error(L);return 0;
}


static int _wrap_ImSign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("ImSign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImSign",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)ImSign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImSign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("ImSign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImSign",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)ImSign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImSign(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImSign__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImSign__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImSign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImSign(float)\n"
    "    ImSign(double)\n");
  lua_error(L);return 0;
}


static int _wrap_ImMin(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImMin",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImMin",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImMin",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMin",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMin",2,SWIGTYPE_p_ImVec2);
  }
  
  result = ImMin((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImMax(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImMax",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImMax",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImMax",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMax",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMax",2,SWIGTYPE_p_ImVec2);
  }
  
  result = ImMax((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImClamp(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 arg3 ;
  ImVec2 *argp3 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImClamp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImClamp",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImClamp",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImClamp",3,"ImVec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImClamp",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImClamp",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImClamp",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  result = ImClamp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLerp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImLerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLerp",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImLerp",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImLerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLerp",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLerp",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ImLerp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLerp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImLerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLerp",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImLerp",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImLerp",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLerp",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLerp",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLerp",3,SWIGTYPE_p_ImVec2);
  }
  
  result = ImLerp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLerp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  ImVec4 *arg2 = 0 ;
  float arg3 ;
  ImVec4 result;
  
  SWIG_check_num_args("ImLerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLerp",1,"ImVec4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImLerp",2,"ImVec4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImLerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImLerp",1,SWIGTYPE_p_ImVec4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImLerp",2,SWIGTYPE_p_ImVec4);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ImLerp((ImVec4 const &)*arg1,(ImVec4 const &)*arg2,arg3);
  {
    ImVec4 * resultptr = new ImVec4((const ImVec4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLerp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImLerp__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImLerp__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImLerp__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImLerp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImLerp(ImVec2 const &,ImVec2 const &,float)\n"
    "    ImLerp(ImVec2 const &,ImVec2 const &,ImVec2 const &)\n"
    "    ImLerp(ImVec4 const &,ImVec4 const &,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImSaturate(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("ImSaturate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImSaturate",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)ImSaturate(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLengthSqr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("ImLengthSqr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLengthSqr",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLengthSqr",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (float)ImLengthSqr((ImVec2 const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLengthSqr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("ImLengthSqr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLengthSqr",1,"ImVec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImLengthSqr",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (float)ImLengthSqr((ImVec4 const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLengthSqr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImLengthSqr__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImLengthSqr__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImLengthSqr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImLengthSqr(ImVec2 const &)\n"
    "    ImLengthSqr(ImVec4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImInvLength(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImInvLength",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImInvLength",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImInvLength",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImInvLength",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)ImInvLength((ImVec2 const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFloor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("ImFloor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImFloor",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)ImFloor(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFloor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImFloor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImFloor",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImFloor",1,SWIGTYPE_p_ImVec2);
  }
  
  result = ImFloor((ImVec2 const &)*arg1);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFloor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImFloor__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ImFloor__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImFloor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImFloor(float)\n"
    "    ImFloor(ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImModPositive(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("ImModPositive",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImModPositive",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImModPositive",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)ImModPositive(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDot(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("ImDot",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImDot",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDot",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDot",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDot",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (float)ImDot((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRotate(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRotate",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImRotate",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImRotate",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRotate",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = ImRotate((ImVec2 const &)*arg1,arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLinearSweep(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("ImLinearSweep",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImLinearSweep",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImLinearSweep",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImLinearSweep",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)ImLinearSweep(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImMul(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImMul",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImMul",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImMul",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMul",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImMul",2,SWIGTYPE_p_ImVec2);
  }
  
  result = ImMul((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBezierCalc(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  float arg5 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImBezierCalc",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImBezierCalc",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImBezierCalc",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImBezierCalc",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImBezierCalc",4,"ImVec2 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImBezierCalc",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierCalc",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierCalc",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierCalc",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierCalc",4,SWIGTYPE_p_ImVec2);
  }
  
  arg5 = (float)lua_tonumber(L, 5);
  result = ImBezierCalc((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBezierClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  int arg6 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImBezierClosestPoint",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImBezierClosestPoint",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImBezierClosestPoint",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImBezierClosestPoint",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImBezierClosestPoint",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImBezierClosestPoint",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImBezierClosestPoint",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPoint",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPoint",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPoint",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPoint",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPoint",5,SWIGTYPE_p_ImVec2);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = ImBezierClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBezierClosestPointCasteljau(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  float arg6 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImBezierClosestPointCasteljau",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImBezierClosestPointCasteljau",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImBezierClosestPointCasteljau",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImBezierClosestPointCasteljau",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImBezierClosestPointCasteljau",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImBezierClosestPointCasteljau",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImBezierClosestPointCasteljau",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPointCasteljau",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPointCasteljau",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPointCasteljau",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPointCasteljau",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImBezierClosestPointCasteljau",5,SWIGTYPE_p_ImVec2);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  result = ImBezierClosestPointCasteljau((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImLineClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImLineClosestPoint",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImLineClosestPoint",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImLineClosestPoint",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImLineClosestPoint",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLineClosestPoint",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLineClosestPoint",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImLineClosestPoint",3,SWIGTYPE_p_ImVec2);
  }
  
  result = ImLineClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTriangleContainsPoint(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImTriangleContainsPoint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImTriangleContainsPoint",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImTriangleContainsPoint",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImTriangleContainsPoint",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImTriangleContainsPoint",4,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleContainsPoint",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleContainsPoint",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleContainsPoint",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleContainsPoint",4,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImTriangleContainsPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTriangleClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImTriangleClosestPoint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImTriangleClosestPoint",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImTriangleClosestPoint",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImTriangleClosestPoint",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImTriangleClosestPoint",4,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleClosestPoint",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleClosestPoint",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleClosestPoint",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleClosestPoint",4,SWIGTYPE_p_ImVec2);
  }
  
  result = ImTriangleClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTriangleBarycentricCoords(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  
  SWIG_check_num_args("ImTriangleBarycentricCoords",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImTriangleBarycentricCoords",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImTriangleBarycentricCoords",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImTriangleBarycentricCoords",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImTriangleBarycentricCoords",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImTriangleBarycentricCoords",5,"float &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImTriangleBarycentricCoords",6,"float &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImTriangleBarycentricCoords",7,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImTriangleBarycentricCoords",7,SWIGTYPE_p_float);
  }
  
  ImTriangleBarycentricCoords((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,*arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImTriangleArea(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float result;
  
  SWIG_check_num_args("ImTriangleArea",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImTriangleArea",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImTriangleArea",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImTriangleArea",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleArea",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleArea",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImTriangleArea",3,SWIGTYPE_p_ImVec2);
  }
  
  result = (float)ImTriangleArea((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGetDirQuadrantFromDelta(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGetDirQuadrantFromDelta",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGetDirQuadrantFromDelta",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGetDirQuadrantFromDelta",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (ImGuiDir)ImGetDirQuadrantFromDelta(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec1_x_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec1 *arg1 = (ImVec1 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImVec1::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec1::x",1,"ImVec1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec1::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImVec1_x_set",1,SWIGTYPE_p_ImVec1);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec1_x_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec1 *arg1 = (ImVec1 *) 0 ;
  float result;
  
  SWIG_check_num_args("ImVec1::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec1::x",1,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImVec1_x_get",1,SWIGTYPE_p_ImVec1);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImVec1::ImVec1",0,0)
  result = (ImVec1 *)new ImVec1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImVec1::ImVec1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec1::ImVec1",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (ImVec1 *)new ImVec1(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImVec1__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ImVec1__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImVec1::ImVec1()\n"
    "    ImVec1::ImVec1(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImVec1(void *obj) {
ImVec1 *arg1 = (ImVec1 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec1_attributes[] = {
    { "x", _wrap_ImVec1_x_get, _wrap_ImVec1_x_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec1_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec1_Sf_SwigStatic = {
    "ImVec1",
    swig_ImVec1_Sf_SwigStatic_methods,
    swig_ImVec1_Sf_SwigStatic_attributes,
    swig_ImVec1_Sf_SwigStatic_constants,
    swig_ImVec1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec1_bases[] = {0};
static const char *swig_ImVec1_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec1 = { "ImVec1", "ImVec1", &SWIGTYPE_p_ImVec1,_proxy__wrap_new_ImVec1, swig_delete_ImVec1, swig_ImVec1_methods, swig_ImVec1_attributes, &swig_ImVec1_Sf_SwigStatic, swig_ImVec1_meta, swig_ImVec1_bases, swig_ImVec1_base_names };

static int _wrap_ImVec2ih_x_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2ih *arg1 = (ImVec2ih *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImVec2ih::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2ih::x",1,"ImVec2ih *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2ih::x",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImVec2ih_x_set",1,SWIGTYPE_p_ImVec2ih);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2ih_x_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2ih *arg1 = (ImVec2ih *) 0 ;
  short result;
  
  SWIG_check_num_args("ImVec2ih::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2ih::x",1,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImVec2ih_x_get",1,SWIGTYPE_p_ImVec2ih);
  }
  
  result = (short) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2ih_y_set(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2ih *arg1 = (ImVec2ih *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImVec2ih::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2ih::y",1,"ImVec2ih *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2ih::y",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImVec2ih_y_set",1,SWIGTYPE_p_ImVec2ih);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImVec2ih_y_get(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2ih *arg1 = (ImVec2ih *) 0 ;
  short result;
  
  SWIG_check_num_args("ImVec2ih::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2ih::y",1,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImVec2ih_y_get",1,SWIGTYPE_p_ImVec2ih);
  }
  
  result = (short) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2ih__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImVec2ih::ImVec2ih",0,0)
  result = (ImVec2ih *)new ImVec2ih();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2ih__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  short arg1 ;
  short arg2 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImVec2ih::ImVec2ih",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec2ih::ImVec2ih",1,"short");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2ih::ImVec2ih",2,"short");
  arg1 = (short)lua_tonumber(L, 1);
  arg2 = (short)lua_tonumber(L, 2);
  result = (ImVec2ih *)new ImVec2ih(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2ih__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImVec2ih::ImVec2ih",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec2ih::ImVec2ih",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("new_ImVec2ih",1,SWIGTYPE_p_ImVec2);
  }
  
  result = (ImVec2ih *)new ImVec2ih((ImVec2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImVec2ih(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImVec2ih__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ImVec2ih__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ImVec2ih__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec2ih'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImVec2ih::ImVec2ih()\n"
    "    ImVec2ih::ImVec2ih(short,short)\n"
    "    ImVec2ih::ImVec2ih(ImVec2 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImVec2ih(void *obj) {
ImVec2ih *arg1 = (ImVec2ih *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec2ih(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec2ih);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec2ih_attributes[] = {
    { "x", _wrap_ImVec2ih_x_get, _wrap_ImVec2ih_x_set },
    { "y", _wrap_ImVec2ih_y_get, _wrap_ImVec2ih_y_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec2ih_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec2ih_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec2ih_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec2ih_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec2ih_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec2ih_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec2ih_Sf_SwigStatic = {
    "ImVec2ih",
    swig_ImVec2ih_Sf_SwigStatic_methods,
    swig_ImVec2ih_Sf_SwigStatic_attributes,
    swig_ImVec2ih_Sf_SwigStatic_constants,
    swig_ImVec2ih_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec2ih_bases[] = {0};
static const char *swig_ImVec2ih_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec2ih = { "ImVec2ih", "ImVec2ih", &SWIGTYPE_p_ImVec2ih,_proxy__wrap_new_ImVec2ih, swig_delete_ImVec2ih, swig_ImVec2ih_methods, swig_ImVec2ih_attributes, &swig_ImVec2ih_Sf_SwigStatic, swig_ImVec2ih_meta, swig_ImVec2ih_bases, swig_ImVec2ih_base_names };

static int _wrap_ImRect_Min_set(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImRect::Min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Min",1,"ImRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImRect::Min",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Min_set",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Min_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Min = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Min_get(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImRect::Min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Min",1,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Min_get",1,SWIGTYPE_p_ImRect);
  }
  
  result = (ImVec2 *)& ((arg1)->Min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Max_set(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImRect::Max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Max",1,"ImRect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImRect::Max",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Max_set",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Max_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Max = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Max_get(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImRect::Max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Max",1,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Max_get",1,SWIGTYPE_p_ImRect);
  }
  
  result = (ImVec2 *)& ((arg1)->Max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImRect::ImRect",0,0)
  result = (ImRect *)new ImRect();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImRect::ImRect",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImRect::ImRect",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::ImRect",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("new_ImRect",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("new_ImRect",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (ImRect *)new ImRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec4 *arg1 = 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImRect::ImRect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImRect::ImRect",1,"ImVec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("new_ImRect",1,SWIGTYPE_p_ImVec4);
  }
  
  result = (ImRect *)new ImRect((ImVec4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImRect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImRect::ImRect",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImRect::ImRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImRect::ImRect",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImRect::ImRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImRect::ImRect",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ImRect *)new ImRect(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImRect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImRect__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ImRect__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ImRect__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ImRect__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImRect::ImRect()\n"
    "    ImRect::ImRect(ImVec2 const &,ImVec2 const &)\n"
    "    ImRect::ImRect(ImVec4 const &)\n"
    "    ImRect::ImRect(float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ImRect_GetCenter(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetCenter",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetCenter",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetCenter();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetSize(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetSize",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetSize",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetSize();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetWidth(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  float result;
  
  SWIG_check_num_args("ImRect::GetWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetWidth",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetWidth",1,SWIGTYPE_p_ImRect);
  }
  
  result = (float)((ImRect const *)arg1)->GetWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetHeight(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  float result;
  
  SWIG_check_num_args("ImRect::GetHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetHeight",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetHeight",1,SWIGTYPE_p_ImRect);
  }
  
  result = (float)((ImRect const *)arg1)->GetHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetTL(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetTL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetTL",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetTL",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetTL();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetTR(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetTR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetTR",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetTR",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetTR();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetBL(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetBL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetBL",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetBL",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetBL();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_GetBR(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImRect::GetBR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::GetBR",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_GetBR",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->GetBR();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Contains__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImRect::Contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Contains",1,"ImRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Contains",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Contains",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Contains",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)((ImRect const *)arg1)->Contains((ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Contains__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImRect *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImRect::Contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Contains",1,"ImRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Contains",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Contains",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Contains",2,SWIGTYPE_p_ImRect);
  }
  
  result = (bool)((ImRect const *)arg1)->Contains((ImRect const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Contains(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImRect_Contains__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImRect_Contains__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImRect_Contains'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImRect::Contains(ImVec2 const &) const\n"
    "    ImRect::Contains(ImRect const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImRect_Overlaps(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImRect *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImRect::Overlaps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Overlaps",1,"ImRect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Overlaps",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Overlaps",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Overlaps",2,SWIGTYPE_p_ImRect);
  }
  
  result = (bool)((ImRect const *)arg1)->Overlaps((ImRect const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::Add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Add",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Add",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Add",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Add",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->Add((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImRect *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::Add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Add",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Add",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Add",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Add",2,SWIGTYPE_p_ImRect);
  }
  
  (arg1)->Add((ImRect const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImRect_Add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImRect_Add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImRect_Add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImRect::Add(ImVec2 const &)\n"
    "    ImRect::Add(ImRect const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImRect_Expand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImRect::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Expand",1,"ImRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImRect::Expand",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Expand",1,SWIGTYPE_p_ImRect);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->Expand(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Expand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Expand",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Expand",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Expand",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Expand",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->Expand((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Expand(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImRect_Expand__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImRect_Expand__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImRect_Expand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImRect::Expand(float const)\n"
    "    ImRect::Expand(ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImRect_Translate(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Translate",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::Translate",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Translate",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImRect_Translate",2,SWIGTYPE_p_ImVec2);
  }
  
  (arg1)->Translate((ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_TranslateX(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImRect::TranslateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::TranslateX",1,"ImRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImRect::TranslateX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_TranslateX",1,SWIGTYPE_p_ImRect);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->TranslateX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_TranslateY(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImRect::TranslateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::TranslateY",1,"ImRect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImRect::TranslateY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_TranslateY",1,SWIGTYPE_p_ImRect);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->TranslateY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_ClipWith(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImRect *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::ClipWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::ClipWith",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::ClipWith",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_ClipWith",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_ClipWith",2,SWIGTYPE_p_ImRect);
  }
  
  (arg1)->ClipWith((ImRect const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_ClipWithFull(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImRect *arg2 = 0 ;
  
  SWIG_check_num_args("ImRect::ClipWithFull",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::ClipWithFull",1,"ImRect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImRect::ClipWithFull",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_ClipWithFull",1,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_ClipWithFull",2,SWIGTYPE_p_ImRect);
  }
  
  (arg1)->ClipWithFull((ImRect const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_Floor(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImRect::Floor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::Floor",1,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_Floor",1,SWIGTYPE_p_ImRect);
  }
  
  (arg1)->Floor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_IsInverted(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImRect::IsInverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::IsInverted",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_IsInverted",1,SWIGTYPE_p_ImRect);
  }
  
  result = (bool)((ImRect const *)arg1)->IsInverted();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImRect_ToVec4(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = (ImRect *) 0 ;
  ImVec4 result;
  
  SWIG_check_num_args("ImRect::ToVec4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImRect::ToVec4",1,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImRect_ToVec4",1,SWIGTYPE_p_ImRect);
  }
  
  result = ((ImRect const *)arg1)->ToVec4();
  {
    ImVec4 * resultptr = new ImVec4((const ImVec4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImRect(void *obj) {
ImRect *arg1 = (ImRect *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImRect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImRect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImRect_attributes[] = {
    { "Min", _wrap_ImRect_Min_get, _wrap_ImRect_Min_set },
    { "Max", _wrap_ImRect_Max_get, _wrap_ImRect_Max_set },
    {0,0,0}
};
static swig_lua_method swig_ImRect_methods[]= {
    { "GetCenter", _wrap_ImRect_GetCenter},
    { "GetSize", _wrap_ImRect_GetSize},
    { "GetWidth", _wrap_ImRect_GetWidth},
    { "GetHeight", _wrap_ImRect_GetHeight},
    { "GetTL", _wrap_ImRect_GetTL},
    { "GetTR", _wrap_ImRect_GetTR},
    { "GetBL", _wrap_ImRect_GetBL},
    { "GetBR", _wrap_ImRect_GetBR},
    { "Contains", _wrap_ImRect_Contains},
    { "Overlaps", _wrap_ImRect_Overlaps},
    { "Add", _wrap_ImRect_Add},
    { "Expand", _wrap_ImRect_Expand},
    { "Translate", _wrap_ImRect_Translate},
    { "TranslateX", _wrap_ImRect_TranslateX},
    { "TranslateY", _wrap_ImRect_TranslateY},
    { "ClipWith", _wrap_ImRect_ClipWith},
    { "ClipWithFull", _wrap_ImRect_ClipWithFull},
    { "Floor", _wrap_ImRect_Floor},
    { "IsInverted", _wrap_ImRect_IsInverted},
    { "ToVec4", _wrap_ImRect_ToVec4},
    {0,0}
};
static swig_lua_method swig_ImRect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImRect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImRect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImRect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImRect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImRect_Sf_SwigStatic = {
    "ImRect",
    swig_ImRect_Sf_SwigStatic_methods,
    swig_ImRect_Sf_SwigStatic_attributes,
    swig_ImRect_Sf_SwigStatic_constants,
    swig_ImRect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImRect_bases[] = {0};
static const char *swig_ImRect_base_names[] = {0};
static swig_lua_class _wrap_class_ImRect = { "ImRect", "ImRect", &SWIGTYPE_p_ImRect,_proxy__wrap_new_ImRect, swig_delete_ImRect, swig_ImRect_methods, swig_ImRect_attributes, &swig_ImRect_Sf_SwigStatic, swig_ImRect_meta, swig_ImRect_bases, swig_ImRect_base_names };

static int _wrap_ImBitArrayTestBit(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("ImBitArrayTestBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitArrayTestBit",1,"ImU32 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitArrayTestBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImBitArrayTestBit",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)ImBitArrayTestBit((unsigned int const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitArrayClearBit(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImBitArrayClearBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitArrayClearBit",1,"ImU32 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitArrayClearBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImBitArrayClearBit",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ImBitArrayClearBit(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitArraySetBit(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImBitArraySetBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitArraySetBit",1,"ImU32 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitArraySetBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImBitArraySetBit",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ImBitArraySetBit(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitArraySetBitRange(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ImBitArraySetBitRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitArraySetBitRange",1,"ImU32 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitArraySetBitRange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImBitArraySetBitRange",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImBitArraySetBitRange",1,SWIGTYPE_p_unsigned_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  ImBitArraySetBitRange(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_Storage_set(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  ImVector< ImU32 > *arg2 = (ImVector< ImU32 > *) 0 ;
  
  SWIG_check_num_args("ImBitVector::Storage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::Storage",1,"ImBitVector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImBitVector::Storage",2,"ImVector< ImU32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_Storage_set",1,SWIGTYPE_p_ImBitVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("ImBitVector_Storage_set",2,SWIGTYPE_p_ImVectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->Storage = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_Storage_get(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  ImVector< ImU32 > *result = 0 ;
  
  SWIG_check_num_args("ImBitVector::Storage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::Storage",1,"ImBitVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_Storage_get",1,SWIGTYPE_p_ImBitVector);
  }
  
  result = (ImVector< ImU32 > *)& ((arg1)->Storage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_Create(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImBitVector::Create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::Create",1,"ImBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitVector::Create",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_Create",1,SWIGTYPE_p_ImBitVector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Create(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  
  SWIG_check_num_args("ImBitVector::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::Clear",1,"ImBitVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_Clear",1,SWIGTYPE_p_ImBitVector);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_TestBit(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("ImBitVector::TestBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::TestBit",1,"ImBitVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitVector::TestBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_TestBit",1,SWIGTYPE_p_ImBitVector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((ImBitVector const *)arg1)->TestBit(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_SetBit(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImBitVector::SetBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::SetBit",1,"ImBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitVector::SetBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_SetBit",1,SWIGTYPE_p_ImBitVector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetBit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImBitVector_ClearBit(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *arg1 = (ImBitVector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImBitVector::ClearBit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImBitVector::ClearBit",1,"ImBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImBitVector::ClearBit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImBitVector,0))){
    SWIG_fail_ptr("ImBitVector_ClearBit",1,SWIGTYPE_p_ImBitVector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->ClearBit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImBitVector(lua_State* L) {
  int SWIG_arg = 0;
  ImBitVector *result = 0 ;
  
  SWIG_check_num_args("ImBitVector::ImBitVector",0,0)
  result = (ImBitVector *)new ImBitVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImBitVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImBitVector(void *obj) {
ImBitVector *arg1 = (ImBitVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImBitVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImBitVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImBitVector_attributes[] = {
    { "Storage", _wrap_ImBitVector_Storage_get, _wrap_ImBitVector_Storage_set },
    {0,0,0}
};
static swig_lua_method swig_ImBitVector_methods[]= {
    { "Create", _wrap_ImBitVector_Create},
    { "Clear", _wrap_ImBitVector_Clear},
    { "TestBit", _wrap_ImBitVector_TestBit},
    { "SetBit", _wrap_ImBitVector_SetBit},
    { "ClearBit", _wrap_ImBitVector_ClearBit},
    {0,0}
};
static swig_lua_method swig_ImBitVector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImBitVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImBitVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImBitVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImBitVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImBitVector_Sf_SwigStatic = {
    "ImBitVector",
    swig_ImBitVector_Sf_SwigStatic_methods,
    swig_ImBitVector_Sf_SwigStatic_attributes,
    swig_ImBitVector_Sf_SwigStatic_constants,
    swig_ImBitVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImBitVector_bases[] = {0};
static const char *swig_ImBitVector_base_names[] = {0};
static swig_lua_class _wrap_class_ImBitVector = { "ImBitVector", "ImBitVector", &SWIGTYPE_p_ImBitVector,_proxy__wrap_new_ImBitVector, swig_delete_ImBitVector, swig_ImBitVector_methods, swig_ImBitVector_attributes, &swig_ImBitVector_Sf_SwigStatic, swig_ImBitVector_meta, swig_ImBitVector_bases, swig_ImBitVector_base_names };

static int _wrap_ImDrawListSharedData_TexUvWhitePixel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::TexUvWhitePixel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::TexUvWhitePixel",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::TexUvWhitePixel",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvWhitePixel_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvWhitePixel_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->TexUvWhitePixel = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_TexUvWhitePixel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::TexUvWhitePixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::TexUvWhitePixel",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvWhitePixel_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImVec2 *)& ((arg1)->TexUvWhitePixel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_Font_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::Font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::Font",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::Font",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_Font_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawListSharedData_Font_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->Font = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_Font_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::Font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::Font",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_Font_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImFont *) ((arg1)->Font);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_FontSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::FontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::FontSize",1,"ImDrawListSharedData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSharedData::FontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_FontSize_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_FontSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImDrawListSharedData::FontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::FontSize",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_FontSize_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (float) ((arg1)->FontSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CurveTessellationTol_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::CurveTessellationTol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CurveTessellationTol",1,"ImDrawListSharedData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSharedData::CurveTessellationTol",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CurveTessellationTol_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurveTessellationTol = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CurveTessellationTol_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImDrawListSharedData::CurveTessellationTol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CurveTessellationTol",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CurveTessellationTol_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (float) ((arg1)->CurveTessellationTol);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CircleSegmentMaxError_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::CircleSegmentMaxError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentMaxError",1,"ImDrawListSharedData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentMaxError",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CircleSegmentMaxError_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CircleSegmentMaxError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CircleSegmentMaxError_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImDrawListSharedData::CircleSegmentMaxError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentMaxError",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CircleSegmentMaxError_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (float) ((arg1)->CircleSegmentMaxError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_ClipRectFullscreen_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::ClipRectFullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::ClipRectFullscreen",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::ClipRectFullscreen",2,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ClipRectFullscreen_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ClipRectFullscreen_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->ClipRectFullscreen = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_ClipRectFullscreen_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::ClipRectFullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::ClipRectFullscreen",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ClipRectFullscreen_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImVec4 *)& ((arg1)->ClipRectFullscreen);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_InitialFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawListFlags arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::InitialFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::InitialFlags",1,"ImDrawListSharedData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSharedData::InitialFlags",2,"ImDrawListFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_InitialFlags_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  arg2 = (ImDrawListFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->InitialFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_InitialFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawListFlags result;
  
  SWIG_check_num_args("ImDrawListSharedData::InitialFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::InitialFlags",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_InitialFlags_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImDrawListFlags) ((arg1)->InitialFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_ArcFastVtx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec2 *arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::ArcFastVtx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::ArcFastVtx",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::ArcFastVtx",2,"ImVec2 [12*1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ArcFastVtx_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ArcFastVtx_set",2,SWIGTYPE_p_ImVec2);
  }
  
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->ArcFastVtx;
    for (ii = 0; ii < (size_t)12*1; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_ArcFastVtx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::ArcFastVtx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::ArcFastVtx",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_ArcFastVtx_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImVec2 *)(ImVec2 *) ((arg1)->ArcFastVtx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CircleSegmentCounts_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImU8 *arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::CircleSegmentCounts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentCounts",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentCounts",2,"ImU8 [64]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CircleSegmentCounts_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CircleSegmentCounts_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    ImU8 *b = (ImU8 *) arg1->CircleSegmentCounts;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((ImU8 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_CircleSegmentCounts_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImU8 *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::CircleSegmentCounts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::CircleSegmentCounts",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_CircleSegmentCounts_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImU8 *)(ImU8 *) ((arg1)->CircleSegmentCounts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_TexUvLines_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::TexUvLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::TexUvLines",1,"ImDrawListSharedData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSharedData::TexUvLines",2,"ImVec4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvLines_set",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvLines_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->TexUvLines = (ImVec4 const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_TexUvLines_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::TexUvLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::TexUvLines",1,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_TexUvLines_get",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  result = (ImVec4 *) ((arg1)->TexUvLines);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawListSharedData(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *result = 0 ;
  
  SWIG_check_num_args("ImDrawListSharedData::ImDrawListSharedData",0,0)
  result = (ImDrawListSharedData *)new ImDrawListSharedData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawListSharedData_SetCircleSegmentMaxError(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImDrawListSharedData::SetCircleSegmentMaxError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSharedData::SetCircleSegmentMaxError",1,"ImDrawListSharedData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSharedData::SetCircleSegmentMaxError",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImDrawListSharedData_SetCircleSegmentMaxError",1,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCircleSegmentMaxError(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawListSharedData(void *obj) {
ImDrawListSharedData *arg1 = (ImDrawListSharedData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawListSharedData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawListSharedData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawListSharedData_attributes[] = {
    { "TexUvWhitePixel", _wrap_ImDrawListSharedData_TexUvWhitePixel_get, _wrap_ImDrawListSharedData_TexUvWhitePixel_set },
    { "Font", _wrap_ImDrawListSharedData_Font_get, _wrap_ImDrawListSharedData_Font_set },
    { "FontSize", _wrap_ImDrawListSharedData_FontSize_get, _wrap_ImDrawListSharedData_FontSize_set },
    { "CurveTessellationTol", _wrap_ImDrawListSharedData_CurveTessellationTol_get, _wrap_ImDrawListSharedData_CurveTessellationTol_set },
    { "CircleSegmentMaxError", _wrap_ImDrawListSharedData_CircleSegmentMaxError_get, _wrap_ImDrawListSharedData_CircleSegmentMaxError_set },
    { "ClipRectFullscreen", _wrap_ImDrawListSharedData_ClipRectFullscreen_get, _wrap_ImDrawListSharedData_ClipRectFullscreen_set },
    { "InitialFlags", _wrap_ImDrawListSharedData_InitialFlags_get, _wrap_ImDrawListSharedData_InitialFlags_set },
    { "ArcFastVtx", _wrap_ImDrawListSharedData_ArcFastVtx_get, _wrap_ImDrawListSharedData_ArcFastVtx_set },
    { "CircleSegmentCounts", _wrap_ImDrawListSharedData_CircleSegmentCounts_get, _wrap_ImDrawListSharedData_CircleSegmentCounts_set },
    { "TexUvLines", _wrap_ImDrawListSharedData_TexUvLines_get, _wrap_ImDrawListSharedData_TexUvLines_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawListSharedData_methods[]= {
    { "SetCircleSegmentMaxError", _wrap_ImDrawListSharedData_SetCircleSegmentMaxError},
    {0,0}
};
static swig_lua_method swig_ImDrawListSharedData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawListSharedData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawListSharedData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawListSharedData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawListSharedData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawListSharedData_Sf_SwigStatic = {
    "ImDrawListSharedData",
    swig_ImDrawListSharedData_Sf_SwigStatic_methods,
    swig_ImDrawListSharedData_Sf_SwigStatic_attributes,
    swig_ImDrawListSharedData_Sf_SwigStatic_constants,
    swig_ImDrawListSharedData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawListSharedData_bases[] = {0};
static const char *swig_ImDrawListSharedData_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawListSharedData = { "ImDrawListSharedData", "ImDrawListSharedData", &SWIGTYPE_p_ImDrawListSharedData,_proxy__wrap_new_ImDrawListSharedData, swig_delete_ImDrawListSharedData, swig_ImDrawListSharedData_methods, swig_ImDrawListSharedData_attributes, &swig_ImDrawListSharedData_Sf_SwigStatic, swig_ImDrawListSharedData_meta, swig_ImDrawListSharedData_bases, swig_ImDrawListSharedData_base_names };

static int _wrap_ImDrawDataBuilder_Layers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) 0 ;
  ImVector< ImDrawList * > *arg2 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::Layers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawDataBuilder::Layers",1,"ImDrawDataBuilder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawDataBuilder::Layers",2,"ImVector< ImDrawList * > [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_Layers_set",1,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawList_p_t,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_Layers_set",2,SWIGTYPE_p_ImVectorT_ImDrawList_p_t);
  }
  
  {
    size_t ii;
    ImVector< ImDrawList * > *b = (ImVector< ImDrawList * > *) arg1->Layers;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((ImVector< ImDrawList * > *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawDataBuilder_Layers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) 0 ;
  ImVector< ImDrawList * > *result = 0 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::Layers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawDataBuilder::Layers",1,"ImDrawDataBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_Layers_get",1,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  result = (ImVector< ImDrawList * > *)(ImVector< ImDrawList * > *) ((arg1)->Layers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawList_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawDataBuilder_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) 0 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawDataBuilder::Clear",1,"ImDrawDataBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_Clear",1,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawDataBuilder_ClearFreeMemory(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) 0 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::ClearFreeMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawDataBuilder::ClearFreeMemory",1,"ImDrawDataBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_ClearFreeMemory",1,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  (arg1)->ClearFreeMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImDrawDataBuilder_FlattenIntoSingleLayer(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) 0 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::FlattenIntoSingleLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawDataBuilder::FlattenIntoSingleLayer",1,"ImDrawDataBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImDrawDataBuilder_FlattenIntoSingleLayer",1,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  (arg1)->FlattenIntoSingleLayer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImDrawDataBuilder(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawDataBuilder *result = 0 ;
  
  SWIG_check_num_args("ImDrawDataBuilder::ImDrawDataBuilder",0,0)
  result = (ImDrawDataBuilder *)new ImDrawDataBuilder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawDataBuilder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImDrawDataBuilder(void *obj) {
ImDrawDataBuilder *arg1 = (ImDrawDataBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawDataBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawDataBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawDataBuilder_attributes[] = {
    { "Layers", _wrap_ImDrawDataBuilder_Layers_get, _wrap_ImDrawDataBuilder_Layers_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawDataBuilder_methods[]= {
    { "Clear", _wrap_ImDrawDataBuilder_Clear},
    { "ClearFreeMemory", _wrap_ImDrawDataBuilder_ClearFreeMemory},
    { "FlattenIntoSingleLayer", _wrap_ImDrawDataBuilder_FlattenIntoSingleLayer},
    {0,0}
};
static swig_lua_method swig_ImDrawDataBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawDataBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawDataBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawDataBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawDataBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawDataBuilder_Sf_SwigStatic = {
    "ImDrawDataBuilder",
    swig_ImDrawDataBuilder_Sf_SwigStatic_methods,
    swig_ImDrawDataBuilder_Sf_SwigStatic_attributes,
    swig_ImDrawDataBuilder_Sf_SwigStatic_constants,
    swig_ImDrawDataBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawDataBuilder_bases[] = {0};
static const char *swig_ImDrawDataBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawDataBuilder = { "ImDrawDataBuilder", "ImDrawDataBuilder", &SWIGTYPE_p_ImDrawDataBuilder,_proxy__wrap_new_ImDrawDataBuilder, swig_delete_ImDrawDataBuilder, swig_ImDrawDataBuilder_methods, swig_ImDrawDataBuilder_attributes, &swig_ImDrawDataBuilder_Sf_SwigStatic, swig_ImDrawDataBuilder_meta, swig_ImDrawDataBuilder_bases, swig_ImDrawDataBuilder_base_names };

static int _wrap_ImGuiDataTypeTempStorage_Data_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeTempStorage *arg1 = (ImGuiDataTypeTempStorage *) 0 ;
  ImU8 *arg2 ;
  
  SWIG_check_num_args("ImGuiDataTypeTempStorage::Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeTempStorage::Data",1,"ImGuiDataTypeTempStorage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDataTypeTempStorage::Data",2,"ImU8 [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeTempStorage,0))){
    SWIG_fail_ptr("ImGuiDataTypeTempStorage_Data_set",1,SWIGTYPE_p_ImGuiDataTypeTempStorage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImGuiDataTypeTempStorage_Data_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    ImU8 *b = (ImU8 *) arg1->Data;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((ImU8 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeTempStorage_Data_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeTempStorage *arg1 = (ImGuiDataTypeTempStorage *) 0 ;
  ImU8 *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeTempStorage::Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeTempStorage::Data",1,"ImGuiDataTypeTempStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeTempStorage,0))){
    SWIG_fail_ptr("ImGuiDataTypeTempStorage_Data_get",1,SWIGTYPE_p_ImGuiDataTypeTempStorage);
  }
  
  result = (ImU8 *)(ImU8 *) ((arg1)->Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiDataTypeTempStorage(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeTempStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeTempStorage::ImGuiDataTypeTempStorage",0,0)
  result = (ImGuiDataTypeTempStorage *)new ImGuiDataTypeTempStorage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDataTypeTempStorage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiDataTypeTempStorage(void *obj) {
ImGuiDataTypeTempStorage *arg1 = (ImGuiDataTypeTempStorage *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiDataTypeTempStorage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiDataTypeTempStorage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiDataTypeTempStorage_attributes[] = {
    { "Data", _wrap_ImGuiDataTypeTempStorage_Data_get, _wrap_ImGuiDataTypeTempStorage_Data_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiDataTypeTempStorage_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiDataTypeTempStorage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiDataTypeTempStorage_Sf_SwigStatic = {
    "ImGuiDataTypeTempStorage",
    swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_methods,
    swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_attributes,
    swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_constants,
    swig_ImGuiDataTypeTempStorage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiDataTypeTempStorage_bases[] = {0};
static const char *swig_ImGuiDataTypeTempStorage_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiDataTypeTempStorage = { "ImGuiDataTypeTempStorage", "ImGuiDataTypeTempStorage", &SWIGTYPE_p_ImGuiDataTypeTempStorage,_proxy__wrap_new_ImGuiDataTypeTempStorage, swig_delete_ImGuiDataTypeTempStorage, swig_ImGuiDataTypeTempStorage_methods, swig_ImGuiDataTypeTempStorage_attributes, &swig_ImGuiDataTypeTempStorage_Sf_SwigStatic, swig_ImGuiDataTypeTempStorage_meta, swig_ImGuiDataTypeTempStorage_bases, swig_ImGuiDataTypeTempStorage_base_names };

static int _wrap_ImGuiDataTypeInfo_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::Size",1,"ImGuiDataTypeInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDataTypeInfo::Size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_Size_set",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->Size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::Size",1,"ImGuiDataTypeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_Size_get",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  result =  ((arg1)->Size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_Name_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::Name",1,"ImGuiDataTypeInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiDataTypeInfo::Name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_Name_set",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->Name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Name, (const char *)arg2);
    } else {
      arg1->Name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_Name_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::Name",1,"ImGuiDataTypeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_Name_get",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  result = (char *) ((arg1)->Name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_PrintFmt_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::PrintFmt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::PrintFmt",1,"ImGuiDataTypeInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiDataTypeInfo::PrintFmt",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_PrintFmt_set",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->PrintFmt = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->PrintFmt, (const char *)arg2);
    } else {
      arg1->PrintFmt = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_PrintFmt_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::PrintFmt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::PrintFmt",1,"ImGuiDataTypeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_PrintFmt_get",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  result = (char *) ((arg1)->PrintFmt);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_ScanFmt_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::ScanFmt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::ScanFmt",1,"ImGuiDataTypeInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiDataTypeInfo::ScanFmt",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_ScanFmt_set",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->ScanFmt = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ScanFmt, (const char *)arg2);
    } else {
      arg1->ScanFmt = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDataTypeInfo_ScanFmt_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::ScanFmt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDataTypeInfo::ScanFmt",1,"ImGuiDataTypeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDataTypeInfo,0))){
    SWIG_fail_ptr("ImGuiDataTypeInfo_ScanFmt_get",1,SWIGTYPE_p_ImGuiDataTypeInfo);
  }
  
  result = (char *) ((arg1)->ScanFmt);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiDataTypeInfo(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataTypeInfo *result = 0 ;
  
  SWIG_check_num_args("ImGuiDataTypeInfo::ImGuiDataTypeInfo",0,0)
  result = (ImGuiDataTypeInfo *)new ImGuiDataTypeInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDataTypeInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiDataTypeInfo(void *obj) {
ImGuiDataTypeInfo *arg1 = (ImGuiDataTypeInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiDataTypeInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiDataTypeInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiDataTypeInfo_attributes[] = {
    { "Size", _wrap_ImGuiDataTypeInfo_Size_get, _wrap_ImGuiDataTypeInfo_Size_set },
    { "Name", _wrap_ImGuiDataTypeInfo_Name_get, _wrap_ImGuiDataTypeInfo_Name_set },
    { "PrintFmt", _wrap_ImGuiDataTypeInfo_PrintFmt_get, _wrap_ImGuiDataTypeInfo_PrintFmt_set },
    { "ScanFmt", _wrap_ImGuiDataTypeInfo_ScanFmt_get, _wrap_ImGuiDataTypeInfo_ScanFmt_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiDataTypeInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiDataTypeInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiDataTypeInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiDataTypeInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiDataTypeInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiDataTypeInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiDataTypeInfo_Sf_SwigStatic = {
    "ImGuiDataTypeInfo",
    swig_ImGuiDataTypeInfo_Sf_SwigStatic_methods,
    swig_ImGuiDataTypeInfo_Sf_SwigStatic_attributes,
    swig_ImGuiDataTypeInfo_Sf_SwigStatic_constants,
    swig_ImGuiDataTypeInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiDataTypeInfo_bases[] = {0};
static const char *swig_ImGuiDataTypeInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiDataTypeInfo = { "ImGuiDataTypeInfo", "ImGuiDataTypeInfo", &SWIGTYPE_p_ImGuiDataTypeInfo,_proxy__wrap_new_ImGuiDataTypeInfo, swig_delete_ImGuiDataTypeInfo, swig_ImGuiDataTypeInfo_methods, swig_ImGuiDataTypeInfo_attributes, &swig_ImGuiDataTypeInfo_Sf_SwigStatic, swig_ImGuiDataTypeInfo_meta, swig_ImGuiDataTypeInfo_bases, swig_ImGuiDataTypeInfo_base_names };

static int _wrap_ImGuiColorMod_Col_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorMod *arg1 = (ImGuiColorMod *) 0 ;
  ImGuiCol arg2 ;
  
  SWIG_check_num_args("ImGuiColorMod::Col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColorMod::Col",1,"ImGuiColorMod *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColorMod::Col",2,"ImGuiCol");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColorMod,0))){
    SWIG_fail_ptr("ImGuiColorMod_Col_set",1,SWIGTYPE_p_ImGuiColorMod);
  }
  
  arg2 = (ImGuiCol)lua_tonumber(L, 2);
  if (arg1) (arg1)->Col = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColorMod_Col_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorMod *arg1 = (ImGuiColorMod *) 0 ;
  ImGuiCol result;
  
  SWIG_check_num_args("ImGuiColorMod::Col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColorMod::Col",1,"ImGuiColorMod *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColorMod,0))){
    SWIG_fail_ptr("ImGuiColorMod_Col_get",1,SWIGTYPE_p_ImGuiColorMod);
  }
  
  result = (ImGuiCol) ((arg1)->Col);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColorMod_BackupValue_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorMod *arg1 = (ImGuiColorMod *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImGuiColorMod::BackupValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColorMod::BackupValue",1,"ImGuiColorMod *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColorMod::BackupValue",2,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColorMod,0))){
    SWIG_fail_ptr("ImGuiColorMod_BackupValue_set",1,SWIGTYPE_p_ImGuiColorMod);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImGuiColorMod_BackupValue_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->BackupValue = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColorMod_BackupValue_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorMod *arg1 = (ImGuiColorMod *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImGuiColorMod::BackupValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColorMod::BackupValue",1,"ImGuiColorMod *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColorMod,0))){
    SWIG_fail_ptr("ImGuiColorMod_BackupValue_get",1,SWIGTYPE_p_ImGuiColorMod);
  }
  
  result = (ImVec4 *)& ((arg1)->BackupValue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiColorMod(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColorMod *result = 0 ;
  
  SWIG_check_num_args("ImGuiColorMod::ImGuiColorMod",0,0)
  result = (ImGuiColorMod *)new ImGuiColorMod();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiColorMod,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiColorMod(void *obj) {
ImGuiColorMod *arg1 = (ImGuiColorMod *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiColorMod(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiColorMod);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiColorMod_attributes[] = {
    { "Col", _wrap_ImGuiColorMod_Col_get, _wrap_ImGuiColorMod_Col_set },
    { "BackupValue", _wrap_ImGuiColorMod_BackupValue_get, _wrap_ImGuiColorMod_BackupValue_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiColorMod_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiColorMod_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiColorMod_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiColorMod_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiColorMod_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiColorMod_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiColorMod_Sf_SwigStatic = {
    "ImGuiColorMod",
    swig_ImGuiColorMod_Sf_SwigStatic_methods,
    swig_ImGuiColorMod_Sf_SwigStatic_attributes,
    swig_ImGuiColorMod_Sf_SwigStatic_constants,
    swig_ImGuiColorMod_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiColorMod_bases[] = {0};
static const char *swig_ImGuiColorMod_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiColorMod = { "ImGuiColorMod", "ImGuiColorMod", &SWIGTYPE_p_ImGuiColorMod,_proxy__wrap_new_ImGuiColorMod, swig_delete_ImGuiColorMod, swig_ImGuiColorMod_methods, swig_ImGuiColorMod_attributes, &swig_ImGuiColorMod_Sf_SwigStatic, swig_ImGuiColorMod_meta, swig_ImGuiColorMod_bases, swig_ImGuiColorMod_base_names };

static int _wrap_ImGuiStyleMod_VarIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleMod *arg1 = (ImGuiStyleMod *) 0 ;
  ImGuiStyleVar arg2 ;
  
  SWIG_check_num_args("ImGuiStyleMod::VarIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyleMod::VarIdx",1,"ImGuiStyleMod *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyleMod::VarIdx",2,"ImGuiStyleVar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyleMod,0))){
    SWIG_fail_ptr("ImGuiStyleMod_VarIdx_set",1,SWIGTYPE_p_ImGuiStyleMod);
  }
  
  arg2 = (ImGuiStyleVar)lua_tonumber(L, 2);
  if (arg1) (arg1)->VarIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiStyleMod_VarIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleMod *arg1 = (ImGuiStyleMod *) 0 ;
  ImGuiStyleVar result;
  
  SWIG_check_num_args("ImGuiStyleMod::VarIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyleMod::VarIdx",1,"ImGuiStyleMod *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyleMod,0))){
    SWIG_fail_ptr("ImGuiStyleMod_VarIdx_get",1,SWIGTYPE_p_ImGuiStyleMod);
  }
  
  result = (ImGuiStyleVar) ((arg1)->VarIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStyleMod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleVar arg1 ;
  int arg2 ;
  ImGuiStyleMod *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyleMod::ImGuiStyleMod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",1,"ImGuiStyleVar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",2,"int");
  arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImGuiStyleMod *)new ImGuiStyleMod(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyleMod,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStyleMod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleVar arg1 ;
  float arg2 ;
  ImGuiStyleMod *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyleMod::ImGuiStyleMod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",1,"ImGuiStyleVar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",2,"float");
  arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (ImGuiStyleMod *)new ImGuiStyleMod(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyleMod,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStyleMod__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiStyleVar arg1 ;
  ImVec2 arg2 ;
  ImVec2 *argp2 ;
  ImGuiStyleMod *result = 0 ;
  
  SWIG_check_num_args("ImGuiStyleMod::ImGuiStyleMod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",1,"ImGuiStyleVar");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGuiStyleMod::ImGuiStyleMod",2,"ImVec2");
  arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("new_ImGuiStyleMod",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  result = (ImGuiStyleMod *)new ImGuiStyleMod(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyleMod,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiStyleMod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ImGuiStyleMod__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ImGuiStyleMod__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ImGuiStyleMod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiStyleMod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiStyleMod::ImGuiStyleMod(ImGuiStyleVar,int)\n"
    "    ImGuiStyleMod::ImGuiStyleMod(ImGuiStyleVar,float)\n"
    "    ImGuiStyleMod::ImGuiStyleMod(ImGuiStyleVar,ImVec2)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImGuiStyleMod(void *obj) {
ImGuiStyleMod *arg1 = (ImGuiStyleMod *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStyleMod(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStyleMod);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStyleMod_attributes[] = {
    { "VarIdx", _wrap_ImGuiStyleMod_VarIdx_get, _wrap_ImGuiStyleMod_VarIdx_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStyleMod_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiStyleMod_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStyleMod_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStyleMod_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStyleMod_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStyleMod_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStyleMod_Sf_SwigStatic = {
    "ImGuiStyleMod",
    swig_ImGuiStyleMod_Sf_SwigStatic_methods,
    swig_ImGuiStyleMod_Sf_SwigStatic_attributes,
    swig_ImGuiStyleMod_Sf_SwigStatic_constants,
    swig_ImGuiStyleMod_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStyleMod_bases[] = {0};
static const char *swig_ImGuiStyleMod_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStyleMod = { "ImGuiStyleMod", "ImGuiStyleMod", &SWIGTYPE_p_ImGuiStyleMod,_proxy__wrap_new_ImGuiStyleMod, swig_delete_ImGuiStyleMod, swig_ImGuiStyleMod_methods, swig_ImGuiStyleMod_attributes, &swig_ImGuiStyleMod_Sf_SwigStatic, swig_ImGuiStyleMod_meta, swig_ImGuiStyleMod_bases, swig_ImGuiStyleMod_base_names };

static int _wrap_ImGuiGroupData_BackupCursorPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCursorPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCursorPos",1,"ImGuiGroupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupCursorPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorPos_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->BackupCursorPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCursorPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCursorPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCursorPos",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorPos_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImVec2 *)& ((arg1)->BackupCursorPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCursorMaxPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCursorMaxPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCursorMaxPos",1,"ImGuiGroupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupCursorMaxPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorMaxPos_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorMaxPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->BackupCursorMaxPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCursorMaxPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCursorMaxPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCursorMaxPos",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCursorMaxPos_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImVec2 *)& ((arg1)->BackupCursorMaxPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupIndent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec1 *arg2 = (ImVec1 *) 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupIndent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupIndent",1,"ImGuiGroupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupIndent",2,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupIndent_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupIndent_set",2,SWIGTYPE_p_ImVec1);
  }
  
  if (arg1) (arg1)->BackupIndent = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupIndent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupIndent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupIndent",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupIndent_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImVec1 *)& ((arg1)->BackupIndent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupGroupOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec1 *arg2 = (ImVec1 *) 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupGroupOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupGroupOffset",1,"ImGuiGroupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupGroupOffset",2,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupGroupOffset_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupGroupOffset_set",2,SWIGTYPE_p_ImVec1);
  }
  
  if (arg1) (arg1)->BackupGroupOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupGroupOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupGroupOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupGroupOffset",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupGroupOffset_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImVec1 *)& ((arg1)->BackupGroupOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCurrLineSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCurrLineSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineSize",1,"ImGuiGroupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCurrLineSize_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCurrLineSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->BackupCurrLineSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCurrLineSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCurrLineSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineSize",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCurrLineSize_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImVec2 *)& ((arg1)->BackupCurrLineSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCurrLineTextBaseOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCurrLineTextBaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineTextBaseOffset",1,"ImGuiGroupData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineTextBaseOffset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCurrLineTextBaseOffset_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BackupCurrLineTextBaseOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupCurrLineTextBaseOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiGroupData::BackupCurrLineTextBaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupCurrLineTextBaseOffset",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupCurrLineTextBaseOffset_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (float) ((arg1)->BackupCurrLineTextBaseOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupActiveIdIsAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupActiveIdIsAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdIsAlive",1,"ImGuiGroupData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdIsAlive",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupActiveIdIsAlive_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->BackupActiveIdIsAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupActiveIdIsAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiGroupData::BackupActiveIdIsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdIsAlive",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupActiveIdIsAlive_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (ImGuiID) ((arg1)->BackupActiveIdIsAlive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive",1,"ImGuiGroupData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->BackupActiveIdPreviousFrameIsAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (bool) ((arg1)->BackupActiveIdPreviousFrameIsAlive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_EmitItem_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiGroupData::EmitItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::EmitItem",1,"ImGuiGroupData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiGroupData::EmitItem",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_EmitItem_set",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->EmitItem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiGroupData_EmitItem_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *arg1 = (ImGuiGroupData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiGroupData::EmitItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiGroupData::EmitItem",1,"ImGuiGroupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiGroupData,0))){
    SWIG_fail_ptr("ImGuiGroupData_EmitItem_get",1,SWIGTYPE_p_ImGuiGroupData);
  }
  
  result = (bool) ((arg1)->EmitItem);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiGroupData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiGroupData *result = 0 ;
  
  SWIG_check_num_args("ImGuiGroupData::ImGuiGroupData",0,0)
  result = (ImGuiGroupData *)new ImGuiGroupData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiGroupData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiGroupData(void *obj) {
ImGuiGroupData *arg1 = (ImGuiGroupData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiGroupData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiGroupData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiGroupData_attributes[] = {
    { "BackupCursorPos", _wrap_ImGuiGroupData_BackupCursorPos_get, _wrap_ImGuiGroupData_BackupCursorPos_set },
    { "BackupCursorMaxPos", _wrap_ImGuiGroupData_BackupCursorMaxPos_get, _wrap_ImGuiGroupData_BackupCursorMaxPos_set },
    { "BackupIndent", _wrap_ImGuiGroupData_BackupIndent_get, _wrap_ImGuiGroupData_BackupIndent_set },
    { "BackupGroupOffset", _wrap_ImGuiGroupData_BackupGroupOffset_get, _wrap_ImGuiGroupData_BackupGroupOffset_set },
    { "BackupCurrLineSize", _wrap_ImGuiGroupData_BackupCurrLineSize_get, _wrap_ImGuiGroupData_BackupCurrLineSize_set },
    { "BackupCurrLineTextBaseOffset", _wrap_ImGuiGroupData_BackupCurrLineTextBaseOffset_get, _wrap_ImGuiGroupData_BackupCurrLineTextBaseOffset_set },
    { "BackupActiveIdIsAlive", _wrap_ImGuiGroupData_BackupActiveIdIsAlive_get, _wrap_ImGuiGroupData_BackupActiveIdIsAlive_set },
    { "BackupActiveIdPreviousFrameIsAlive", _wrap_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_get, _wrap_ImGuiGroupData_BackupActiveIdPreviousFrameIsAlive_set },
    { "EmitItem", _wrap_ImGuiGroupData_EmitItem_get, _wrap_ImGuiGroupData_EmitItem_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiGroupData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiGroupData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiGroupData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiGroupData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiGroupData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiGroupData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiGroupData_Sf_SwigStatic = {
    "ImGuiGroupData",
    swig_ImGuiGroupData_Sf_SwigStatic_methods,
    swig_ImGuiGroupData_Sf_SwigStatic_attributes,
    swig_ImGuiGroupData_Sf_SwigStatic_constants,
    swig_ImGuiGroupData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiGroupData_bases[] = {0};
static const char *swig_ImGuiGroupData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiGroupData = { "ImGuiGroupData", "ImGuiGroupData", &SWIGTYPE_p_ImGuiGroupData,_proxy__wrap_new_ImGuiGroupData, swig_delete_ImGuiGroupData, swig_ImGuiGroupData_methods, swig_ImGuiGroupData_attributes, &swig_ImGuiGroupData_Sf_SwigStatic, swig_ImGuiGroupData_meta, swig_ImGuiGroupData_bases, swig_ImGuiGroupData_base_names };

static int _wrap_ImGuiMenuColumns_Spacing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::Spacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Spacing",1,"ImGuiMenuColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::Spacing",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Spacing_set",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Spacing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Spacing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiMenuColumns::Spacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Spacing",1,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Spacing_get",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  result = (float) ((arg1)->Spacing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Width_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::Width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Width",1,"ImGuiMenuColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::Width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Width_set",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Width_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiMenuColumns::Width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Width",1,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Width_get",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  result = (float) ((arg1)->Width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_NextWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::NextWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::NextWidth",1,"ImGuiMenuColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::NextWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_NextWidth_set",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->NextWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_NextWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiMenuColumns::NextWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::NextWidth",1,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_NextWidth_get",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  result = (float) ((arg1)->NextWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Pos",1,"ImGuiMenuColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiMenuColumns::Pos",2,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Pos_set",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Pos_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->Pos;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Pos",1,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Pos_get",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  result = (float *)(float *) ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_NextWidths_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::NextWidths",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::NextWidths",1,"ImGuiMenuColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiMenuColumns::NextWidths",2,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_NextWidths_set",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_NextWidths_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->NextWidths;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_NextWidths_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::NextWidths",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::NextWidths",1,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_NextWidths_get",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  result = (float *)(float *) ((arg1)->NextWidths);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiMenuColumns(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *result = 0 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::ImGuiMenuColumns",0,0)
  result = (ImGuiMenuColumns *)new ImGuiMenuColumns();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiMenuColumns,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_Update(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  int arg2 ;
  float arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("ImGuiMenuColumns::Update",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::Update",1,"ImGuiMenuColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::Update",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiMenuColumns::Update",3,"float");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGuiMenuColumns::Update",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_Update",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->Update(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_DeclColumns(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  SWIG_check_num_args("ImGuiMenuColumns::DeclColumns",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::DeclColumns",1,"ImGuiMenuColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::DeclColumns",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiMenuColumns::DeclColumns",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGuiMenuColumns::DeclColumns",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_DeclColumns",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (float)(arg1)->DeclColumns(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiMenuColumns_CalcExtraSpace(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImGuiMenuColumns::CalcExtraSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMenuColumns::CalcExtraSpace",1,"ImGuiMenuColumns const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMenuColumns::CalcExtraSpace",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiMenuColumns_CalcExtraSpace",1,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ImGuiMenuColumns const *)arg1)->CalcExtraSpace(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiMenuColumns(void *obj) {
ImGuiMenuColumns *arg1 = (ImGuiMenuColumns *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiMenuColumns(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiMenuColumns);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiMenuColumns_attributes[] = {
    { "Spacing", _wrap_ImGuiMenuColumns_Spacing_get, _wrap_ImGuiMenuColumns_Spacing_set },
    { "Width", _wrap_ImGuiMenuColumns_Width_get, _wrap_ImGuiMenuColumns_Width_set },
    { "NextWidth", _wrap_ImGuiMenuColumns_NextWidth_get, _wrap_ImGuiMenuColumns_NextWidth_set },
    { "Pos", _wrap_ImGuiMenuColumns_Pos_get, _wrap_ImGuiMenuColumns_Pos_set },
    { "NextWidths", _wrap_ImGuiMenuColumns_NextWidths_get, _wrap_ImGuiMenuColumns_NextWidths_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiMenuColumns_methods[]= {
    { "Update", _wrap_ImGuiMenuColumns_Update},
    { "DeclColumns", _wrap_ImGuiMenuColumns_DeclColumns},
    { "CalcExtraSpace", _wrap_ImGuiMenuColumns_CalcExtraSpace},
    {0,0}
};
static swig_lua_method swig_ImGuiMenuColumns_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiMenuColumns_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiMenuColumns_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiMenuColumns_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiMenuColumns_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiMenuColumns_Sf_SwigStatic = {
    "ImGuiMenuColumns",
    swig_ImGuiMenuColumns_Sf_SwigStatic_methods,
    swig_ImGuiMenuColumns_Sf_SwigStatic_attributes,
    swig_ImGuiMenuColumns_Sf_SwigStatic_constants,
    swig_ImGuiMenuColumns_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiMenuColumns_bases[] = {0};
static const char *swig_ImGuiMenuColumns_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiMenuColumns = { "ImGuiMenuColumns", "ImGuiMenuColumns", &SWIGTYPE_p_ImGuiMenuColumns,_proxy__wrap_new_ImGuiMenuColumns, swig_delete_ImGuiMenuColumns, swig_ImGuiMenuColumns_methods, swig_ImGuiMenuColumns_attributes, &swig_ImGuiMenuColumns_Sf_SwigStatic, swig_ImGuiMenuColumns_meta, swig_ImGuiMenuColumns_bases, swig_ImGuiMenuColumns_base_names };

static int _wrap_ImGuiInputTextState_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ID",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ID_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiInputTextState::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ID",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ID_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CurLenW_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CurLenW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CurLenW",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::CurLenW",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CurLenW_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurLenW = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CurLenW_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextState::CurLenW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CurLenW",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CurLenW_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (int) ((arg1)->CurLenW);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CurLenA_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CurLenA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CurLenA",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::CurLenA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CurLenA_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurLenA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CurLenA_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextState::CurLenA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CurLenA",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CurLenA_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (int) ((arg1)->CurLenA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextW_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::TextW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextW",1,"ImGuiInputTextState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextState::TextW",2,"ImVector< ImWchar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextW_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextW_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->TextW = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextW_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< ImWchar > *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::TextW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextW",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextW_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImVector< ImWchar > *)& ((arg1)->TextW);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextA_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::TextA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextA",1,"ImGuiInputTextState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextState::TextA",2,"ImVector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextA_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_char_t,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextA_set",2,SWIGTYPE_p_ImVectorT_char_t);
  }
  
  if (arg1) (arg1)->TextA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextA_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< char > *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::TextA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextA",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextA_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImVector< char > *)& ((arg1)->TextA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_InitialTextA_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::InitialTextA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::InitialTextA",1,"ImGuiInputTextState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextState::InitialTextA",2,"ImVector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_InitialTextA_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_char_t,0))){
    SWIG_fail_ptr("ImGuiInputTextState_InitialTextA_set",2,SWIGTYPE_p_ImVectorT_char_t);
  }
  
  if (arg1) (arg1)->InitialTextA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_InitialTextA_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImVector< char > *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::InitialTextA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::InitialTextA",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_InitialTextA_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImVector< char > *)& ((arg1)->InitialTextA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextAIsValid_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::TextAIsValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextAIsValid",1,"ImGuiInputTextState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextState::TextAIsValid",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextAIsValid_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->TextAIsValid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_TextAIsValid_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextState::TextAIsValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::TextAIsValid",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_TextAIsValid_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (bool) ((arg1)->TextAIsValid);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_BufCapacityA_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::BufCapacityA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::BufCapacityA",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::BufCapacityA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_BufCapacityA_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BufCapacityA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_BufCapacityA_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextState::BufCapacityA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::BufCapacityA",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_BufCapacityA_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (int) ((arg1)->BufCapacityA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ScrollX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ScrollX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ScrollX",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::ScrollX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ScrollX_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ScrollX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiInputTextState::ScrollX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ScrollX",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ScrollX_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (float) ((arg1)->ScrollX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_Stb_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImStb::STB_TexteditState arg2 ;
  ImStb::STB_TexteditState *argp2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::Stb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::Stb",1,"ImGuiInputTextState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGuiInputTextState::Stb",2,"ImStb::STB_TexteditState");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_Stb_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImStb__STB_TexteditState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_Stb_set",2,SWIGTYPE_p_ImStb__STB_TexteditState);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->Stb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_Stb_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImStb::STB_TexteditState result;
  
  SWIG_check_num_args("ImGuiInputTextState::Stb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::Stb",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_Stb_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result =  ((arg1)->Stb);
  {
    ImStb::STB_TexteditState * resultptr = new ImStb::STB_TexteditState((const ImStb::STB_TexteditState &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImStb__STB_TexteditState,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorAnim_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorAnim",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::CursorAnim",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorAnim_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CursorAnim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorAnim_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorAnim",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorAnim_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (float) ((arg1)->CursorAnim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorFollow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorFollow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorFollow",1,"ImGuiInputTextState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextState::CursorFollow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorFollow_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->CursorFollow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorFollow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorFollow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorFollow",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorFollow_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (bool) ((arg1)->CursorFollow);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_SelectedAllMouseLock_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::SelectedAllMouseLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::SelectedAllMouseLock",1,"ImGuiInputTextState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextState::SelectedAllMouseLock",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_SelectedAllMouseLock_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->SelectedAllMouseLock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_SelectedAllMouseLock_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextState::SelectedAllMouseLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::SelectedAllMouseLock",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_SelectedAllMouseLock_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (bool) ((arg1)->SelectedAllMouseLock);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_Edited_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::Edited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::Edited",1,"ImGuiInputTextState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextState::Edited",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_Edited_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Edited = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_Edited_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextState::Edited",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::Edited",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_Edited_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (bool) ((arg1)->Edited);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::UserFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserFlags",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::UserFlags",2,"ImGuiInputTextFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserFlags_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (ImGuiInputTextFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->UserFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiInputTextFlags result;
  
  SWIG_check_num_args("ImGuiInputTextState::UserFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserFlags",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserFlags_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImGuiInputTextFlags) ((arg1)->UserFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiInputTextCallback arg2 = (ImGuiInputTextCallback) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::UserCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserCallback",1,"ImGuiInputTextState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextState::UserCallback",2,"ImGuiInputTextCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserCallback_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserCallback_set",2,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  if (arg1) (arg1)->UserCallback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  ImGuiInputTextCallback result;
  
  SWIG_check_num_args("ImGuiInputTextState::UserCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserCallback",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserCallback_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (ImGuiInputTextCallback) ((arg1)->UserCallback);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserCallbackData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::UserCallbackData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserCallbackData",1,"ImGuiInputTextState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextState::UserCallbackData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserCallbackData_set",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiInputTextState_UserCallbackData_set");
  if (arg1) (arg1)->UserCallbackData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_UserCallbackData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::UserCallbackData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::UserCallbackData",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_UserCallbackData_get",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (void *) ((arg1)->UserCallbackData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiInputTextState(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *result = 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ImGuiInputTextState",0,0)
  result = (ImGuiInputTextState *)new ImGuiInputTextState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiInputTextState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ClearText(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ClearText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ClearText",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ClearText",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->ClearText();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ClearFreeMemory(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ClearFreeMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ClearFreeMemory",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ClearFreeMemory",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->ClearFreeMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_GetUndoAvailCount(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextState::GetUndoAvailCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::GetUndoAvailCount",1,"ImGuiInputTextState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_GetUndoAvailCount",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (int)((ImGuiInputTextState const *)arg1)->GetUndoAvailCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_GetRedoAvailCount(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiInputTextState::GetRedoAvailCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::GetRedoAvailCount",1,"ImGuiInputTextState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_GetRedoAvailCount",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (int)((ImGuiInputTextState const *)arg1)->GetRedoAvailCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_OnKeyPressed(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiInputTextState::OnKeyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::OnKeyPressed",1,"ImGuiInputTextState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextState::OnKeyPressed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_OnKeyPressed",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->OnKeyPressed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorAnimReset(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorAnimReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorAnimReset",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorAnimReset",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->CursorAnimReset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_CursorClamp(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::CursorClamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::CursorClamp",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_CursorClamp",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->CursorClamp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_HasSelection(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiInputTextState::HasSelection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::HasSelection",1,"ImGuiInputTextState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_HasSelection",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  result = (bool)((ImGuiInputTextState const *)arg1)->HasSelection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_ClearSelection(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::ClearSelection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::ClearSelection",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_ClearSelection",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->ClearSelection();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiInputTextState_SelectAll(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiInputTextState *arg1 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiInputTextState::SelectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextState::SelectAll",1,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiInputTextState_SelectAll",1,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  (arg1)->SelectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiInputTextState(void *obj) {
ImGuiInputTextState *arg1 = (ImGuiInputTextState *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiInputTextState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiInputTextState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiInputTextState_attributes[] = {
    { "ID", _wrap_ImGuiInputTextState_ID_get, _wrap_ImGuiInputTextState_ID_set },
    { "CurLenW", _wrap_ImGuiInputTextState_CurLenW_get, _wrap_ImGuiInputTextState_CurLenW_set },
    { "CurLenA", _wrap_ImGuiInputTextState_CurLenA_get, _wrap_ImGuiInputTextState_CurLenA_set },
    { "TextW", _wrap_ImGuiInputTextState_TextW_get, _wrap_ImGuiInputTextState_TextW_set },
    { "TextA", _wrap_ImGuiInputTextState_TextA_get, _wrap_ImGuiInputTextState_TextA_set },
    { "InitialTextA", _wrap_ImGuiInputTextState_InitialTextA_get, _wrap_ImGuiInputTextState_InitialTextA_set },
    { "TextAIsValid", _wrap_ImGuiInputTextState_TextAIsValid_get, _wrap_ImGuiInputTextState_TextAIsValid_set },
    { "BufCapacityA", _wrap_ImGuiInputTextState_BufCapacityA_get, _wrap_ImGuiInputTextState_BufCapacityA_set },
    { "ScrollX", _wrap_ImGuiInputTextState_ScrollX_get, _wrap_ImGuiInputTextState_ScrollX_set },
    { "Stb", _wrap_ImGuiInputTextState_Stb_get, _wrap_ImGuiInputTextState_Stb_set },
    { "CursorAnim", _wrap_ImGuiInputTextState_CursorAnim_get, _wrap_ImGuiInputTextState_CursorAnim_set },
    { "CursorFollow", _wrap_ImGuiInputTextState_CursorFollow_get, _wrap_ImGuiInputTextState_CursorFollow_set },
    { "SelectedAllMouseLock", _wrap_ImGuiInputTextState_SelectedAllMouseLock_get, _wrap_ImGuiInputTextState_SelectedAllMouseLock_set },
    { "Edited", _wrap_ImGuiInputTextState_Edited_get, _wrap_ImGuiInputTextState_Edited_set },
    { "UserFlags", _wrap_ImGuiInputTextState_UserFlags_get, _wrap_ImGuiInputTextState_UserFlags_set },
    { "UserCallback", _wrap_ImGuiInputTextState_UserCallback_get, _wrap_ImGuiInputTextState_UserCallback_set },
    { "UserCallbackData", _wrap_ImGuiInputTextState_UserCallbackData_get, _wrap_ImGuiInputTextState_UserCallbackData_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiInputTextState_methods[]= {
    { "ClearText", _wrap_ImGuiInputTextState_ClearText},
    { "ClearFreeMemory", _wrap_ImGuiInputTextState_ClearFreeMemory},
    { "GetUndoAvailCount", _wrap_ImGuiInputTextState_GetUndoAvailCount},
    { "GetRedoAvailCount", _wrap_ImGuiInputTextState_GetRedoAvailCount},
    { "OnKeyPressed", _wrap_ImGuiInputTextState_OnKeyPressed},
    { "CursorAnimReset", _wrap_ImGuiInputTextState_CursorAnimReset},
    { "CursorClamp", _wrap_ImGuiInputTextState_CursorClamp},
    { "HasSelection", _wrap_ImGuiInputTextState_HasSelection},
    { "ClearSelection", _wrap_ImGuiInputTextState_ClearSelection},
    { "SelectAll", _wrap_ImGuiInputTextState_SelectAll},
    {0,0}
};
static swig_lua_method swig_ImGuiInputTextState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiInputTextState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiInputTextState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiInputTextState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiInputTextState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiInputTextState_Sf_SwigStatic = {
    "ImGuiInputTextState",
    swig_ImGuiInputTextState_Sf_SwigStatic_methods,
    swig_ImGuiInputTextState_Sf_SwigStatic_attributes,
    swig_ImGuiInputTextState_Sf_SwigStatic_constants,
    swig_ImGuiInputTextState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiInputTextState_bases[] = {0};
static const char *swig_ImGuiInputTextState_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiInputTextState = { "ImGuiInputTextState", "ImGuiInputTextState", &SWIGTYPE_p_ImGuiInputTextState,_proxy__wrap_new_ImGuiInputTextState, swig_delete_ImGuiInputTextState, swig_ImGuiInputTextState_methods, swig_ImGuiInputTextState_attributes, &swig_ImGuiInputTextState_Sf_SwigStatic, swig_ImGuiInputTextState_meta, swig_ImGuiInputTextState_bases, swig_ImGuiInputTextState_base_names };

static int _wrap_ImGuiPopupData_PopupId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiPopupData::PopupId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::PopupId",1,"ImGuiPopupData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPopupData::PopupId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_PopupId_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->PopupId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_PopupId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiPopupData::PopupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::PopupId",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_PopupId_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImGuiID) ((arg1)->PopupId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_Window_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::Window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::Window",1,"ImGuiPopupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPopupData::Window",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_Window_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiPopupData_Window_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->Window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_Window_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::Window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::Window",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_Window_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImGuiWindow *) ((arg1)->Window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_SourceWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::SourceWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::SourceWindow",1,"ImGuiPopupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPopupData::SourceWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_SourceWindow_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiPopupData_SourceWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->SourceWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_SourceWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::SourceWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::SourceWindow",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_SourceWindow_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImGuiWindow *) ((arg1)->SourceWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenFrameCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenFrameCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenFrameCount",1,"ImGuiPopupData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPopupData::OpenFrameCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenFrameCount_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->OpenFrameCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenFrameCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiPopupData::OpenFrameCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenFrameCount",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenFrameCount_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (int) ((arg1)->OpenFrameCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenParentId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenParentId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenParentId",1,"ImGuiPopupData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPopupData::OpenParentId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenParentId_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->OpenParentId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenParentId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiPopupData::OpenParentId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenParentId",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenParentId_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImGuiID) ((arg1)->OpenParentId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenPopupPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenPopupPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenPopupPos",1,"ImGuiPopupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPopupData::OpenPopupPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenPopupPos_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenPopupPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->OpenPopupPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenPopupPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenPopupPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenPopupPos",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenPopupPos_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImVec2 *)& ((arg1)->OpenPopupPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenMousePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenMousePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenMousePos",1,"ImGuiPopupData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPopupData::OpenMousePos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenMousePos_set",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenMousePos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->OpenMousePos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPopupData_OpenMousePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *arg1 = (ImGuiPopupData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::OpenMousePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPopupData::OpenMousePos",1,"ImGuiPopupData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPopupData,0))){
    SWIG_fail_ptr("ImGuiPopupData_OpenMousePos_get",1,SWIGTYPE_p_ImGuiPopupData);
  }
  
  result = (ImVec2 *)& ((arg1)->OpenMousePos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPopupData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPopupData *result = 0 ;
  
  SWIG_check_num_args("ImGuiPopupData::ImGuiPopupData",0,0)
  result = (ImGuiPopupData *)new ImGuiPopupData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPopupData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiPopupData(void *obj) {
ImGuiPopupData *arg1 = (ImGuiPopupData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPopupData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPopupData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPopupData_attributes[] = {
    { "PopupId", _wrap_ImGuiPopupData_PopupId_get, _wrap_ImGuiPopupData_PopupId_set },
    { "Window", _wrap_ImGuiPopupData_Window_get, _wrap_ImGuiPopupData_Window_set },
    { "SourceWindow", _wrap_ImGuiPopupData_SourceWindow_get, _wrap_ImGuiPopupData_SourceWindow_set },
    { "OpenFrameCount", _wrap_ImGuiPopupData_OpenFrameCount_get, _wrap_ImGuiPopupData_OpenFrameCount_set },
    { "OpenParentId", _wrap_ImGuiPopupData_OpenParentId_get, _wrap_ImGuiPopupData_OpenParentId_set },
    { "OpenPopupPos", _wrap_ImGuiPopupData_OpenPopupPos_get, _wrap_ImGuiPopupData_OpenPopupPos_set },
    { "OpenMousePos", _wrap_ImGuiPopupData_OpenMousePos_get, _wrap_ImGuiPopupData_OpenMousePos_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPopupData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPopupData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPopupData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPopupData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPopupData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPopupData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPopupData_Sf_SwigStatic = {
    "ImGuiPopupData",
    swig_ImGuiPopupData_Sf_SwigStatic_methods,
    swig_ImGuiPopupData_Sf_SwigStatic_attributes,
    swig_ImGuiPopupData_Sf_SwigStatic_constants,
    swig_ImGuiPopupData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPopupData_bases[] = {0};
static const char *swig_ImGuiPopupData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPopupData = { "ImGuiPopupData", "ImGuiPopupData", &SWIGTYPE_p_ImGuiPopupData,_proxy__wrap_new_ImGuiPopupData, swig_delete_ImGuiPopupData, swig_ImGuiPopupData_methods, swig_ImGuiPopupData_attributes, &swig_ImGuiPopupData_Sf_SwigStatic, swig_ImGuiPopupData_meta, swig_ImGuiPopupData_bases, swig_ImGuiPopupData_base_names };

static int _wrap_ImGuiNavMoveResult_Window_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::Window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::Window",1,"ImGuiNavMoveResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::Window",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_Window_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiNavMoveResult_Window_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->Window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_Window_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::Window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::Window",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_Window_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (ImGuiWindow *) ((arg1)->Window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::ID",1,"ImGuiNavMoveResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_ID_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiNavMoveResult::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::ID",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_ID_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_FocusScopeId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::FocusScopeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::FocusScopeId",1,"ImGuiNavMoveResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::FocusScopeId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_FocusScopeId_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusScopeId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_FocusScopeId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiNavMoveResult::FocusScopeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::FocusScopeId",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_FocusScopeId_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (ImGuiID) ((arg1)->FocusScopeId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistBox_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistBox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistBox",1,"ImGuiNavMoveResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::DistBox",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistBox_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DistBox = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistBox_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistBox",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistBox_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (float) ((arg1)->DistBox);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistCenter_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistCenter",1,"ImGuiNavMoveResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::DistCenter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistCenter_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DistCenter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistCenter_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistCenter",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistCenter_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (float) ((arg1)->DistCenter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistAxial_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistAxial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistAxial",1,"ImGuiNavMoveResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::DistAxial",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistAxial_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DistAxial = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_DistAxial_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiNavMoveResult::DistAxial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::DistAxial",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_DistAxial_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (float) ((arg1)->DistAxial);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_RectRel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::RectRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::RectRel",1,"ImGuiNavMoveResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNavMoveResult::RectRel",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_RectRel_set",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_RectRel_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->RectRel = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_RectRel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::RectRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::RectRel",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_RectRel_get",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  result = (ImRect *)& ((arg1)->RectRel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiNavMoveResult(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *result = 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::ImGuiNavMoveResult",0,0)
  result = (ImGuiNavMoveResult *)new ImGuiNavMoveResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNavMoveResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNavMoveResult_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) 0 ;
  
  SWIG_check_num_args("ImGuiNavMoveResult::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNavMoveResult::Clear",1,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiNavMoveResult_Clear",1,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiNavMoveResult(void *obj) {
ImGuiNavMoveResult *arg1 = (ImGuiNavMoveResult *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiNavMoveResult(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiNavMoveResult);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiNavMoveResult_attributes[] = {
    { "Window", _wrap_ImGuiNavMoveResult_Window_get, _wrap_ImGuiNavMoveResult_Window_set },
    { "ID", _wrap_ImGuiNavMoveResult_ID_get, _wrap_ImGuiNavMoveResult_ID_set },
    { "FocusScopeId", _wrap_ImGuiNavMoveResult_FocusScopeId_get, _wrap_ImGuiNavMoveResult_FocusScopeId_set },
    { "DistBox", _wrap_ImGuiNavMoveResult_DistBox_get, _wrap_ImGuiNavMoveResult_DistBox_set },
    { "DistCenter", _wrap_ImGuiNavMoveResult_DistCenter_get, _wrap_ImGuiNavMoveResult_DistCenter_set },
    { "DistAxial", _wrap_ImGuiNavMoveResult_DistAxial_get, _wrap_ImGuiNavMoveResult_DistAxial_set },
    { "RectRel", _wrap_ImGuiNavMoveResult_RectRel_get, _wrap_ImGuiNavMoveResult_RectRel_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiNavMoveResult_methods[]= {
    { "Clear", _wrap_ImGuiNavMoveResult_Clear},
    {0,0}
};
static swig_lua_method swig_ImGuiNavMoveResult_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiNavMoveResult_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiNavMoveResult_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiNavMoveResult_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiNavMoveResult_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiNavMoveResult_Sf_SwigStatic = {
    "ImGuiNavMoveResult",
    swig_ImGuiNavMoveResult_Sf_SwigStatic_methods,
    swig_ImGuiNavMoveResult_Sf_SwigStatic_attributes,
    swig_ImGuiNavMoveResult_Sf_SwigStatic_constants,
    swig_ImGuiNavMoveResult_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiNavMoveResult_bases[] = {0};
static const char *swig_ImGuiNavMoveResult_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiNavMoveResult = { "ImGuiNavMoveResult", "ImGuiNavMoveResult", &SWIGTYPE_p_ImGuiNavMoveResult,_proxy__wrap_new_ImGuiNavMoveResult, swig_delete_ImGuiNavMoveResult, swig_ImGuiNavMoveResult_methods, swig_ImGuiNavMoveResult_attributes, &swig_ImGuiNavMoveResult_Sf_SwigStatic, swig_ImGuiNavMoveResult_meta, swig_ImGuiNavMoveResult_bases, swig_ImGuiNavMoveResult_base_names };

static int _wrap_ImGuiNextWindowData_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiNextWindowDataFlags arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::Flags",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::Flags",2,"ImGuiNextWindowDataFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_Flags_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (ImGuiNextWindowDataFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiNextWindowDataFlags result;
  
  SWIG_check_num_args("ImGuiNextWindowData::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::Flags",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_Flags_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiNextWindowDataFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosCond_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosCond",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::PosCond",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosCond_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->PosCond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosCond_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosCond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosCond",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosCond_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiCond) ((arg1)->PosCond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCond_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCond",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::SizeCond",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCond_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->SizeCond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCond_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCond",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCond_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiCond) ((arg1)->SizeCond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_CollapsedCond_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::CollapsedCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedCond",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedCond",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_CollapsedCond_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->CollapsedCond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_CollapsedCond_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiNextWindowData::CollapsedCond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedCond",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_CollapsedCond_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiCond) ((arg1)->CollapsedCond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_DockCond_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::DockCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::DockCond",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::DockCond",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_DockCond_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockCond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_DockCond_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiNextWindowData::DockCond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::DockCond",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_DockCond_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiCond) ((arg1)->DockCond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::PosVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->PosVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->PosVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosPivotVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosPivotVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosPivotVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::PosPivotVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosPivotVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosPivotVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->PosPivotVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosPivotVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosPivotVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosPivotVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosPivotVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->PosPivotVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::SizeVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SizeVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->SizeVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ContentSizeVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ContentSizeVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ContentSizeVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::ContentSizeVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ContentSizeVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ContentSizeVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ContentSizeVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ContentSizeVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ContentSizeVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ContentSizeVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ContentSizeVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->ContentSizeVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ScrollVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ScrollVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ScrollVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::ScrollVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ScrollVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ScrollVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ScrollVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ScrollVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ScrollVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ScrollVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosUndock_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosUndock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosUndock",1,"ImGuiNextWindowData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiNextWindowData::PosUndock",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosUndock_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PosUndock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_PosUndock_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiNextWindowData::PosUndock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::PosUndock",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_PosUndock_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (bool) ((arg1)->PosUndock);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_CollapsedVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::CollapsedVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedVal",1,"ImGuiNextWindowData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedVal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_CollapsedVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->CollapsedVal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_CollapsedVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiNextWindowData::CollapsedVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::CollapsedVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_CollapsedVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (bool) ((arg1)->CollapsedVal);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeConstraintRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeConstraintRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeConstraintRect",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::SizeConstraintRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeConstraintRect_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeConstraintRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->SizeConstraintRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeConstraintRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeConstraintRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeConstraintRect",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeConstraintRect_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImRect *)& ((arg1)->SizeConstraintRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiSizeCallback arg2 = (ImGuiSizeCallback) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallback",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallback",2,"ImGuiSizeCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCallback_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCallback_set",2,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void);
  }
  
  if (arg1) (arg1)->SizeCallback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiSizeCallback result;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallback",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCallback_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiSizeCallback) ((arg1)->SizeCallback);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCallbackUserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCallbackUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallbackUserData",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallbackUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCallbackUserData_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiNextWindowData_SizeCallbackUserData_set");
  if (arg1) (arg1)->SizeCallbackUserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_SizeCallbackUserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::SizeCallbackUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::SizeCallbackUserData",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_SizeCallbackUserData_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (void *) ((arg1)->SizeCallbackUserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_BgAlphaVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::BgAlphaVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::BgAlphaVal",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::BgAlphaVal",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_BgAlphaVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BgAlphaVal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_BgAlphaVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiNextWindowData::BgAlphaVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::BgAlphaVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_BgAlphaVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (float) ((arg1)->BgAlphaVal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ViewportId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ViewportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ViewportId",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::ViewportId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ViewportId_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ViewportId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiNextWindowData::ViewportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ViewportId",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ViewportId_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiID) ((arg1)->ViewportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_DockId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::DockId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::DockId",1,"ImGuiNextWindowData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextWindowData::DockId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_DockId_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_DockId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiNextWindowData::DockId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::DockId",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_DockId_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiID) ((arg1)->DockId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_WindowClass_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiWindowClass *arg2 = (ImGuiWindowClass *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::WindowClass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::WindowClass",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::WindowClass",2,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_WindowClass_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_WindowClass_set",2,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  if (arg1) (arg1)->WindowClass = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_WindowClass_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImGuiWindowClass *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::WindowClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::WindowClass",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_WindowClass_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImGuiWindowClass *)& ((arg1)->WindowClass);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowClass,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_MenuBarOffsetMinVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::MenuBarOffsetMinVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::MenuBarOffsetMinVal",1,"ImGuiNextWindowData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiNextWindowData::MenuBarOffsetMinVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_MenuBarOffsetMinVal_set",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_MenuBarOffsetMinVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MenuBarOffsetMinVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_MenuBarOffsetMinVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::MenuBarOffsetMinVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::MenuBarOffsetMinVal",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_MenuBarOffsetMinVal_get",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  result = (ImVec2 *)& ((arg1)->MenuBarOffsetMinVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiNextWindowData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ImGuiNextWindowData",0,0)
  result = (ImGuiNextWindowData *)new ImGuiNextWindowData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNextWindowData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextWindowData_ClearFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) 0 ;
  
  SWIG_check_num_args("ImGuiNextWindowData::ClearFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextWindowData::ClearFlags",1,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiNextWindowData_ClearFlags",1,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  (arg1)->ClearFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiNextWindowData(void *obj) {
ImGuiNextWindowData *arg1 = (ImGuiNextWindowData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiNextWindowData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiNextWindowData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiNextWindowData_attributes[] = {
    { "Flags", _wrap_ImGuiNextWindowData_Flags_get, _wrap_ImGuiNextWindowData_Flags_set },
    { "PosCond", _wrap_ImGuiNextWindowData_PosCond_get, _wrap_ImGuiNextWindowData_PosCond_set },
    { "SizeCond", _wrap_ImGuiNextWindowData_SizeCond_get, _wrap_ImGuiNextWindowData_SizeCond_set },
    { "CollapsedCond", _wrap_ImGuiNextWindowData_CollapsedCond_get, _wrap_ImGuiNextWindowData_CollapsedCond_set },
    { "DockCond", _wrap_ImGuiNextWindowData_DockCond_get, _wrap_ImGuiNextWindowData_DockCond_set },
    { "PosVal", _wrap_ImGuiNextWindowData_PosVal_get, _wrap_ImGuiNextWindowData_PosVal_set },
    { "PosPivotVal", _wrap_ImGuiNextWindowData_PosPivotVal_get, _wrap_ImGuiNextWindowData_PosPivotVal_set },
    { "SizeVal", _wrap_ImGuiNextWindowData_SizeVal_get, _wrap_ImGuiNextWindowData_SizeVal_set },
    { "ContentSizeVal", _wrap_ImGuiNextWindowData_ContentSizeVal_get, _wrap_ImGuiNextWindowData_ContentSizeVal_set },
    { "ScrollVal", _wrap_ImGuiNextWindowData_ScrollVal_get, _wrap_ImGuiNextWindowData_ScrollVal_set },
    { "PosUndock", _wrap_ImGuiNextWindowData_PosUndock_get, _wrap_ImGuiNextWindowData_PosUndock_set },
    { "CollapsedVal", _wrap_ImGuiNextWindowData_CollapsedVal_get, _wrap_ImGuiNextWindowData_CollapsedVal_set },
    { "SizeConstraintRect", _wrap_ImGuiNextWindowData_SizeConstraintRect_get, _wrap_ImGuiNextWindowData_SizeConstraintRect_set },
    { "SizeCallback", _wrap_ImGuiNextWindowData_SizeCallback_get, _wrap_ImGuiNextWindowData_SizeCallback_set },
    { "SizeCallbackUserData", _wrap_ImGuiNextWindowData_SizeCallbackUserData_get, _wrap_ImGuiNextWindowData_SizeCallbackUserData_set },
    { "BgAlphaVal", _wrap_ImGuiNextWindowData_BgAlphaVal_get, _wrap_ImGuiNextWindowData_BgAlphaVal_set },
    { "ViewportId", _wrap_ImGuiNextWindowData_ViewportId_get, _wrap_ImGuiNextWindowData_ViewportId_set },
    { "DockId", _wrap_ImGuiNextWindowData_DockId_get, _wrap_ImGuiNextWindowData_DockId_set },
    { "WindowClass", _wrap_ImGuiNextWindowData_WindowClass_get, _wrap_ImGuiNextWindowData_WindowClass_set },
    { "MenuBarOffsetMinVal", _wrap_ImGuiNextWindowData_MenuBarOffsetMinVal_get, _wrap_ImGuiNextWindowData_MenuBarOffsetMinVal_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiNextWindowData_methods[]= {
    { "ClearFlags", _wrap_ImGuiNextWindowData_ClearFlags},
    {0,0}
};
static swig_lua_method swig_ImGuiNextWindowData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiNextWindowData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiNextWindowData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiNextWindowData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiNextWindowData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiNextWindowData_Sf_SwigStatic = {
    "ImGuiNextWindowData",
    swig_ImGuiNextWindowData_Sf_SwigStatic_methods,
    swig_ImGuiNextWindowData_Sf_SwigStatic_attributes,
    swig_ImGuiNextWindowData_Sf_SwigStatic_constants,
    swig_ImGuiNextWindowData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiNextWindowData_bases[] = {0};
static const char *swig_ImGuiNextWindowData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiNextWindowData = { "ImGuiNextWindowData", "ImGuiNextWindowData", &SWIGTYPE_p_ImGuiNextWindowData,_proxy__wrap_new_ImGuiNextWindowData, swig_delete_ImGuiNextWindowData, swig_ImGuiNextWindowData_methods, swig_ImGuiNextWindowData_attributes, &swig_ImGuiNextWindowData_Sf_SwigStatic, swig_ImGuiNextWindowData_meta, swig_ImGuiNextWindowData_bases, swig_ImGuiNextWindowData_base_names };

static int _wrap_ImGuiNextItemData_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiNextItemDataFlags arg2 ;
  
  SWIG_check_num_args("ImGuiNextItemData::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::Flags",1,"ImGuiNextItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextItemData::Flags",2,"ImGuiNextItemDataFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_Flags_set",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  arg2 = (ImGuiNextItemDataFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiNextItemDataFlags result;
  
  SWIG_check_num_args("ImGuiNextItemData::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::Flags",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_Flags_get",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  result = (ImGuiNextItemDataFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_Width_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiNextItemData::Width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::Width",1,"ImGuiNextItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextItemData::Width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_Width_set",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_Width_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiNextItemData::Width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::Width",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_Width_get",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  result = (float) ((arg1)->Width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_FocusScopeId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiNextItemData::FocusScopeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::FocusScopeId",1,"ImGuiNextItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextItemData::FocusScopeId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_FocusScopeId_set",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusScopeId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_FocusScopeId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiNextItemData::FocusScopeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::FocusScopeId",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_FocusScopeId_get",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  result = (ImGuiID) ((arg1)->FocusScopeId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_OpenCond_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiNextItemData::OpenCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::OpenCond",1,"ImGuiNextItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiNextItemData::OpenCond",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_OpenCond_set",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->OpenCond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_OpenCond_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiNextItemData::OpenCond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::OpenCond",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_OpenCond_get",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  result = (ImGuiCond) ((arg1)->OpenCond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_OpenVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiNextItemData::OpenVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::OpenVal",1,"ImGuiNextItemData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiNextItemData::OpenVal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_OpenVal_set",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->OpenVal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_OpenVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiNextItemData::OpenVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::OpenVal",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_OpenVal_get",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  result = (bool) ((arg1)->OpenVal);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiNextItemData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *result = 0 ;
  
  SWIG_check_num_args("ImGuiNextItemData::ImGuiNextItemData",0,0)
  result = (ImGuiNextItemData *)new ImGuiNextItemData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNextItemData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiNextItemData_ClearFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNextItemData *arg1 = (ImGuiNextItemData *) 0 ;
  
  SWIG_check_num_args("ImGuiNextItemData::ClearFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiNextItemData::ClearFlags",1,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiNextItemData_ClearFlags",1,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  (arg1)->ClearFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiNextItemData(void *obj) {
ImGuiNextItemData *arg1 = (ImGuiNextItemData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiNextItemData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiNextItemData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiNextItemData_attributes[] = {
    { "Flags", _wrap_ImGuiNextItemData_Flags_get, _wrap_ImGuiNextItemData_Flags_set },
    { "Width", _wrap_ImGuiNextItemData_Width_get, _wrap_ImGuiNextItemData_Width_set },
    { "FocusScopeId", _wrap_ImGuiNextItemData_FocusScopeId_get, _wrap_ImGuiNextItemData_FocusScopeId_set },
    { "OpenCond", _wrap_ImGuiNextItemData_OpenCond_get, _wrap_ImGuiNextItemData_OpenCond_set },
    { "OpenVal", _wrap_ImGuiNextItemData_OpenVal_get, _wrap_ImGuiNextItemData_OpenVal_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiNextItemData_methods[]= {
    { "ClearFlags", _wrap_ImGuiNextItemData_ClearFlags},
    {0,0}
};
static swig_lua_method swig_ImGuiNextItemData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiNextItemData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiNextItemData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiNextItemData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiNextItemData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiNextItemData_Sf_SwigStatic = {
    "ImGuiNextItemData",
    swig_ImGuiNextItemData_Sf_SwigStatic_methods,
    swig_ImGuiNextItemData_Sf_SwigStatic_attributes,
    swig_ImGuiNextItemData_Sf_SwigStatic_constants,
    swig_ImGuiNextItemData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiNextItemData_bases[] = {0};
static const char *swig_ImGuiNextItemData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiNextItemData = { "ImGuiNextItemData", "ImGuiNextItemData", &SWIGTYPE_p_ImGuiNextItemData,_proxy__wrap_new_ImGuiNextItemData, swig_delete_ImGuiNextItemData, swig_ImGuiNextItemData_methods, swig_ImGuiNextItemData_attributes, &swig_ImGuiNextItemData_Sf_SwigStatic, swig_ImGuiNextItemData_meta, swig_ImGuiNextItemData_bases, swig_ImGuiNextItemData_base_names };

static int _wrap_ImGuiShrinkWidthItem_Index_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiShrinkWidthItem::Index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiShrinkWidthItem::Index",1,"ImGuiShrinkWidthItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiShrinkWidthItem::Index",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiShrinkWidthItem,0))){
    SWIG_fail_ptr("ImGuiShrinkWidthItem_Index_set",1,SWIGTYPE_p_ImGuiShrinkWidthItem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiShrinkWidthItem_Index_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiShrinkWidthItem::Index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiShrinkWidthItem::Index",1,"ImGuiShrinkWidthItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiShrinkWidthItem,0))){
    SWIG_fail_ptr("ImGuiShrinkWidthItem_Index_get",1,SWIGTYPE_p_ImGuiShrinkWidthItem);
  }
  
  result = (int) ((arg1)->Index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiShrinkWidthItem_Width_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiShrinkWidthItem::Width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiShrinkWidthItem::Width",1,"ImGuiShrinkWidthItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiShrinkWidthItem::Width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiShrinkWidthItem,0))){
    SWIG_fail_ptr("ImGuiShrinkWidthItem_Width_set",1,SWIGTYPE_p_ImGuiShrinkWidthItem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiShrinkWidthItem_Width_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiShrinkWidthItem::Width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiShrinkWidthItem::Width",1,"ImGuiShrinkWidthItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiShrinkWidthItem,0))){
    SWIG_fail_ptr("ImGuiShrinkWidthItem_Width_get",1,SWIGTYPE_p_ImGuiShrinkWidthItem);
  }
  
  result = (float) ((arg1)->Width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiShrinkWidthItem(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *result = 0 ;
  
  SWIG_check_num_args("ImGuiShrinkWidthItem::ImGuiShrinkWidthItem",0,0)
  result = (ImGuiShrinkWidthItem *)new ImGuiShrinkWidthItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiShrinkWidthItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiShrinkWidthItem(void *obj) {
ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiShrinkWidthItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiShrinkWidthItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiShrinkWidthItem_attributes[] = {
    { "Index", _wrap_ImGuiShrinkWidthItem_Index_get, _wrap_ImGuiShrinkWidthItem_Index_set },
    { "Width", _wrap_ImGuiShrinkWidthItem_Width_get, _wrap_ImGuiShrinkWidthItem_Width_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiShrinkWidthItem_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiShrinkWidthItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiShrinkWidthItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiShrinkWidthItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiShrinkWidthItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiShrinkWidthItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiShrinkWidthItem_Sf_SwigStatic = {
    "ImGuiShrinkWidthItem",
    swig_ImGuiShrinkWidthItem_Sf_SwigStatic_methods,
    swig_ImGuiShrinkWidthItem_Sf_SwigStatic_attributes,
    swig_ImGuiShrinkWidthItem_Sf_SwigStatic_constants,
    swig_ImGuiShrinkWidthItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiShrinkWidthItem_bases[] = {0};
static const char *swig_ImGuiShrinkWidthItem_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiShrinkWidthItem = { "ImGuiShrinkWidthItem", "ImGuiShrinkWidthItem", &SWIGTYPE_p_ImGuiShrinkWidthItem,_proxy__wrap_new_ImGuiShrinkWidthItem, swig_delete_ImGuiShrinkWidthItem, swig_ImGuiShrinkWidthItem_methods, swig_ImGuiShrinkWidthItem_attributes, &swig_ImGuiShrinkWidthItem_Sf_SwigStatic, swig_ImGuiShrinkWidthItem_meta, swig_ImGuiShrinkWidthItem_bases, swig_ImGuiShrinkWidthItem_base_names };

static int _wrap_ImGuiPtrOrIndex_Ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPtrOrIndex *arg1 = (ImGuiPtrOrIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::Ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::Ptr",1,"ImGuiPtrOrIndex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPtrOrIndex::Ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPtrOrIndex,0))){
    SWIG_fail_ptr("ImGuiPtrOrIndex_Ptr_set",1,SWIGTYPE_p_ImGuiPtrOrIndex);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPtrOrIndex_Ptr_set");
  if (arg1) (arg1)->Ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPtrOrIndex_Ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPtrOrIndex *arg1 = (ImGuiPtrOrIndex *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::Ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::Ptr",1,"ImGuiPtrOrIndex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPtrOrIndex,0))){
    SWIG_fail_ptr("ImGuiPtrOrIndex_Ptr_get",1,SWIGTYPE_p_ImGuiPtrOrIndex);
  }
  
  result = (void *) ((arg1)->Ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPtrOrIndex_Index_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPtrOrIndex *arg1 = (ImGuiPtrOrIndex *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::Index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::Index",1,"ImGuiPtrOrIndex *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPtrOrIndex::Index",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPtrOrIndex,0))){
    SWIG_fail_ptr("ImGuiPtrOrIndex_Index_set",1,SWIGTYPE_p_ImGuiPtrOrIndex);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiPtrOrIndex_Index_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPtrOrIndex *arg1 = (ImGuiPtrOrIndex *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::Index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::Index",1,"ImGuiPtrOrIndex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPtrOrIndex,0))){
    SWIG_fail_ptr("ImGuiPtrOrIndex_Index_get",1,SWIGTYPE_p_ImGuiPtrOrIndex);
  }
  
  result = (int) ((arg1)->Index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPtrOrIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ImGuiPtrOrIndex *result = 0 ;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::ImGuiPtrOrIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::ImGuiPtrOrIndex",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_ImGuiPtrOrIndex");
  result = (ImGuiPtrOrIndex *)new ImGuiPtrOrIndex(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPtrOrIndex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPtrOrIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  ImGuiPtrOrIndex *result = 0 ;
  
  SWIG_check_num_args("ImGuiPtrOrIndex::ImGuiPtrOrIndex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiPtrOrIndex::ImGuiPtrOrIndex",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (ImGuiPtrOrIndex *)new ImGuiPtrOrIndex(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPtrOrIndex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiPtrOrIndex(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ImGuiPtrOrIndex__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ImGuiPtrOrIndex__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiPtrOrIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiPtrOrIndex::ImGuiPtrOrIndex(void *)\n"
    "    ImGuiPtrOrIndex::ImGuiPtrOrIndex(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImGuiPtrOrIndex(void *obj) {
ImGuiPtrOrIndex *arg1 = (ImGuiPtrOrIndex *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPtrOrIndex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPtrOrIndex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPtrOrIndex_attributes[] = {
    { "Ptr", _wrap_ImGuiPtrOrIndex_Ptr_get, _wrap_ImGuiPtrOrIndex_Ptr_set },
    { "Index", _wrap_ImGuiPtrOrIndex_Index_get, _wrap_ImGuiPtrOrIndex_Index_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPtrOrIndex_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPtrOrIndex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPtrOrIndex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPtrOrIndex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPtrOrIndex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPtrOrIndex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPtrOrIndex_Sf_SwigStatic = {
    "ImGuiPtrOrIndex",
    swig_ImGuiPtrOrIndex_Sf_SwigStatic_methods,
    swig_ImGuiPtrOrIndex_Sf_SwigStatic_attributes,
    swig_ImGuiPtrOrIndex_Sf_SwigStatic_constants,
    swig_ImGuiPtrOrIndex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPtrOrIndex_bases[] = {0};
static const char *swig_ImGuiPtrOrIndex_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPtrOrIndex = { "ImGuiPtrOrIndex", "ImGuiPtrOrIndex", &SWIGTYPE_p_ImGuiPtrOrIndex,_proxy__wrap_new_ImGuiPtrOrIndex, swig_delete_ImGuiPtrOrIndex, swig_ImGuiPtrOrIndex_methods, swig_ImGuiPtrOrIndex_attributes, &swig_ImGuiPtrOrIndex_Sf_SwigStatic, swig_ImGuiPtrOrIndex_meta, swig_ImGuiPtrOrIndex_bases, swig_ImGuiPtrOrIndex_base_names };

static int _wrap_ImGuiColumnData_OffsetNorm_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumnData::OffsetNorm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::OffsetNorm",1,"ImGuiColumnData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumnData::OffsetNorm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_OffsetNorm_set",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->OffsetNorm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_OffsetNorm_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumnData::OffsetNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::OffsetNorm",1,"ImGuiColumnData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_OffsetNorm_get",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  result = (float) ((arg1)->OffsetNorm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_OffsetNormBeforeResize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumnData::OffsetNormBeforeResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::OffsetNormBeforeResize",1,"ImGuiColumnData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumnData::OffsetNormBeforeResize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_OffsetNormBeforeResize_set",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->OffsetNormBeforeResize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_OffsetNormBeforeResize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumnData::OffsetNormBeforeResize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::OffsetNormBeforeResize",1,"ImGuiColumnData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_OffsetNormBeforeResize_get",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  result = (float) ((arg1)->OffsetNormBeforeResize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  ImGuiColumnsFlags arg2 ;
  
  SWIG_check_num_args("ImGuiColumnData::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::Flags",1,"ImGuiColumnData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumnData::Flags",2,"ImGuiColumnsFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_Flags_set",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  arg2 = (ImGuiColumnsFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  ImGuiColumnsFlags result;
  
  SWIG_check_num_args("ImGuiColumnData::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::Flags",1,"ImGuiColumnData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_Flags_get",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  result = (ImGuiColumnsFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_ClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiColumnData::ClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::ClipRect",1,"ImGuiColumnData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumnData::ClipRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_ClipRect_set",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiColumnData_ClipRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->ClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumnData_ClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *arg1 = (ImGuiColumnData *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumnData::ClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumnData::ClipRect",1,"ImGuiColumnData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumnData,0))){
    SWIG_fail_ptr("ImGuiColumnData_ClipRect_get",1,SWIGTYPE_p_ImGuiColumnData);
  }
  
  result = (ImRect *)& ((arg1)->ClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiColumnData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumnData *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumnData::ImGuiColumnData",0,0)
  result = (ImGuiColumnData *)new ImGuiColumnData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiColumnData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiColumnData(void *obj) {
ImGuiColumnData *arg1 = (ImGuiColumnData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiColumnData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiColumnData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiColumnData_attributes[] = {
    { "OffsetNorm", _wrap_ImGuiColumnData_OffsetNorm_get, _wrap_ImGuiColumnData_OffsetNorm_set },
    { "OffsetNormBeforeResize", _wrap_ImGuiColumnData_OffsetNormBeforeResize_get, _wrap_ImGuiColumnData_OffsetNormBeforeResize_set },
    { "Flags", _wrap_ImGuiColumnData_Flags_get, _wrap_ImGuiColumnData_Flags_set },
    { "ClipRect", _wrap_ImGuiColumnData_ClipRect_get, _wrap_ImGuiColumnData_ClipRect_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiColumnData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiColumnData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiColumnData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiColumnData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiColumnData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiColumnData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiColumnData_Sf_SwigStatic = {
    "ImGuiColumnData",
    swig_ImGuiColumnData_Sf_SwigStatic_methods,
    swig_ImGuiColumnData_Sf_SwigStatic_attributes,
    swig_ImGuiColumnData_Sf_SwigStatic_constants,
    swig_ImGuiColumnData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiColumnData_bases[] = {0};
static const char *swig_ImGuiColumnData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiColumnData = { "ImGuiColumnData", "ImGuiColumnData", &SWIGTYPE_p_ImGuiColumnData,_proxy__wrap_new_ImGuiColumnData, swig_delete_ImGuiColumnData, swig_ImGuiColumnData_methods, swig_ImGuiColumnData_attributes, &swig_ImGuiColumnData_Sf_SwigStatic, swig_ImGuiColumnData_meta, swig_ImGuiColumnData_bases, swig_ImGuiColumnData_base_names };

static int _wrap_ImGuiColumns_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::ID",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_ID_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiColumns::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::ID",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_ID_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImGuiColumnsFlags arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Flags",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::Flags",2,"ImGuiColumnsFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Flags_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (ImGuiColumnsFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImGuiColumnsFlags result;
  
  SWIG_check_num_args("ImGuiColumns::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Flags",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Flags_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImGuiColumnsFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_IsFirstFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::IsFirstFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::IsFirstFrame",1,"ImGuiColumns *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiColumns::IsFirstFrame",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_IsFirstFrame_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsFirstFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_IsFirstFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiColumns::IsFirstFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::IsFirstFrame",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_IsFirstFrame_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (bool) ((arg1)->IsFirstFrame);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_IsBeingResized_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::IsBeingResized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::IsBeingResized",1,"ImGuiColumns *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiColumns::IsBeingResized",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_IsBeingResized_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsBeingResized = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_IsBeingResized_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiColumns::IsBeingResized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::IsBeingResized",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_IsBeingResized_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (bool) ((arg1)->IsBeingResized);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Current_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::Current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Current",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::Current",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Current_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Current = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Current_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiColumns::Current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Current",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Current_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (int) ((arg1)->Current);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Count_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::Count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Count",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::Count",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Count_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Count_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiColumns::Count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Count",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Count_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (int) ((arg1)->Count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_OffMinX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::OffMinX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::OffMinX",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::OffMinX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_OffMinX_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->OffMinX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_OffMinX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::OffMinX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::OffMinX",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_OffMinX_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->OffMinX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_OffMaxX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::OffMaxX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::OffMaxX",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::OffMaxX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_OffMaxX_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->OffMaxX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_OffMaxX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::OffMaxX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::OffMaxX",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_OffMaxX_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->OffMaxX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_LineMinY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::LineMinY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::LineMinY",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::LineMinY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_LineMinY_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LineMinY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_LineMinY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::LineMinY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::LineMinY",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_LineMinY_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->LineMinY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_LineMaxY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::LineMaxY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::LineMaxY",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::LineMaxY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_LineMaxY_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LineMaxY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_LineMaxY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::LineMaxY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::LineMaxY",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_LineMaxY_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->LineMaxY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostCursorPosY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::HostCursorPosY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostCursorPosY",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::HostCursorPosY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostCursorPosY_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->HostCursorPosY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostCursorPosY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::HostCursorPosY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostCursorPosY",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostCursorPosY_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->HostCursorPosY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostCursorMaxPosX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiColumns::HostCursorMaxPosX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostCursorMaxPosX",1,"ImGuiColumns *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiColumns::HostCursorMaxPosX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostCursorMaxPosX_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->HostCursorMaxPosX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostCursorMaxPosX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiColumns::HostCursorMaxPosX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostCursorMaxPosX",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostCursorMaxPosX_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (float) ((arg1)->HostCursorMaxPosX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostInitialClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostInitialClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostInitialClipRect",1,"ImGuiColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumns::HostInitialClipRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostInitialClipRect_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiColumns_HostInitialClipRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->HostInitialClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostInitialClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostInitialClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostInitialClipRect",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostInitialClipRect_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImRect *)& ((arg1)->HostInitialClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostBackupClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostBackupClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostBackupClipRect",1,"ImGuiColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumns::HostBackupClipRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupClipRect_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupClipRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->HostBackupClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostBackupClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostBackupClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostBackupClipRect",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupClipRect_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImRect *)& ((arg1)->HostBackupClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostBackupParentWorkRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostBackupParentWorkRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostBackupParentWorkRect",1,"ImGuiColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumns::HostBackupParentWorkRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupParentWorkRect_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupParentWorkRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->HostBackupParentWorkRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_HostBackupParentWorkRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::HostBackupParentWorkRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::HostBackupParentWorkRect",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_HostBackupParentWorkRect_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImRect *)& ((arg1)->HostBackupParentWorkRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Columns_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImVector< ImGuiColumnData > *arg2 = (ImVector< ImGuiColumnData > *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::Columns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Columns",1,"ImGuiColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumns::Columns",2,"ImVector< ImGuiColumnData > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Columns_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiColumnData_t,0))){
    SWIG_fail_ptr("ImGuiColumns_Columns_set",2,SWIGTYPE_p_ImVectorT_ImGuiColumnData_t);
  }
  
  if (arg1) (arg1)->Columns = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Columns_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImVector< ImGuiColumnData > *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::Columns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Columns",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Columns_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImVector< ImGuiColumnData > *)& ((arg1)->Columns);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiColumnData_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Splitter_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImDrawListSplitter *arg2 = (ImDrawListSplitter *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::Splitter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Splitter",1,"ImGuiColumns *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiColumns::Splitter",2,"ImDrawListSplitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Splitter_set",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSplitter,0))){
    SWIG_fail_ptr("ImGuiColumns_Splitter_set",2,SWIGTYPE_p_ImDrawListSplitter);
  }
  
  if (arg1) (arg1)->Splitter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Splitter_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  ImDrawListSplitter *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::Splitter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Splitter",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Splitter_get",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  result = (ImDrawListSplitter *)& ((arg1)->Splitter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSplitter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiColumns(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *result = 0 ;
  
  SWIG_check_num_args("ImGuiColumns::ImGuiColumns",0,0)
  result = (ImGuiColumns *)new ImGuiColumns();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiColumns,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiColumns_Clear(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  
  SWIG_check_num_args("ImGuiColumns::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiColumns::Clear",1,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("ImGuiColumns_Clear",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiColumns(void *obj) {
ImGuiColumns *arg1 = (ImGuiColumns *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiColumns(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiColumns);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiColumns_attributes[] = {
    { "ID", _wrap_ImGuiColumns_ID_get, _wrap_ImGuiColumns_ID_set },
    { "Flags", _wrap_ImGuiColumns_Flags_get, _wrap_ImGuiColumns_Flags_set },
    { "IsFirstFrame", _wrap_ImGuiColumns_IsFirstFrame_get, _wrap_ImGuiColumns_IsFirstFrame_set },
    { "IsBeingResized", _wrap_ImGuiColumns_IsBeingResized_get, _wrap_ImGuiColumns_IsBeingResized_set },
    { "Current", _wrap_ImGuiColumns_Current_get, _wrap_ImGuiColumns_Current_set },
    { "Count", _wrap_ImGuiColumns_Count_get, _wrap_ImGuiColumns_Count_set },
    { "OffMinX", _wrap_ImGuiColumns_OffMinX_get, _wrap_ImGuiColumns_OffMinX_set },
    { "OffMaxX", _wrap_ImGuiColumns_OffMaxX_get, _wrap_ImGuiColumns_OffMaxX_set },
    { "LineMinY", _wrap_ImGuiColumns_LineMinY_get, _wrap_ImGuiColumns_LineMinY_set },
    { "LineMaxY", _wrap_ImGuiColumns_LineMaxY_get, _wrap_ImGuiColumns_LineMaxY_set },
    { "HostCursorPosY", _wrap_ImGuiColumns_HostCursorPosY_get, _wrap_ImGuiColumns_HostCursorPosY_set },
    { "HostCursorMaxPosX", _wrap_ImGuiColumns_HostCursorMaxPosX_get, _wrap_ImGuiColumns_HostCursorMaxPosX_set },
    { "HostInitialClipRect", _wrap_ImGuiColumns_HostInitialClipRect_get, _wrap_ImGuiColumns_HostInitialClipRect_set },
    { "HostBackupClipRect", _wrap_ImGuiColumns_HostBackupClipRect_get, _wrap_ImGuiColumns_HostBackupClipRect_set },
    { "HostBackupParentWorkRect", _wrap_ImGuiColumns_HostBackupParentWorkRect_get, _wrap_ImGuiColumns_HostBackupParentWorkRect_set },
    { "Columns", _wrap_ImGuiColumns_Columns_get, _wrap_ImGuiColumns_Columns_set },
    { "Splitter", _wrap_ImGuiColumns_Splitter_get, _wrap_ImGuiColumns_Splitter_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiColumns_methods[]= {
    { "Clear", _wrap_ImGuiColumns_Clear},
    {0,0}
};
static swig_lua_method swig_ImGuiColumns_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiColumns_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiColumns_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiColumns_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiColumns_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiColumns_Sf_SwigStatic = {
    "ImGuiColumns",
    swig_ImGuiColumns_Sf_SwigStatic_methods,
    swig_ImGuiColumns_Sf_SwigStatic_attributes,
    swig_ImGuiColumns_Sf_SwigStatic_constants,
    swig_ImGuiColumns_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiColumns_bases[] = {0};
static const char *swig_ImGuiColumns_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiColumns = { "ImGuiColumns", "ImGuiColumns", &SWIGTYPE_p_ImGuiColumns,_proxy__wrap_new_ImGuiColumns, swig_delete_ImGuiColumns, swig_ImGuiColumns_methods, swig_ImGuiColumns_attributes, &swig_ImGuiColumns_Sf_SwigStatic, swig_ImGuiColumns_meta, swig_ImGuiColumns_bases, swig_ImGuiColumns_base_names };

static int _wrap_ImGuiDockNode_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ID",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ID_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiDockNode::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ID",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ID_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SharedFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::SharedFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SharedFlags",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::SharedFlags",2,"ImGuiDockNodeFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SharedFlags_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->SharedFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SharedFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeFlags result;
  
  SWIG_check_num_args("ImGuiDockNode::SharedFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SharedFlags",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SharedFlags_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNodeFlags) ((arg1)->SharedFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LocalFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::LocalFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LocalFlags",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::LocalFlags",2,"ImGuiDockNodeFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LocalFlags_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->LocalFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LocalFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeFlags result;
  
  SWIG_check_num_args("ImGuiDockNode::LocalFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LocalFlags",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LocalFlags_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNodeFlags) ((arg1)->LocalFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_ParentNode_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::ParentNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ParentNode",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::ParentNode",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ParentNode_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_ParentNode_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->ParentNode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_ParentNode_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::ParentNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ParentNode",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ParentNode_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNode *) ((arg1)->ParentNode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_ChildNodes_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode **arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::ChildNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ChildNodes",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::ChildNodes",2,"ImGuiDockNode *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ChildNodes_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ChildNodes_set",2,SWIGTYPE_p_p_ImGuiDockNode);
  }
  
  {
    size_t ii;
    ImGuiDockNode * *b = (ImGuiDockNode * *) arg1->ChildNodes;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((ImGuiDockNode * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_ChildNodes_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode **result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::ChildNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::ChildNodes",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_ChildNodes_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNode **)(ImGuiDockNode **) ((arg1)->ChildNodes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Windows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Windows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Windows",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::Windows",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Windows_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiDockNode_Windows_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->Windows = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Windows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Windows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Windows",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Windows_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->Windows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_TabBar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiTabBar *arg2 = (ImGuiTabBar *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::TabBar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::TabBar",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::TabBar",2,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_TabBar_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabBar,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_TabBar_set",2,SWIGTYPE_p_ImGuiTabBar);
  }
  
  if (arg1) (arg1)->TabBar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_TabBar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiTabBar *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::TabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::TabBar",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_TabBar_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiTabBar *) ((arg1)->TabBar);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabBar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Pos",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::Pos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Pos_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiDockNode_Pos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Pos",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Pos_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImVec2 *)& ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Size",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::Size",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Size_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiDockNode_Size_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Size = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Size",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Size_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImVec2 *)& ((arg1)->Size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SizeRef_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::SizeRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SizeRef",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::SizeRef",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SizeRef_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiDockNode_SizeRef_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SizeRef = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SizeRef_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::SizeRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SizeRef",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SizeRef_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImVec2 *)& ((arg1)->SizeRef);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SplitAxis_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiAxis arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::SplitAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SplitAxis",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::SplitAxis",2,"ImGuiAxis");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SplitAxis_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiAxis)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->SplitAxis = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SplitAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiAxis result;
  
  SWIG_check_num_args("ImGuiDockNode::SplitAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SplitAxis",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SplitAxis_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiAxis) ((arg1)->SplitAxis);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WindowClass_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindowClass *arg2 = (ImGuiWindowClass *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::WindowClass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WindowClass",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::WindowClass",2,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WindowClass_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiDockNode_WindowClass_set",2,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  if (arg1) (arg1)->WindowClass = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WindowClass_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindowClass *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::WindowClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WindowClass",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WindowClass_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiWindowClass *)& ((arg1)->WindowClass);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowClass,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_State_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeState arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::State",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::State",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::State",2,"ImGuiDockNodeState");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_State_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDockNodeState)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->State = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_State_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeState result;
  
  SWIG_check_num_args("ImGuiDockNode::State",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::State",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_State_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNodeState) ((arg1)->State);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HostWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::HostWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HostWindow",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::HostWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HostWindow_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_HostWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->HostWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HostWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::HostWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HostWindow",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HostWindow_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiWindow *) ((arg1)->HostWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_VisibleWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::VisibleWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::VisibleWindow",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::VisibleWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_VisibleWindow_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_VisibleWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->VisibleWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_VisibleWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::VisibleWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::VisibleWindow",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_VisibleWindow_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiWindow *) ((arg1)->VisibleWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_CentralNode_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::CentralNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::CentralNode",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::CentralNode",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_CentralNode_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_CentralNode_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->CentralNode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_CentralNode_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::CentralNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::CentralNode",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_CentralNode_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNode *) ((arg1)->CentralNode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_OnlyNodeWithWindows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::OnlyNodeWithWindows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::OnlyNodeWithWindows",1,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockNode::OnlyNodeWithWindows",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_OnlyNodeWithWindows_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiDockNode_OnlyNodeWithWindows_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->OnlyNodeWithWindows = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_OnlyNodeWithWindows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::OnlyNodeWithWindows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::OnlyNodeWithWindows",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_OnlyNodeWithWindows_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNode *) ((arg1)->OnlyNodeWithWindows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameAlive",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::LastFrameAlive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameAlive_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameAlive",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameAlive_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (int) ((arg1)->LastFrameAlive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameActive",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::LastFrameActive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameActive_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameActive",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameActive_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (int) ((arg1)->LastFrameActive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameFocused_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameFocused",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::LastFrameFocused",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameFocused_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameFocused = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFrameFocused_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiDockNode::LastFrameFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFrameFocused",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFrameFocused_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (int) ((arg1)->LastFrameFocused);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFocusedNodeId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::LastFocusedNodeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFocusedNodeId",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::LastFocusedNodeId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFocusedNodeId_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFocusedNodeId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_LastFocusedNodeId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiDockNode::LastFocusedNodeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::LastFocusedNodeId",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_LastFocusedNodeId_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiID) ((arg1)->LastFocusedNodeId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SelectedTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::SelectedTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SelectedTabId",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::SelectedTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SelectedTabId_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->SelectedTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_SelectedTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiDockNode::SelectedTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::SelectedTabId",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_SelectedTabId_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiID) ((arg1)->SelectedTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantCloseTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantCloseTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantCloseTabId",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::WantCloseTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantCloseTabId_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->WantCloseTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantCloseTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiDockNode::WantCloseTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantCloseTabId",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantCloseTabId_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiID) ((arg1)->WantCloseTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForPos",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::AuthorityForPos",2,"ImGuiDataAuthority");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForPos_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDataAuthority)lua_tonumber(L, 2);
  if (arg1) (arg1)->AuthorityForPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority result;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForPos",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForPos_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDataAuthority) ((arg1)->AuthorityForPos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForSize",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::AuthorityForSize",2,"ImGuiDataAuthority");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForSize_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDataAuthority)lua_tonumber(L, 2);
  if (arg1) (arg1)->AuthorityForSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority result;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForSize",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForSize_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDataAuthority) ((arg1)->AuthorityForSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForViewport",1,"ImGuiDockNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiDockNode::AuthorityForViewport",2,"ImGuiDataAuthority");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForViewport_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (ImGuiDataAuthority)lua_tonumber(L, 2);
  if (arg1) (arg1)->AuthorityForViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_AuthorityForViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDataAuthority result;
  
  SWIG_check_num_args("ImGuiDockNode::AuthorityForViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::AuthorityForViewport",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_AuthorityForViewport_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDataAuthority) ((arg1)->AuthorityForViewport);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::IsVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsVisible",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::IsVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsVisible_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsVisible",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsVisible_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->IsVisible);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsFocused_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::IsFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsFocused",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::IsFocused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsFocused_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsFocused = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsFocused_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsFocused",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsFocused_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->IsFocused);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HasCloseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::HasCloseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HasCloseButton",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::HasCloseButton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HasCloseButton_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->HasCloseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HasCloseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::HasCloseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HasCloseButton",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HasCloseButton_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->HasCloseButton);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HasWindowMenuButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::HasWindowMenuButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HasWindowMenuButton",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::HasWindowMenuButton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HasWindowMenuButton_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->HasWindowMenuButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_HasWindowMenuButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::HasWindowMenuButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::HasWindowMenuButton",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_HasWindowMenuButton_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->HasWindowMenuButton);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_EnableCloseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::EnableCloseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::EnableCloseButton",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::EnableCloseButton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_EnableCloseButton_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->EnableCloseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_EnableCloseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::EnableCloseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::EnableCloseButton",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_EnableCloseButton_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->EnableCloseButton);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantCloseAll_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantCloseAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantCloseAll",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::WantCloseAll",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantCloseAll_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantCloseAll = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantCloseAll_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::WantCloseAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantCloseAll",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantCloseAll_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->WantCloseAll);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantLockSizeOnce_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantLockSizeOnce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantLockSizeOnce",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::WantLockSizeOnce",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantLockSizeOnce_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantLockSizeOnce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantLockSizeOnce_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::WantLockSizeOnce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantLockSizeOnce",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantLockSizeOnce_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->WantLockSizeOnce);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantMouseMove_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantMouseMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantMouseMove",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::WantMouseMove",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantMouseMove_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantMouseMove = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantMouseMove_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::WantMouseMove",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantMouseMove",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantMouseMove_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->WantMouseMove);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantHiddenTabBarUpdate_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantHiddenTabBarUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarUpdate",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarUpdate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantHiddenTabBarUpdate_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantHiddenTabBarUpdate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantHiddenTabBarUpdate_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::WantHiddenTabBarUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarUpdate",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantHiddenTabBarUpdate_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->WantHiddenTabBarUpdate);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantHiddenTabBarToggle_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::WantHiddenTabBarToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarToggle",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarToggle",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantHiddenTabBarToggle_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantHiddenTabBarToggle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_WantHiddenTabBarToggle_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::WantHiddenTabBarToggle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::WantHiddenTabBarToggle",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_WantHiddenTabBarToggle_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->WantHiddenTabBarToggle);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_MarkedForPosSizeWrite_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockNode::MarkedForPosSizeWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::MarkedForPosSizeWrite",1,"ImGuiDockNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockNode::MarkedForPosSizeWrite",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_MarkedForPosSizeWrite_set",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->MarkedForPosSizeWrite = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_MarkedForPosSizeWrite_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::MarkedForPosSizeWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::MarkedForPosSizeWrite",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_MarkedForPosSizeWrite_get",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool) ((arg1)->MarkedForPosSizeWrite);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiDockNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockNode::ImGuiDockNode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiDockNode::ImGuiDockNode",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiDockNode *)new ImGuiDockNode(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsRootNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsRootNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsRootNode",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsRootNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsRootNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsDockSpace(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsDockSpace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsDockSpace",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsDockSpace",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsDockSpace();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsFloatingNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsFloatingNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsFloatingNode",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsFloatingNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsFloatingNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsCentralNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsCentralNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsCentralNode",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsCentralNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsCentralNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsHiddenTabBar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsHiddenTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsHiddenTabBar",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsHiddenTabBar",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsHiddenTabBar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsNoTabBar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsNoTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsNoTabBar",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsNoTabBar",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsNoTabBar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsSplitNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsSplitNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsSplitNode",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsSplitNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsSplitNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsLeafNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsLeafNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsLeafNode",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsLeafNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsLeafNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_IsEmpty(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockNode::IsEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::IsEmpty",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_IsEmpty",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)((ImGuiDockNode const *)arg1)->IsEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_GetMergedFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNodeFlags result;
  
  SWIG_check_num_args("ImGuiDockNode::GetMergedFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::GetMergedFlags",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_GetMergedFlags",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNodeFlags)((ImGuiDockNode const *)arg1)->GetMergedFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockNode_Rect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiDockNode::Rect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockNode::Rect",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("ImGuiDockNode_Rect",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = ((ImGuiDockNode const *)arg1)->Rect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiDockNode(void *obj) {
ImGuiDockNode *arg1 = (ImGuiDockNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiDockNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiDockNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiDockNode_attributes[] = {
    { "ID", _wrap_ImGuiDockNode_ID_get, _wrap_ImGuiDockNode_ID_set },
    { "SharedFlags", _wrap_ImGuiDockNode_SharedFlags_get, _wrap_ImGuiDockNode_SharedFlags_set },
    { "LocalFlags", _wrap_ImGuiDockNode_LocalFlags_get, _wrap_ImGuiDockNode_LocalFlags_set },
    { "ParentNode", _wrap_ImGuiDockNode_ParentNode_get, _wrap_ImGuiDockNode_ParentNode_set },
    { "ChildNodes", _wrap_ImGuiDockNode_ChildNodes_get, _wrap_ImGuiDockNode_ChildNodes_set },
    { "Windows", _wrap_ImGuiDockNode_Windows_get, _wrap_ImGuiDockNode_Windows_set },
    { "TabBar", _wrap_ImGuiDockNode_TabBar_get, _wrap_ImGuiDockNode_TabBar_set },
    { "Pos", _wrap_ImGuiDockNode_Pos_get, _wrap_ImGuiDockNode_Pos_set },
    { "Size", _wrap_ImGuiDockNode_Size_get, _wrap_ImGuiDockNode_Size_set },
    { "SizeRef", _wrap_ImGuiDockNode_SizeRef_get, _wrap_ImGuiDockNode_SizeRef_set },
    { "SplitAxis", _wrap_ImGuiDockNode_SplitAxis_get, _wrap_ImGuiDockNode_SplitAxis_set },
    { "WindowClass", _wrap_ImGuiDockNode_WindowClass_get, _wrap_ImGuiDockNode_WindowClass_set },
    { "State", _wrap_ImGuiDockNode_State_get, _wrap_ImGuiDockNode_State_set },
    { "HostWindow", _wrap_ImGuiDockNode_HostWindow_get, _wrap_ImGuiDockNode_HostWindow_set },
    { "VisibleWindow", _wrap_ImGuiDockNode_VisibleWindow_get, _wrap_ImGuiDockNode_VisibleWindow_set },
    { "CentralNode", _wrap_ImGuiDockNode_CentralNode_get, _wrap_ImGuiDockNode_CentralNode_set },
    { "OnlyNodeWithWindows", _wrap_ImGuiDockNode_OnlyNodeWithWindows_get, _wrap_ImGuiDockNode_OnlyNodeWithWindows_set },
    { "LastFrameAlive", _wrap_ImGuiDockNode_LastFrameAlive_get, _wrap_ImGuiDockNode_LastFrameAlive_set },
    { "LastFrameActive", _wrap_ImGuiDockNode_LastFrameActive_get, _wrap_ImGuiDockNode_LastFrameActive_set },
    { "LastFrameFocused", _wrap_ImGuiDockNode_LastFrameFocused_get, _wrap_ImGuiDockNode_LastFrameFocused_set },
    { "LastFocusedNodeId", _wrap_ImGuiDockNode_LastFocusedNodeId_get, _wrap_ImGuiDockNode_LastFocusedNodeId_set },
    { "SelectedTabId", _wrap_ImGuiDockNode_SelectedTabId_get, _wrap_ImGuiDockNode_SelectedTabId_set },
    { "WantCloseTabId", _wrap_ImGuiDockNode_WantCloseTabId_get, _wrap_ImGuiDockNode_WantCloseTabId_set },
    { "AuthorityForPos", _wrap_ImGuiDockNode_AuthorityForPos_get, _wrap_ImGuiDockNode_AuthorityForPos_set },
    { "AuthorityForSize", _wrap_ImGuiDockNode_AuthorityForSize_get, _wrap_ImGuiDockNode_AuthorityForSize_set },
    { "AuthorityForViewport", _wrap_ImGuiDockNode_AuthorityForViewport_get, _wrap_ImGuiDockNode_AuthorityForViewport_set },
    { "IsVisible", _wrap_ImGuiDockNode_IsVisible_get, _wrap_ImGuiDockNode_IsVisible_set },
    { "IsFocused", _wrap_ImGuiDockNode_IsFocused_get, _wrap_ImGuiDockNode_IsFocused_set },
    { "HasCloseButton", _wrap_ImGuiDockNode_HasCloseButton_get, _wrap_ImGuiDockNode_HasCloseButton_set },
    { "HasWindowMenuButton", _wrap_ImGuiDockNode_HasWindowMenuButton_get, _wrap_ImGuiDockNode_HasWindowMenuButton_set },
    { "EnableCloseButton", _wrap_ImGuiDockNode_EnableCloseButton_get, _wrap_ImGuiDockNode_EnableCloseButton_set },
    { "WantCloseAll", _wrap_ImGuiDockNode_WantCloseAll_get, _wrap_ImGuiDockNode_WantCloseAll_set },
    { "WantLockSizeOnce", _wrap_ImGuiDockNode_WantLockSizeOnce_get, _wrap_ImGuiDockNode_WantLockSizeOnce_set },
    { "WantMouseMove", _wrap_ImGuiDockNode_WantMouseMove_get, _wrap_ImGuiDockNode_WantMouseMove_set },
    { "WantHiddenTabBarUpdate", _wrap_ImGuiDockNode_WantHiddenTabBarUpdate_get, _wrap_ImGuiDockNode_WantHiddenTabBarUpdate_set },
    { "WantHiddenTabBarToggle", _wrap_ImGuiDockNode_WantHiddenTabBarToggle_get, _wrap_ImGuiDockNode_WantHiddenTabBarToggle_set },
    { "MarkedForPosSizeWrite", _wrap_ImGuiDockNode_MarkedForPosSizeWrite_get, _wrap_ImGuiDockNode_MarkedForPosSizeWrite_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiDockNode_methods[]= {
    { "IsRootNode", _wrap_ImGuiDockNode_IsRootNode},
    { "IsDockSpace", _wrap_ImGuiDockNode_IsDockSpace},
    { "IsFloatingNode", _wrap_ImGuiDockNode_IsFloatingNode},
    { "IsCentralNode", _wrap_ImGuiDockNode_IsCentralNode},
    { "IsHiddenTabBar", _wrap_ImGuiDockNode_IsHiddenTabBar},
    { "IsNoTabBar", _wrap_ImGuiDockNode_IsNoTabBar},
    { "IsSplitNode", _wrap_ImGuiDockNode_IsSplitNode},
    { "IsLeafNode", _wrap_ImGuiDockNode_IsLeafNode},
    { "IsEmpty", _wrap_ImGuiDockNode_IsEmpty},
    { "GetMergedFlags", _wrap_ImGuiDockNode_GetMergedFlags},
    { "Rect", _wrap_ImGuiDockNode_Rect},
    {0,0}
};
static swig_lua_method swig_ImGuiDockNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiDockNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiDockNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiDockNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiDockNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiDockNode_Sf_SwigStatic = {
    "ImGuiDockNode",
    swig_ImGuiDockNode_Sf_SwigStatic_methods,
    swig_ImGuiDockNode_Sf_SwigStatic_attributes,
    swig_ImGuiDockNode_Sf_SwigStatic_constants,
    swig_ImGuiDockNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiDockNode_bases[] = {0};
static const char *swig_ImGuiDockNode_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiDockNode = { "ImGuiDockNode", "ImGuiDockNode", &SWIGTYPE_p_ImGuiDockNode,_proxy__wrap_new_ImGuiDockNode, swig_delete_ImGuiDockNode, swig_ImGuiDockNode_methods, swig_ImGuiDockNode_attributes, &swig_ImGuiDockNode_Sf_SwigStatic, swig_ImGuiDockNode_meta, swig_ImGuiDockNode_bases, swig_ImGuiDockNode_base_names };

static int _wrap_ImGuiDockContext_Nodes_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImGuiStorage *arg2 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::Nodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::Nodes",1,"ImGuiDockContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockContext::Nodes",2,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_Nodes_set",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiDockContext_Nodes_set",2,SWIGTYPE_p_ImGuiStorage);
  }
  
  if (arg1) (arg1)->Nodes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_Nodes_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::Nodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::Nodes",1,"ImGuiDockContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_Nodes_get",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  result = (ImGuiStorage *)& ((arg1)->Nodes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_Requests_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImVector< ImGuiDockRequest > *arg2 = (ImVector< ImGuiDockRequest > *) 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::Requests",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::Requests",1,"ImGuiDockContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockContext::Requests",2,"ImVector< ImGuiDockRequest > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_Requests_set",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiDockRequest_t,0))){
    SWIG_fail_ptr("ImGuiDockContext_Requests_set",2,SWIGTYPE_p_ImVectorT_ImGuiDockRequest_t);
  }
  
  if (arg1) (arg1)->Requests = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_Requests_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImVector< ImGuiDockRequest > *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::Requests",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::Requests",1,"ImGuiDockContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_Requests_get",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  result = (ImVector< ImGuiDockRequest > *)& ((arg1)->Requests);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiDockRequest_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_NodesSettings_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImVector< ImGuiDockNodeSettings > *arg2 = (ImVector< ImGuiDockNodeSettings > *) 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::NodesSettings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::NodesSettings",1,"ImGuiDockContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiDockContext::NodesSettings",2,"ImVector< ImGuiDockNodeSettings > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_NodesSettings_set",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiDockNodeSettings_t,0))){
    SWIG_fail_ptr("ImGuiDockContext_NodesSettings_set",2,SWIGTYPE_p_ImVectorT_ImGuiDockNodeSettings_t);
  }
  
  if (arg1) (arg1)->NodesSettings = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_NodesSettings_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  ImVector< ImGuiDockNodeSettings > *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::NodesSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::NodesSettings",1,"ImGuiDockContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_NodesSettings_get",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  result = (ImVector< ImGuiDockNodeSettings > *)& ((arg1)->NodesSettings);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiDockNodeSettings_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_WantFullRebuild_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiDockContext::WantFullRebuild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::WantFullRebuild",1,"ImGuiDockContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiDockContext::WantFullRebuild",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_WantFullRebuild_set",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantFullRebuild = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiDockContext_WantFullRebuild_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *arg1 = (ImGuiDockContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiDockContext::WantFullRebuild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiDockContext::WantFullRebuild",1,"ImGuiDockContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiDockContext_WantFullRebuild_get",1,SWIGTYPE_p_ImGuiDockContext);
  }
  
  result = (bool) ((arg1)->WantFullRebuild);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiDockContext(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockContext *result = 0 ;
  
  SWIG_check_num_args("ImGuiDockContext::ImGuiDockContext",0,0)
  result = (ImGuiDockContext *)new ImGuiDockContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockContext,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiDockContext(void *obj) {
ImGuiDockContext *arg1 = (ImGuiDockContext *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiDockContext(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiDockContext);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiDockContext_attributes[] = {
    { "Nodes", _wrap_ImGuiDockContext_Nodes_get, _wrap_ImGuiDockContext_Nodes_set },
    { "Requests", _wrap_ImGuiDockContext_Requests_get, _wrap_ImGuiDockContext_Requests_set },
    { "NodesSettings", _wrap_ImGuiDockContext_NodesSettings_get, _wrap_ImGuiDockContext_NodesSettings_set },
    { "WantFullRebuild", _wrap_ImGuiDockContext_WantFullRebuild_get, _wrap_ImGuiDockContext_WantFullRebuild_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiDockContext_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiDockContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiDockContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiDockContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiDockContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiDockContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiDockContext_Sf_SwigStatic = {
    "ImGuiDockContext",
    swig_ImGuiDockContext_Sf_SwigStatic_methods,
    swig_ImGuiDockContext_Sf_SwigStatic_attributes,
    swig_ImGuiDockContext_Sf_SwigStatic_constants,
    swig_ImGuiDockContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiDockContext_bases[] = {0};
static const char *swig_ImGuiDockContext_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiDockContext = { "ImGuiDockContext", "ImGuiDockContext", &SWIGTYPE_p_ImGuiDockContext,_proxy__wrap_new_ImGuiDockContext, swig_delete_ImGuiDockContext, swig_ImGuiDockContext_methods, swig_ImGuiDockContext_attributes, &swig_ImGuiDockContext_Sf_SwigStatic, swig_ImGuiDockContext_meta, swig_ImGuiDockContext_bases, swig_ImGuiDockContext_base_names };

static int _wrap_ImGuiViewportP_Idx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::Idx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Idx",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::Idx",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Idx_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Idx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_Idx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiViewportP::Idx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Idx",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Idx_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (int) ((arg1)->Idx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrameActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrameActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrameActive",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::LastFrameActive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrameActive_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrameActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrameActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrameActive",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrameActive_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (int) ((arg1)->LastFrameActive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrameDrawLists_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrameDrawLists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrameDrawLists",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::LastFrameDrawLists",2,"int [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrameDrawLists_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrameDrawLists_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->LastFrameDrawLists;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrameDrawLists_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrameDrawLists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrameDrawLists",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrameDrawLists_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (int *)(int *) ((arg1)->LastFrameDrawLists);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrontMostStampCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrontMostStampCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrontMostStampCount",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::LastFrontMostStampCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrontMostStampCount_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrontMostStampCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastFrontMostStampCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiViewportP::LastFrontMostStampCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastFrontMostStampCount",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastFrontMostStampCount_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (int) ((arg1)->LastFrontMostStampCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastNameHash_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastNameHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastNameHash",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::LastNameHash",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastNameHash_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastNameHash = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastNameHash_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiViewportP::LastNameHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastNameHash",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastNameHash_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImGuiID) ((arg1)->LastNameHash);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPos",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::LastPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPos_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->LastPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPos",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPos_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->LastPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_Alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::Alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Alpha",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::Alpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Alpha_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_Alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiViewportP::Alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Alpha",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Alpha_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (float) ((arg1)->Alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastAlpha_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastAlpha",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::LastAlpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastAlpha_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastAlpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastAlpha_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiViewportP::LastAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastAlpha",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastAlpha_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (float) ((arg1)->LastAlpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_PlatformMonitor_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::PlatformMonitor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::PlatformMonitor",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportP::PlatformMonitor",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_PlatformMonitor_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->PlatformMonitor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_PlatformMonitor_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiViewportP::PlatformMonitor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::PlatformMonitor",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_PlatformMonitor_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (short) ((arg1)->PlatformMonitor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_PlatformWindowCreated_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::PlatformWindowCreated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::PlatformWindowCreated",1,"ImGuiViewportP *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewportP::PlatformWindowCreated",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_PlatformWindowCreated_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->PlatformWindowCreated = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_PlatformWindowCreated_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiViewportP::PlatformWindowCreated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::PlatformWindowCreated",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_PlatformWindowCreated_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (bool) ((arg1)->PlatformWindowCreated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_Window_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::Window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Window",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::Window",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Window_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiViewportP_Window_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->Window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_Window_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::Window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::Window",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_Window_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImGuiWindow *) ((arg1)->Window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawLists_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawList **arg2 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawLists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawLists",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::DrawLists",2,"ImDrawList *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawLists_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_ImDrawList,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawLists_set",2,SWIGTYPE_p_p_ImDrawList);
  }
  
  {
    size_t ii;
    ImDrawList * *b = (ImDrawList * *) arg1->DrawLists;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((ImDrawList * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawLists_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawList **result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawLists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawLists",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawLists_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImDrawList **)(ImDrawList **) ((arg1)->DrawLists);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawDataP_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawData *arg2 = (ImDrawData *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawDataP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawDataP",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::DrawDataP",2,"ImDrawData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataP_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawData,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataP_set",2,SWIGTYPE_p_ImDrawData);
  }
  
  if (arg1) (arg1)->DrawDataP = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawDataP_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawData *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawDataP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawDataP",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataP_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImDrawData *)& ((arg1)->DrawDataP);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawDataBuilder_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawDataBuilder *arg2 = (ImDrawDataBuilder *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawDataBuilder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawDataBuilder",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::DrawDataBuilder",2,"ImDrawDataBuilder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataBuilder_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawDataBuilder,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataBuilder_set",2,SWIGTYPE_p_ImDrawDataBuilder);
  }
  
  if (arg1) (arg1)->DrawDataBuilder = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_DrawDataBuilder_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImDrawDataBuilder *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::DrawDataBuilder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::DrawDataBuilder",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_DrawDataBuilder_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImDrawDataBuilder *)& ((arg1)->DrawDataBuilder);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawDataBuilder,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPlatformPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPlatformPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPlatformPos",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::LastPlatformPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformPos_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->LastPlatformPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPlatformPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPlatformPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPlatformPos",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformPos_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->LastPlatformPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPlatformSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPlatformSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPlatformSize",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::LastPlatformSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformSize_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->LastPlatformSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastPlatformSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastPlatformSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastPlatformSize",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastPlatformSize_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->LastPlatformSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastRendererSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastRendererSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastRendererSize",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::LastRendererSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastRendererSize_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastRendererSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->LastRendererSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_LastRendererSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::LastRendererSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::LastRendererSize",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_LastRendererSize_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->LastRendererSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_CurrWorkOffsetMin_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::CurrWorkOffsetMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMin",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMin",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMin_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMin_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CurrWorkOffsetMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_CurrWorkOffsetMin_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::CurrWorkOffsetMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMin",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMin_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->CurrWorkOffsetMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_CurrWorkOffsetMax_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::CurrWorkOffsetMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMax",1,"ImGuiViewportP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMax",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMax_set",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMax_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CurrWorkOffsetMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_CurrWorkOffsetMax_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::CurrWorkOffsetMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::CurrWorkOffsetMax",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_CurrWorkOffsetMax_get",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = (ImVec2 *)& ((arg1)->CurrWorkOffsetMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiViewportP(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::ImGuiViewportP",0,0)
  result = (ImGuiViewportP *)new ImGuiViewportP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_GetMainRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiViewportP::GetMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::GetMainRect",1,"ImGuiViewportP const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_GetMainRect",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = ((ImGuiViewportP const *)arg1)->GetMainRect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_GetWorkRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiViewportP::GetWorkRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::GetWorkRect",1,"ImGuiViewportP const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_GetWorkRect",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  result = ((ImGuiViewportP const *)arg1)->GetWorkRect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiViewportP_ClearRequestFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiViewportP::ClearRequestFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportP::ClearRequestFlags",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ImGuiViewportP_ClearRequestFlags",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  (arg1)->ClearRequestFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiViewportP(void *obj) {
ImGuiViewportP *arg1 = (ImGuiViewportP *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiViewportP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiViewportP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiViewportP_attributes[] = {
    { "Idx", _wrap_ImGuiViewportP_Idx_get, _wrap_ImGuiViewportP_Idx_set },
    { "LastFrameActive", _wrap_ImGuiViewportP_LastFrameActive_get, _wrap_ImGuiViewportP_LastFrameActive_set },
    { "LastFrameDrawLists", _wrap_ImGuiViewportP_LastFrameDrawLists_get, _wrap_ImGuiViewportP_LastFrameDrawLists_set },
    { "LastFrontMostStampCount", _wrap_ImGuiViewportP_LastFrontMostStampCount_get, _wrap_ImGuiViewportP_LastFrontMostStampCount_set },
    { "LastNameHash", _wrap_ImGuiViewportP_LastNameHash_get, _wrap_ImGuiViewportP_LastNameHash_set },
    { "LastPos", _wrap_ImGuiViewportP_LastPos_get, _wrap_ImGuiViewportP_LastPos_set },
    { "Alpha", _wrap_ImGuiViewportP_Alpha_get, _wrap_ImGuiViewportP_Alpha_set },
    { "LastAlpha", _wrap_ImGuiViewportP_LastAlpha_get, _wrap_ImGuiViewportP_LastAlpha_set },
    { "PlatformMonitor", _wrap_ImGuiViewportP_PlatformMonitor_get, _wrap_ImGuiViewportP_PlatformMonitor_set },
    { "PlatformWindowCreated", _wrap_ImGuiViewportP_PlatformWindowCreated_get, _wrap_ImGuiViewportP_PlatformWindowCreated_set },
    { "Window", _wrap_ImGuiViewportP_Window_get, _wrap_ImGuiViewportP_Window_set },
    { "DrawLists", _wrap_ImGuiViewportP_DrawLists_get, _wrap_ImGuiViewportP_DrawLists_set },
    { "DrawDataP", _wrap_ImGuiViewportP_DrawDataP_get, _wrap_ImGuiViewportP_DrawDataP_set },
    { "DrawDataBuilder", _wrap_ImGuiViewportP_DrawDataBuilder_get, _wrap_ImGuiViewportP_DrawDataBuilder_set },
    { "LastPlatformPos", _wrap_ImGuiViewportP_LastPlatformPos_get, _wrap_ImGuiViewportP_LastPlatformPos_set },
    { "LastPlatformSize", _wrap_ImGuiViewportP_LastPlatformSize_get, _wrap_ImGuiViewportP_LastPlatformSize_set },
    { "LastRendererSize", _wrap_ImGuiViewportP_LastRendererSize_get, _wrap_ImGuiViewportP_LastRendererSize_set },
    { "CurrWorkOffsetMin", _wrap_ImGuiViewportP_CurrWorkOffsetMin_get, _wrap_ImGuiViewportP_CurrWorkOffsetMin_set },
    { "CurrWorkOffsetMax", _wrap_ImGuiViewportP_CurrWorkOffsetMax_get, _wrap_ImGuiViewportP_CurrWorkOffsetMax_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiViewportP_methods[]= {
    { "GetMainRect", _wrap_ImGuiViewportP_GetMainRect},
    { "GetWorkRect", _wrap_ImGuiViewportP_GetWorkRect},
    { "ClearRequestFlags", _wrap_ImGuiViewportP_ClearRequestFlags},
    {0,0}
};
static swig_lua_method swig_ImGuiViewportP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiViewportP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiViewportP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiViewportP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiViewportP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiViewportP_Sf_SwigStatic = {
    "ImGuiViewportP",
    swig_ImGuiViewportP_Sf_SwigStatic_methods,
    swig_ImGuiViewportP_Sf_SwigStatic_attributes,
    swig_ImGuiViewportP_Sf_SwigStatic_constants,
    swig_ImGuiViewportP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiViewportP_bases[] = {0,0};
static const char *swig_ImGuiViewportP_base_names[] = {"ImGuiViewport *",0};
static swig_lua_class _wrap_class_ImGuiViewportP = { "ImGuiViewportP", "ImGuiViewportP", &SWIGTYPE_p_ImGuiViewportP,_proxy__wrap_new_ImGuiViewportP, swig_delete_ImGuiViewportP, swig_ImGuiViewportP_methods, swig_ImGuiViewportP_attributes, &swig_ImGuiViewportP_Sf_SwigStatic, swig_ImGuiViewportP_meta, swig_ImGuiViewportP_bases, swig_ImGuiViewportP_base_names };

static int _wrap_ImGuiWindowSettings_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ID",1,"ImGuiWindowSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowSettings::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ID_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowSettings::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ID",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ID_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *arg2 = (ImVec2ih *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Pos",1,"ImGuiWindowSettings *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowSettings::Pos",2,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Pos_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Pos_set",2,SWIGTYPE_p_ImVec2ih);
  }
  
  if (arg1) (arg1)->Pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Pos",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Pos_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImVec2ih *)& ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *arg2 = (ImVec2ih *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Size",1,"ImGuiWindowSettings *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowSettings::Size",2,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Size_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Size_set",2,SWIGTYPE_p_ImVec2ih);
  }
  
  if (arg1) (arg1)->Size = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Size",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Size_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImVec2ih *)& ((arg1)->Size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ViewportPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *arg2 = (ImVec2ih *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ViewportPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ViewportPos",1,"ImGuiWindowSettings *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowSettings::ViewportPos",2,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ViewportPos_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ViewportPos_set",2,SWIGTYPE_p_ImVec2ih);
  }
  
  if (arg1) (arg1)->ViewportPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ViewportPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ViewportPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ViewportPos",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ViewportPos_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImVec2ih *)& ((arg1)->ViewportPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ViewportId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ViewportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ViewportId",1,"ImGuiWindowSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowSettings::ViewportId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ViewportId_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ViewportId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowSettings::ViewportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ViewportId",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ViewportId_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImGuiID) ((arg1)->ViewportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_DockId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::DockId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::DockId",1,"ImGuiWindowSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowSettings::DockId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_DockId_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_DockId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowSettings::DockId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::DockId",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_DockId_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImGuiID) ((arg1)->DockId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ClassId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ClassId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ClassId",1,"ImGuiWindowSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowSettings::ClassId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ClassId_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ClassId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_ClassId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowSettings::ClassId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::ClassId",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_ClassId_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (ImGuiID) ((arg1)->ClassId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_DockOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::DockOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::DockOrder",1,"ImGuiWindowSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowSettings::DockOrder",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_DockOrder_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_DockOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiWindowSettings::DockOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::DockOrder",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_DockOrder_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (short) ((arg1)->DockOrder);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Collapsed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::Collapsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Collapsed",1,"ImGuiWindowSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowSettings::Collapsed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Collapsed_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Collapsed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_Collapsed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowSettings::Collapsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::Collapsed",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_Collapsed_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (bool) ((arg1)->Collapsed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_WantApply_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::WantApply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::WantApply",1,"ImGuiWindowSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowSettings::WantApply",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_WantApply_set",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantApply = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_WantApply_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowSettings::WantApply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::WantApply",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_WantApply_get",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (bool) ((arg1)->WantApply);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiWindowSettings(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::ImGuiWindowSettings",0,0)
  result = (ImGuiWindowSettings *)new ImGuiWindowSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowSettings,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowSettings_GetName(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowSettings::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowSettings::GetName",1,"ImGuiWindowSettings *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowSettings,0))){
    SWIG_fail_ptr("ImGuiWindowSettings_GetName",1,SWIGTYPE_p_ImGuiWindowSettings);
  }
  
  result = (char *)(arg1)->GetName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiWindowSettings(void *obj) {
ImGuiWindowSettings *arg1 = (ImGuiWindowSettings *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiWindowSettings(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiWindowSettings);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiWindowSettings_attributes[] = {
    { "ID", _wrap_ImGuiWindowSettings_ID_get, _wrap_ImGuiWindowSettings_ID_set },
    { "Pos", _wrap_ImGuiWindowSettings_Pos_get, _wrap_ImGuiWindowSettings_Pos_set },
    { "Size", _wrap_ImGuiWindowSettings_Size_get, _wrap_ImGuiWindowSettings_Size_set },
    { "ViewportPos", _wrap_ImGuiWindowSettings_ViewportPos_get, _wrap_ImGuiWindowSettings_ViewportPos_set },
    { "ViewportId", _wrap_ImGuiWindowSettings_ViewportId_get, _wrap_ImGuiWindowSettings_ViewportId_set },
    { "DockId", _wrap_ImGuiWindowSettings_DockId_get, _wrap_ImGuiWindowSettings_DockId_set },
    { "ClassId", _wrap_ImGuiWindowSettings_ClassId_get, _wrap_ImGuiWindowSettings_ClassId_set },
    { "DockOrder", _wrap_ImGuiWindowSettings_DockOrder_get, _wrap_ImGuiWindowSettings_DockOrder_set },
    { "Collapsed", _wrap_ImGuiWindowSettings_Collapsed_get, _wrap_ImGuiWindowSettings_Collapsed_set },
    { "WantApply", _wrap_ImGuiWindowSettings_WantApply_get, _wrap_ImGuiWindowSettings_WantApply_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiWindowSettings_methods[]= {
    { "GetName", _wrap_ImGuiWindowSettings_GetName},
    {0,0}
};
static swig_lua_method swig_ImGuiWindowSettings_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiWindowSettings_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiWindowSettings_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiWindowSettings_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiWindowSettings_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiWindowSettings_Sf_SwigStatic = {
    "ImGuiWindowSettings",
    swig_ImGuiWindowSettings_Sf_SwigStatic_methods,
    swig_ImGuiWindowSettings_Sf_SwigStatic_attributes,
    swig_ImGuiWindowSettings_Sf_SwigStatic_constants,
    swig_ImGuiWindowSettings_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiWindowSettings_bases[] = {0};
static const char *swig_ImGuiWindowSettings_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiWindowSettings = { "ImGuiWindowSettings", "ImGuiWindowSettings", &SWIGTYPE_p_ImGuiWindowSettings,_proxy__wrap_new_ImGuiWindowSettings, swig_delete_ImGuiWindowSettings, swig_ImGuiWindowSettings_methods, swig_ImGuiWindowSettings_attributes, &swig_ImGuiWindowSettings_Sf_SwigStatic, swig_ImGuiWindowSettings_meta, swig_ImGuiWindowSettings_bases, swig_ImGuiWindowSettings_base_names };

static int _wrap_ImGuiSettingsHandler_TypeName_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::TypeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::TypeName",1,"ImGuiSettingsHandler *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::TypeName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_TypeName_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->TypeName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->TypeName, (const char *)arg2);
    } else {
      arg1->TypeName = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_TypeName_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::TypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::TypeName",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_TypeName_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (char *) ((arg1)->TypeName);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_TypeHash_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::TypeHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::TypeHash",1,"ImGuiSettingsHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::TypeHash",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_TypeHash_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->TypeHash = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_TypeHash_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiSettingsHandler::TypeHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::TypeHash",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_TypeHash_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (ImGuiID) ((arg1)->TypeHash);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ClearAllFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*arg2)(ImGuiContext *,ImGuiSettingsHandler *) = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ClearAllFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ClearAllFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::ClearAllFn",2,"void (*)(ImGuiContext *,ImGuiSettingsHandler *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ClearAllFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ClearAllFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void);
  }
  
  if (arg1) (arg1)->ClearAllFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ClearAllFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*result)(ImGuiContext *,ImGuiSettingsHandler *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ClearAllFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ClearAllFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ClearAllFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) ((arg1)->ClearAllFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadInitFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*arg2)(ImGuiContext *,ImGuiSettingsHandler *) = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadInitFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadInitFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::ReadInitFn",2,"void (*)(ImGuiContext *,ImGuiSettingsHandler *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadInitFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadInitFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void);
  }
  
  if (arg1) (arg1)->ReadInitFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadInitFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*result)(ImGuiContext *,ImGuiSettingsHandler *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadInitFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadInitFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadInitFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) ((arg1)->ReadInitFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadOpenFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void *(*arg2)(ImGuiContext *,ImGuiSettingsHandler *,char const *) = (void *(*)(ImGuiContext *,ImGuiSettingsHandler *,char const *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadOpenFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadOpenFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::ReadOpenFn",2,"void *(*)(ImGuiContext *,ImGuiSettingsHandler *,char const *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadOpenFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadOpenFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void);
  }
  
  if (arg1) (arg1)->ReadOpenFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadOpenFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void *(*result)(ImGuiContext *,ImGuiSettingsHandler *,char const *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadOpenFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadOpenFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadOpenFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void *(*)(ImGuiContext *,ImGuiSettingsHandler *,char const *)) ((arg1)->ReadOpenFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadLineFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*arg2)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *) = (void (*)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadLineFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadLineFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::ReadLineFn",2,"void (*)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadLineFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadLineFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void);
  }
  
  if (arg1) (arg1)->ReadLineFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ReadLineFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*result)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ReadLineFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ReadLineFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ReadLineFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void (*)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *)) ((arg1)->ReadLineFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ApplyAllFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*arg2)(ImGuiContext *,ImGuiSettingsHandler *) = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ApplyAllFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ApplyAllFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::ApplyAllFn",2,"void (*)(ImGuiContext *,ImGuiSettingsHandler *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ApplyAllFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ApplyAllFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void);
  }
  
  if (arg1) (arg1)->ApplyAllFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_ApplyAllFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*result)(ImGuiContext *,ImGuiSettingsHandler *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ApplyAllFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::ApplyAllFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_ApplyAllFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void (*)(ImGuiContext *,ImGuiSettingsHandler *)) ((arg1)->ApplyAllFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_WriteAllFn_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*arg2)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *) = (void (*)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *)) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::WriteAllFn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::WriteAllFn",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::WriteAllFn",2,"void (*)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_WriteAllFn_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_WriteAllFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void);
  }
  
  if (arg1) (arg1)->WriteAllFn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_WriteAllFn_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void (*result)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *) = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::WriteAllFn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::WriteAllFn",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_WriteAllFn_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void (*)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *)) ((arg1)->WriteAllFn);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_UserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::UserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::UserData",1,"ImGuiSettingsHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSettingsHandler::UserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_UserData_set",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiSettingsHandler_UserData_set");
  if (arg1) (arg1)->UserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiSettingsHandler_UserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::UserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSettingsHandler::UserData",1,"ImGuiSettingsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSettingsHandler,0))){
    SWIG_fail_ptr("ImGuiSettingsHandler_UserData_get",1,SWIGTYPE_p_ImGuiSettingsHandler);
  }
  
  result = (void *) ((arg1)->UserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiSettingsHandler(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSettingsHandler *result = 0 ;
  
  SWIG_check_num_args("ImGuiSettingsHandler::ImGuiSettingsHandler",0,0)
  result = (ImGuiSettingsHandler *)new ImGuiSettingsHandler();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSettingsHandler,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiSettingsHandler(void *obj) {
ImGuiSettingsHandler *arg1 = (ImGuiSettingsHandler *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSettingsHandler(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSettingsHandler);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSettingsHandler_attributes[] = {
    { "TypeName", _wrap_ImGuiSettingsHandler_TypeName_get, _wrap_ImGuiSettingsHandler_TypeName_set },
    { "TypeHash", _wrap_ImGuiSettingsHandler_TypeHash_get, _wrap_ImGuiSettingsHandler_TypeHash_set },
    { "ClearAllFn", _wrap_ImGuiSettingsHandler_ClearAllFn_get, _wrap_ImGuiSettingsHandler_ClearAllFn_set },
    { "ReadInitFn", _wrap_ImGuiSettingsHandler_ReadInitFn_get, _wrap_ImGuiSettingsHandler_ReadInitFn_set },
    { "ReadOpenFn", _wrap_ImGuiSettingsHandler_ReadOpenFn_get, _wrap_ImGuiSettingsHandler_ReadOpenFn_set },
    { "ReadLineFn", _wrap_ImGuiSettingsHandler_ReadLineFn_get, _wrap_ImGuiSettingsHandler_ReadLineFn_set },
    { "ApplyAllFn", _wrap_ImGuiSettingsHandler_ApplyAllFn_get, _wrap_ImGuiSettingsHandler_ApplyAllFn_set },
    { "WriteAllFn", _wrap_ImGuiSettingsHandler_WriteAllFn_get, _wrap_ImGuiSettingsHandler_WriteAllFn_set },
    { "UserData", _wrap_ImGuiSettingsHandler_UserData_get, _wrap_ImGuiSettingsHandler_UserData_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSettingsHandler_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiSettingsHandler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSettingsHandler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSettingsHandler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSettingsHandler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSettingsHandler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSettingsHandler_Sf_SwigStatic = {
    "ImGuiSettingsHandler",
    swig_ImGuiSettingsHandler_Sf_SwigStatic_methods,
    swig_ImGuiSettingsHandler_Sf_SwigStatic_attributes,
    swig_ImGuiSettingsHandler_Sf_SwigStatic_constants,
    swig_ImGuiSettingsHandler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSettingsHandler_bases[] = {0};
static const char *swig_ImGuiSettingsHandler_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSettingsHandler = { "ImGuiSettingsHandler", "ImGuiSettingsHandler", &SWIGTYPE_p_ImGuiSettingsHandler,_proxy__wrap_new_ImGuiSettingsHandler, swig_delete_ImGuiSettingsHandler, swig_ImGuiSettingsHandler_methods, swig_ImGuiSettingsHandler_attributes, &swig_ImGuiSettingsHandler_Sf_SwigStatic, swig_ImGuiSettingsHandler_meta, swig_ImGuiSettingsHandler_bases, swig_ImGuiSettingsHandler_base_names };

static int _wrap_ImGuiContextHook_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiContextHookType arg2 ;
  
  SWIG_check_num_args("ImGuiContextHook::Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Type",1,"ImGuiContextHook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContextHook::Type",2,"ImGuiContextHookType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Type_set",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  arg2 = (ImGuiContextHookType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiContextHookType result;
  
  SWIG_check_num_args("ImGuiContextHook::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Type",1,"ImGuiContextHook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Type_get",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  result = (ImGuiContextHookType) ((arg1)->Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_Owner_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContextHook::Owner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Owner",1,"ImGuiContextHook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContextHook::Owner",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Owner_set",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->Owner = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_Owner_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContextHook::Owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Owner",1,"ImGuiContextHook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Owner_get",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  result = (ImGuiID) ((arg1)->Owner);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_Callback_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiContextHookCallback arg2 = (ImGuiContextHookCallback) 0 ;
  
  SWIG_check_num_args("ImGuiContextHook::Callback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Callback",1,"ImGuiContextHook *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContextHook::Callback",2,"ImGuiContextHookCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Callback_set",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiContextHook__void,0))){
    SWIG_fail_ptr("ImGuiContextHook_Callback_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiContextHook__void);
  }
  
  if (arg1) (arg1)->Callback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_Callback_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  ImGuiContextHookCallback result;
  
  SWIG_check_num_args("ImGuiContextHook::Callback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::Callback",1,"ImGuiContextHook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_Callback_get",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  result = (ImGuiContextHookCallback) ((arg1)->Callback);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiContextHook__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_UserData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiContextHook::UserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::UserData",1,"ImGuiContextHook *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContextHook::UserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_UserData_set",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiContextHook_UserData_set");
  if (arg1) (arg1)->UserData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContextHook_UserData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *arg1 = (ImGuiContextHook *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiContextHook::UserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContextHook::UserData",1,"ImGuiContextHook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("ImGuiContextHook_UserData_get",1,SWIGTYPE_p_ImGuiContextHook);
  }
  
  result = (void *) ((arg1)->UserData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiContextHook(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContextHook *result = 0 ;
  
  SWIG_check_num_args("ImGuiContextHook::ImGuiContextHook",0,0)
  result = (ImGuiContextHook *)new ImGuiContextHook();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContextHook,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiContextHook(void *obj) {
ImGuiContextHook *arg1 = (ImGuiContextHook *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiContextHook(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiContextHook);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiContextHook_attributes[] = {
    { "Type", _wrap_ImGuiContextHook_Type_get, _wrap_ImGuiContextHook_Type_set },
    { "Owner", _wrap_ImGuiContextHook_Owner_get, _wrap_ImGuiContextHook_Owner_set },
    { "Callback", _wrap_ImGuiContextHook_Callback_get, _wrap_ImGuiContextHook_Callback_set },
    { "UserData", _wrap_ImGuiContextHook_UserData_get, _wrap_ImGuiContextHook_UserData_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiContextHook_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiContextHook_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiContextHook_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiContextHook_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiContextHook_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiContextHook_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiContextHook_Sf_SwigStatic = {
    "ImGuiContextHook",
    swig_ImGuiContextHook_Sf_SwigStatic_methods,
    swig_ImGuiContextHook_Sf_SwigStatic_attributes,
    swig_ImGuiContextHook_Sf_SwigStatic_constants,
    swig_ImGuiContextHook_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiContextHook_bases[] = {0};
static const char *swig_ImGuiContextHook_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiContextHook = { "ImGuiContextHook", "ImGuiContextHook", &SWIGTYPE_p_ImGuiContextHook,_proxy__wrap_new_ImGuiContextHook, swig_delete_ImGuiContextHook, swig_ImGuiContextHook_methods, swig_ImGuiContextHook_attributes, &swig_ImGuiContextHook_Sf_SwigStatic, swig_ImGuiContextHook_meta, swig_ImGuiContextHook_bases, swig_ImGuiContextHook_base_names };

static int _wrap_ImGuiContext_Initialized_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::Initialized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Initialized",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::Initialized",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Initialized_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Initialized = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Initialized_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::Initialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Initialized",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Initialized_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->Initialized);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontAtlasOwnedByContext_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FontAtlasOwnedByContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontAtlasOwnedByContext",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::FontAtlasOwnedByContext",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontAtlasOwnedByContext_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->FontAtlasOwnedByContext = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontAtlasOwnedByContext_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::FontAtlasOwnedByContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontAtlasOwnedByContext",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontAtlasOwnedByContext_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->FontAtlasOwnedByContext);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_IO_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiIO *arg2 = (ImGuiIO *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::IO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::IO",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::IO",2,"ImGuiIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_IO_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiIO,0))){
    SWIG_fail_ptr("ImGuiContext_IO_set",2,SWIGTYPE_p_ImGuiIO);
  }
  
  if (arg1) (arg1)->IO = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_IO_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiIO *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::IO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::IO",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_IO_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiIO *)& ((arg1)->IO);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformIO_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiPlatformIO *arg2 = (ImGuiPlatformIO *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformIO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformIO",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::PlatformIO",2,"ImGuiPlatformIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformIO_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiPlatformIO,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformIO_set",2,SWIGTYPE_p_ImGuiPlatformIO);
  }
  
  if (arg1) (arg1)->PlatformIO = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformIO_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiPlatformIO *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformIO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformIO",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformIO_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiPlatformIO *)& ((arg1)->PlatformIO);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Style_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiStyle *arg2 = (ImGuiStyle *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::Style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Style",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::Style",2,"ImGuiStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Style_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStyle,0))){
    SWIG_fail_ptr("ImGuiContext_Style_set",2,SWIGTYPE_p_ImGuiStyle);
  }
  
  if (arg1) (arg1)->Style = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Style_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiStyle *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::Style",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Style",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Style_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiStyle *)& ((arg1)->Style);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ConfigFlagsCurrFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiConfigFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ConfigFlagsCurrFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ConfigFlagsCurrFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ConfigFlagsCurrFrame",2,"ImGuiConfigFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ConfigFlagsCurrFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiConfigFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ConfigFlagsCurrFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ConfigFlagsCurrFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiConfigFlags result;
  
  SWIG_check_num_args("ImGuiContext::ConfigFlagsCurrFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ConfigFlagsCurrFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ConfigFlagsCurrFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiConfigFlags) ((arg1)->ConfigFlagsCurrFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ConfigFlagsLastFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiConfigFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ConfigFlagsLastFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ConfigFlagsLastFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ConfigFlagsLastFrame",2,"ImGuiConfigFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ConfigFlagsLastFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiConfigFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ConfigFlagsLastFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ConfigFlagsLastFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiConfigFlags result;
  
  SWIG_check_num_args("ImGuiContext::ConfigFlagsLastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ConfigFlagsLastFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ConfigFlagsLastFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiConfigFlags) ((arg1)->ConfigFlagsLastFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Font_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::Font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Font",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::Font",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Font_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_Font_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->Font = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Font_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::Font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Font",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Font_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImFont *) ((arg1)->Font);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontSize",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontSize_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::FontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontSize",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontSize_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->FontSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontBaseSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FontBaseSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontBaseSize",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FontBaseSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontBaseSize_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontBaseSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontBaseSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::FontBaseSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontBaseSize",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontBaseSize_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->FontBaseSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DrawListSharedData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::DrawListSharedData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DrawListSharedData",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DrawListSharedData",2,"ImDrawListSharedData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DrawListSharedData_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSharedData,0))){
    SWIG_fail_ptr("ImGuiContext_DrawListSharedData_set",2,SWIGTYPE_p_ImDrawListSharedData);
  }
  
  if (arg1) (arg1)->DrawListSharedData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DrawListSharedData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImDrawListSharedData *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DrawListSharedData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DrawListSharedData",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DrawListSharedData_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImDrawListSharedData *)& ((arg1)->DrawListSharedData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Time_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ImGuiContext::Time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Time",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::Time",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Time_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->Time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Time_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  double result;
  
  SWIG_check_num_args("ImGuiContext::Time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Time",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Time_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (double) ((arg1)->Time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FrameCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FrameCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FrameCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FrameCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountEnded_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FrameCountEnded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountEnded",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FrameCountEnded",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountEnded_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameCountEnded = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountEnded_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FrameCountEnded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountEnded",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountEnded_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FrameCountEnded);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountPlatformEnded_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FrameCountPlatformEnded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountPlatformEnded",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FrameCountPlatformEnded",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountPlatformEnded_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameCountPlatformEnded = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountPlatformEnded_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FrameCountPlatformEnded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountPlatformEnded",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountPlatformEnded_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FrameCountPlatformEnded);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountRendered_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FrameCountRendered",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountRendered",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FrameCountRendered",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountRendered_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FrameCountRendered = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FrameCountRendered_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FrameCountRendered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FrameCountRendered",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FrameCountRendered_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FrameCountRendered);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinFrameScope_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WithinFrameScope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinFrameScope",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::WithinFrameScope",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinFrameScope_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WithinFrameScope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinFrameScope_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::WithinFrameScope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinFrameScope",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinFrameScope_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->WithinFrameScope);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinFrameScopeWithImplicitWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WithinFrameScopeWithImplicitWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinFrameScopeWithImplicitWindow",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::WithinFrameScopeWithImplicitWindow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinFrameScopeWithImplicitWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WithinFrameScopeWithImplicitWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinFrameScopeWithImplicitWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::WithinFrameScopeWithImplicitWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinFrameScopeWithImplicitWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinFrameScopeWithImplicitWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->WithinFrameScopeWithImplicitWindow);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinEndChild_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WithinEndChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinEndChild",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::WithinEndChild",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinEndChild_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WithinEndChild = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WithinEndChild_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::WithinEndChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WithinEndChild",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WithinEndChild_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->WithinEndChild);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngineHookItems_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::TestEngineHookItems",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngineHookItems",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::TestEngineHookItems",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngineHookItems_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->TestEngineHookItems = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngineHookItems_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::TestEngineHookItems",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngineHookItems",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngineHookItems_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->TestEngineHookItems);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngineHookIdInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::TestEngineHookIdInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngineHookIdInfo",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::TestEngineHookIdInfo",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngineHookIdInfo_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->TestEngineHookIdInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngineHookIdInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::TestEngineHookIdInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngineHookIdInfo",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngineHookIdInfo_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->TestEngineHookIdInfo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngine_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::TestEngine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngine",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::TestEngine",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngine_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiContext_TestEngine_set");
  if (arg1) (arg1)->TestEngine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TestEngine_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::TestEngine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TestEngine",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TestEngine_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (void *) ((arg1)->TestEngine);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Windows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::Windows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Windows",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::Windows",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Windows_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_Windows_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->Windows = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Windows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::Windows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Windows",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Windows_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->Windows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsFocusOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsFocusOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsFocusOrder",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::WindowsFocusOrder",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsFocusOrder_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsFocusOrder_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->WindowsFocusOrder = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsFocusOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsFocusOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsFocusOrder",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsFocusOrder_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->WindowsFocusOrder);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsTempSortBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsTempSortBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsTempSortBuffer",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::WindowsTempSortBuffer",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsTempSortBuffer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsTempSortBuffer_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->WindowsTempSortBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsTempSortBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsTempSortBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsTempSortBuffer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsTempSortBuffer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->WindowsTempSortBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentWindowStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentWindowStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentWindowStack",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::CurrentWindowStack",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindowStack_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindowStack_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->CurrentWindowStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentWindowStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentWindowStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentWindowStack",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindowStack_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->CurrentWindowStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsById_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiStorage *arg2 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsById",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::WindowsById",2,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsById_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsById_set",2,SWIGTYPE_p_ImGuiStorage);
  }
  
  if (arg1) (arg1)->WindowsById = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsById_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsById",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsById",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsById_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiStorage *)& ((arg1)->WindowsById);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsActiveCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WindowsActiveCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsActiveCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::WindowsActiveCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsActiveCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowsActiveCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WindowsActiveCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::WindowsActiveCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WindowsActiveCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WindowsActiveCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->WindowsActiveCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::CurrentWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->CurrentWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->CurrentWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::HoveredWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->HoveredWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->HoveredWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredRootWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredRootWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredRootWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::HoveredRootWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredRootWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_HoveredRootWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->HoveredRootWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredRootWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredRootWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredRootWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredRootWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->HoveredRootWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredWindowUnderMovingWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredWindowUnderMovingWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredWindowUnderMovingWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::HoveredWindowUnderMovingWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindowUnderMovingWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindowUnderMovingWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->HoveredWindowUnderMovingWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredWindowUnderMovingWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredWindowUnderMovingWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredWindowUnderMovingWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredWindowUnderMovingWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->HoveredWindowUnderMovingWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredDockNode_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredDockNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredDockNode",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::HoveredDockNode",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredDockNode_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_HoveredDockNode_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->HoveredDockNode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredDockNode_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredDockNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredDockNode",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredDockNode_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDockNode *) ((arg1)->HoveredDockNode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MovingWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::MovingWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MovingWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::MovingWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MovingWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_MovingWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->MovingWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MovingWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::MovingWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MovingWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MovingWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->MovingWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::WheelingWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->WheelingWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->WheelingWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindowRefMousePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindowRefMousePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindowRefMousePos",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::WheelingWindowRefMousePos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindowRefMousePos_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindowRefMousePos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WheelingWindowRefMousePos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindowRefMousePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindowRefMousePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindowRefMousePos",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindowRefMousePos_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec2 *)& ((arg1)->WheelingWindowRefMousePos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindowTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindowTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindowTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::WheelingWindowTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindowTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WheelingWindowTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WheelingWindowTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::WheelingWindowTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WheelingWindowTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WheelingWindowTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->WheelingWindowTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::HoveredId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->HoveredId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::HoveredId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->HoveredId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdPreviousFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdPreviousFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdPreviousFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::HoveredIdPreviousFrame",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdPreviousFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->HoveredIdPreviousFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdPreviousFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdPreviousFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdPreviousFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdPreviousFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->HoveredIdPreviousFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdAllowOverlap_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdAllowOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdAllowOverlap",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::HoveredIdAllowOverlap",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdAllowOverlap_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->HoveredIdAllowOverlap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdAllowOverlap_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdAllowOverlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdAllowOverlap",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdAllowOverlap_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->HoveredIdAllowOverlap);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdDisabled_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdDisabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdDisabled",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::HoveredIdDisabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdDisabled_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->HoveredIdDisabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdDisabled_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdDisabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdDisabled",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdDisabled_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->HoveredIdDisabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::HoveredIdTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->HoveredIdTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->HoveredIdTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdNotActiveTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdNotActiveTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdNotActiveTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::HoveredIdNotActiveTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdNotActiveTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->HoveredIdNotActiveTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_HoveredIdNotActiveTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::HoveredIdNotActiveTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::HoveredIdNotActiveTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_HoveredIdNotActiveTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->HoveredIdNotActiveTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::ActiveId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->ActiveId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdIsAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdIsAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdIsAlive",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdIsAlive",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdIsAlive_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdIsAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdIsAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdIsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdIsAlive",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdIsAlive_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->ActiveIdIsAlive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->ActiveIdTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdIsJustActivated_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdIsJustActivated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdIsJustActivated",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdIsJustActivated",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdIsJustActivated_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdIsJustActivated = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdIsJustActivated_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdIsJustActivated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdIsJustActivated",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdIsJustActivated_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdIsJustActivated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdAllowOverlap_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdAllowOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdAllowOverlap",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdAllowOverlap",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdAllowOverlap_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdAllowOverlap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdAllowOverlap_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdAllowOverlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdAllowOverlap",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdAllowOverlap_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdAllowOverlap);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdNoClearOnFocusLoss_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdNoClearOnFocusLoss",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdNoClearOnFocusLoss",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdNoClearOnFocusLoss",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdNoClearOnFocusLoss_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdNoClearOnFocusLoss = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdNoClearOnFocusLoss_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdNoClearOnFocusLoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdNoClearOnFocusLoss",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdNoClearOnFocusLoss_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdNoClearOnFocusLoss);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenPressedBefore_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenPressedBefore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenPressedBefore",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenPressedBefore",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenPressedBefore_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdHasBeenPressedBefore = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenPressedBefore_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenPressedBefore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenPressedBefore",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenPressedBefore_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdHasBeenPressedBefore);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenEditedBefore_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenEditedBefore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedBefore",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedBefore",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenEditedBefore_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdHasBeenEditedBefore = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenEditedBefore_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenEditedBefore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedBefore",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenEditedBefore_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdHasBeenEditedBefore);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenEditedThisFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenEditedThisFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedThisFrame",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedThisFrame",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenEditedThisFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdHasBeenEditedThisFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdHasBeenEditedThisFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdHasBeenEditedThisFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdHasBeenEditedThisFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdHasBeenEditedThisFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdHasBeenEditedThisFrame);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingNavDirMask_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingNavDirMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavDirMask",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavDirMask",2,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingNavDirMask_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdUsingNavDirMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingNavDirMask_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingNavDirMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavDirMask",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingNavDirMask_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImU32) ((arg1)->ActiveIdUsingNavDirMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingNavInputMask_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingNavInputMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavInputMask",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavInputMask",2,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingNavInputMask_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdUsingNavInputMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingNavInputMask_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingNavInputMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingNavInputMask",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingNavInputMask_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImU32) ((arg1)->ActiveIdUsingNavInputMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingKeyInputMask_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU64 arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingKeyInputMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingKeyInputMask",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingKeyInputMask",2,"ImU64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingKeyInputMask_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImU64)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdUsingKeyInputMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdUsingKeyInputMask_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImU64 result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdUsingKeyInputMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdUsingKeyInputMask",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdUsingKeyInputMask_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImU64) ((arg1)->ActiveIdUsingKeyInputMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdClickOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdClickOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdClickOffset",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdClickOffset",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdClickOffset_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdClickOffset_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ActiveIdClickOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdClickOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdClickOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdClickOffset",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdClickOffset_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec2 *)& ((arg1)->ActiveIdClickOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->ActiveIdWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->ActiveIdWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdSource_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputSource arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdSource",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdSource",2,"ImGuiInputSource");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdSource_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiInputSource)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdSource = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdSource_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputSource result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdSource",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdSource_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiInputSource) ((arg1)->ActiveIdSource);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdMouseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdMouseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdMouseButton",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdMouseButton",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdMouseButton_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdMouseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdMouseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdMouseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdMouseButton",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdMouseButton_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->ActiveIdMouseButton);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrame",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ActiveIdPreviousFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->ActiveIdPreviousFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameIsAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameIsAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameIsAlive",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameIsAlive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameIsAlive_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdPreviousFrameIsAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameIsAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameIsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameIsAlive",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameIsAlive_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdPreviousFrameIsAlive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ActiveIdPreviousFrameHasBeenEditedBefore = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->ActiveIdPreviousFrameHasBeenEditedBefore);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->ActiveIdPreviousFrameWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ActiveIdPreviousFrameWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ActiveIdPreviousFrameWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ActiveIdPreviousFrameWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ActiveIdPreviousFrameWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->ActiveIdPreviousFrameWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastActiveId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LastActiveId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastActiveId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LastActiveId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastActiveId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastActiveId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastActiveId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::LastActiveId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastActiveId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastActiveId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->LastActiveId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastActiveIdTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LastActiveIdTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastActiveIdTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LastActiveIdTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastActiveIdTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastActiveIdTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastActiveIdTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::LastActiveIdTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastActiveIdTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastActiveIdTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->LastActiveIdTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NextWindowData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNextWindowData *arg2 = (ImGuiNextWindowData *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NextWindowData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NextWindowData",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NextWindowData",2,"ImGuiNextWindowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NextWindowData_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiNextWindowData,0))){
    SWIG_fail_ptr("ImGuiContext_NextWindowData_set",2,SWIGTYPE_p_ImGuiNextWindowData);
  }
  
  if (arg1) (arg1)->NextWindowData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NextWindowData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNextWindowData *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NextWindowData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NextWindowData",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NextWindowData_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNextWindowData *)& ((arg1)->NextWindowData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNextWindowData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NextItemData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNextItemData *arg2 = (ImGuiNextItemData *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NextItemData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NextItemData",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NextItemData",2,"ImGuiNextItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NextItemData_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiNextItemData,0))){
    SWIG_fail_ptr("ImGuiContext_NextItemData_set",2,SWIGTYPE_p_ImGuiNextItemData);
  }
  
  if (arg1) (arg1)->NextItemData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NextItemData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNextItemData *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NextItemData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NextItemData",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NextItemData_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNextItemData *)& ((arg1)->NextItemData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNextItemData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorModifiers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiColorMod > *arg2 = (ImVector< ImGuiColorMod > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ColorModifiers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorModifiers",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ColorModifiers",2,"ImVector< ImGuiColorMod > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorModifiers_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiColorMod_t,0))){
    SWIG_fail_ptr("ImGuiContext_ColorModifiers_set",2,SWIGTYPE_p_ImVectorT_ImGuiColorMod_t);
  }
  
  if (arg1) (arg1)->ColorModifiers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorModifiers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiColorMod > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ColorModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorModifiers",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorModifiers_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiColorMod > *)& ((arg1)->ColorModifiers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiColorMod_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_StyleModifiers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiStyleMod > *arg2 = (ImVector< ImGuiStyleMod > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::StyleModifiers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::StyleModifiers",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::StyleModifiers",2,"ImVector< ImGuiStyleMod > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_StyleModifiers_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiStyleMod_t,0))){
    SWIG_fail_ptr("ImGuiContext_StyleModifiers_set",2,SWIGTYPE_p_ImVectorT_ImGuiStyleMod_t);
  }
  
  if (arg1) (arg1)->StyleModifiers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_StyleModifiers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiStyleMod > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::StyleModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::StyleModifiers",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_StyleModifiers_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiStyleMod > *)& ((arg1)->StyleModifiers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiStyleMod_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImFont * > *arg2 = (ImVector< ImFont * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::FontStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontStack",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::FontStack",2,"ImVector< ImFont * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontStack_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFont_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_FontStack_set",2,SWIGTYPE_p_ImVectorT_ImFont_p_t);
  }
  
  if (arg1) (arg1)->FontStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FontStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImFont * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::FontStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FontStack",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FontStack_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImFont * > *)& ((arg1)->FontStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFont_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_OpenPopupStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPopupData > *arg2 = (ImVector< ImGuiPopupData > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::OpenPopupStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::OpenPopupStack",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::OpenPopupStack",2,"ImVector< ImGuiPopupData > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_OpenPopupStack_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t,0))){
    SWIG_fail_ptr("ImGuiContext_OpenPopupStack_set",2,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t);
  }
  
  if (arg1) (arg1)->OpenPopupStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_OpenPopupStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPopupData > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::OpenPopupStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::OpenPopupStack",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_OpenPopupStack_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiPopupData > *)& ((arg1)->OpenPopupStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_BeginPopupStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPopupData > *arg2 = (ImVector< ImGuiPopupData > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::BeginPopupStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::BeginPopupStack",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::BeginPopupStack",2,"ImVector< ImGuiPopupData > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_BeginPopupStack_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t,0))){
    SWIG_fail_ptr("ImGuiContext_BeginPopupStack_set",2,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t);
  }
  
  if (arg1) (arg1)->BeginPopupStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_BeginPopupStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPopupData > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::BeginPopupStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::BeginPopupStack",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_BeginPopupStack_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiPopupData > *)& ((arg1)->BeginPopupStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiPopupData_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Viewports_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiViewportP * > *arg2 = (ImVector< ImGuiViewportP * > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::Viewports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Viewports",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::Viewports",2,"ImVector< ImGuiViewportP * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Viewports_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiViewportP_p_t,0))){
    SWIG_fail_ptr("ImGuiContext_Viewports_set",2,SWIGTYPE_p_ImVectorT_ImGuiViewportP_p_t);
  }
  
  if (arg1) (arg1)->Viewports = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Viewports_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiViewportP * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::Viewports",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Viewports",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Viewports_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiViewportP * > *)& ((arg1)->Viewports);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiViewportP_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentDpiScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentDpiScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentDpiScale",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::CurrentDpiScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentDpiScale_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurrentDpiScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentDpiScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::CurrentDpiScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentDpiScale",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentDpiScale_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->CurrentDpiScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *arg2 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentViewport",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::CurrentViewport",2,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentViewport_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewportP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_CurrentViewport_set",2,SWIGTYPE_p_ImGuiViewportP);
  }
  
  if (arg1) (arg1)->CurrentViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentViewport",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentViewport_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiViewportP *) ((arg1)->CurrentViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *arg2 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::MouseViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseViewport",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::MouseViewport",2,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseViewport_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewportP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_MouseViewport_set",2,SWIGTYPE_p_ImGuiViewportP);
  }
  
  if (arg1) (arg1)->MouseViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::MouseViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseViewport",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseViewport_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiViewportP *) ((arg1)->MouseViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseLastHoveredViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *arg2 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::MouseLastHoveredViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseLastHoveredViewport",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::MouseLastHoveredViewport",2,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseLastHoveredViewport_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewportP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_MouseLastHoveredViewport_set",2,SWIGTYPE_p_ImGuiViewportP);
  }
  
  if (arg1) (arg1)->MouseLastHoveredViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseLastHoveredViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::MouseLastHoveredViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseLastHoveredViewport",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseLastHoveredViewport_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiViewportP *) ((arg1)->MouseLastHoveredViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ViewportFrontMostStampCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ViewportFrontMostStampCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ViewportFrontMostStampCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ViewportFrontMostStampCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ViewportFrontMostStampCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportFrontMostStampCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ViewportFrontMostStampCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::ViewportFrontMostStampCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ViewportFrontMostStampCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ViewportFrontMostStampCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->ViewportFrontMostStampCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_NavWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavFocusScopeId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavFocusScopeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavFocusScopeId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavFocusScopeId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavFocusScopeId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavFocusScopeId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavFocusScopeId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavFocusScopeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavFocusScopeId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavFocusScopeId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavFocusScopeId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivateId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavActivateId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivateId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavActivateId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivateId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavActivateId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivateId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavActivateId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivateId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivateId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavActivateId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivateDownId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavActivateDownId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivateDownId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavActivateDownId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivateDownId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavActivateDownId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivateDownId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavActivateDownId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivateDownId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivateDownId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavActivateDownId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivatePressedId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavActivatePressedId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivatePressedId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavActivatePressedId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivatePressedId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavActivatePressedId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavActivatePressedId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavActivatePressedId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavActivatePressedId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavActivatePressedId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavActivatePressedId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInputId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavInputId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInputId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavInputId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInputId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavInputId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInputId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavInputId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInputId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInputId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavInputId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustTabbedId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavJustTabbedId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustTabbedId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavJustTabbedId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustTabbedId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavJustTabbedId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustTabbedId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavJustTabbedId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustTabbedId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustTabbedId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavJustTabbedId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavJustMovedToId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavJustMovedToId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavJustMovedToId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToFocusScopeId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToFocusScopeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToFocusScopeId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavJustMovedToFocusScopeId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToFocusScopeId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavJustMovedToFocusScopeId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToFocusScopeId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToFocusScopeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToFocusScopeId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToFocusScopeId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavJustMovedToFocusScopeId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToKeyMods_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiKeyModFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToKeyMods",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToKeyMods",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavJustMovedToKeyMods",2,"ImGuiKeyModFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToKeyMods_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiKeyModFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavJustMovedToKeyMods = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavJustMovedToKeyMods_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiKeyModFlags result;
  
  SWIG_check_num_args("ImGuiContext::NavJustMovedToKeyMods",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavJustMovedToKeyMods",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavJustMovedToKeyMods_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiKeyModFlags) ((arg1)->NavJustMovedToKeyMods);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavNextActivateId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavNextActivateId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavNextActivateId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavNextActivateId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavNextActivateId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavNextActivateId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavNextActivateId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavNextActivateId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavNextActivateId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavNextActivateId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavNextActivateId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInputSource_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputSource arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavInputSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInputSource",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavInputSource",2,"ImGuiInputSource");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInputSource_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiInputSource)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavInputSource = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInputSource_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputSource result;
  
  SWIG_check_num_args("ImGuiContext::NavInputSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInputSource",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInputSource_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiInputSource) ((arg1)->NavInputSource);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavScoringRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavScoringRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavScoringRect",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavScoringRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavScoringRect_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiContext_NavScoringRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->NavScoringRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavScoringRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavScoringRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavScoringRect",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavScoringRect_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImRect *)& ((arg1)->NavScoringRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavScoringCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavScoringCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavScoringCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavScoringCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavScoringCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavScoringCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavScoringCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::NavScoringCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavScoringCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavScoringCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->NavScoringCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavLayer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavLayer arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavLayer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavLayer",2,"ImGuiNavLayer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavLayer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiNavLayer)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavLayer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavLayer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavLayer result;
  
  SWIG_check_num_args("ImGuiContext::NavLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavLayer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavLayer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavLayer) ((arg1)->NavLayer);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavIdTabCounter_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavIdTabCounter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavIdTabCounter",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavIdTabCounter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavIdTabCounter_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavIdTabCounter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavIdTabCounter_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::NavIdTabCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavIdTabCounter",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavIdTabCounter_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->NavIdTabCounter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavIdIsAlive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavIdIsAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavIdIsAlive",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavIdIsAlive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavIdIsAlive_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavIdIsAlive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavIdIsAlive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavIdIsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavIdIsAlive",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavIdIsAlive_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavIdIsAlive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMousePosDirty_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMousePosDirty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMousePosDirty",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavMousePosDirty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMousePosDirty_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavMousePosDirty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMousePosDirty_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavMousePosDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMousePosDirty",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMousePosDirty_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavMousePosDirty);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavDisableHighlight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavDisableHighlight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavDisableHighlight",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavDisableHighlight",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavDisableHighlight_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavDisableHighlight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavDisableHighlight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavDisableHighlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavDisableHighlight",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavDisableHighlight_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavDisableHighlight);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavDisableMouseHover_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavDisableMouseHover",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavDisableMouseHover",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavDisableMouseHover",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavDisableMouseHover_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavDisableMouseHover = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavDisableMouseHover_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavDisableMouseHover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavDisableMouseHover",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavDisableMouseHover_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavDisableMouseHover);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavAnyRequest_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavAnyRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavAnyRequest",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavAnyRequest",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavAnyRequest_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavAnyRequest = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavAnyRequest_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavAnyRequest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavAnyRequest",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavAnyRequest_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavAnyRequest);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitRequest_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavInitRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitRequest",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavInitRequest",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitRequest_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavInitRequest = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitRequest_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavInitRequest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitRequest",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitRequest_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavInitRequest);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitRequestFromMove_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavInitRequestFromMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitRequestFromMove",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavInitRequestFromMove",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitRequestFromMove_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavInitRequestFromMove = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitRequestFromMove_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavInitRequestFromMove",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitRequestFromMove",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitRequestFromMove_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavInitRequestFromMove);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitResultId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavInitResultId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitResultId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavInitResultId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitResultId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavInitResultId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitResultId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::NavInitResultId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitResultId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitResultId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->NavInitResultId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitResultRectRel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavInitResultRectRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitResultRectRel",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavInitResultRectRel",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitResultRectRel_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitResultRectRel_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->NavInitResultRectRel = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavInitResultRectRel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavInitResultRectRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavInitResultRectRel",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavInitResultRectRel_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImRect *)& ((arg1)->NavInitResultRectRel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequest_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequest",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveRequest",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequest_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavMoveRequest = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequest_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequest",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequest_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavMoveRequest);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestFlags",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveRequestFlags",2,"ImGuiNavMoveFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestFlags_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiNavMoveFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveRequestFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveFlags result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestFlags",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestFlags_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavMoveFlags) ((arg1)->NavMoveRequestFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestForward_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavForward arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestForward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestForward",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveRequestForward",2,"ImGuiNavForward");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestForward_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiNavForward)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveRequestForward = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestForward_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavForward result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestForward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestForward",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestForward_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavForward) ((arg1)->NavMoveRequestForward);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestKeyMods_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiKeyModFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestKeyMods",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestKeyMods",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveRequestKeyMods",2,"ImGuiKeyModFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestKeyMods_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiKeyModFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveRequestKeyMods = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveRequestKeyMods_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiKeyModFlags result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveRequestKeyMods",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveRequestKeyMods",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveRequestKeyMods_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiKeyModFlags) ((arg1)->NavMoveRequestKeyMods);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveDir_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveDir",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveDir",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveDir_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveDir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveDir_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveDir",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveDir_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDir) ((arg1)->NavMoveDir);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveDirLast_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveDirLast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveDirLast",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveDirLast",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveDirLast_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveDirLast = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveDirLast_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveDirLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveDirLast",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveDirLast_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDir) ((arg1)->NavMoveDirLast);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveClipDir_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveClipDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveClipDir",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveClipDir",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveClipDir_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavMoveClipDir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveClipDir_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiContext::NavMoveClipDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveClipDir",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveClipDir_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDir) ((arg1)->NavMoveClipDir);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultLocal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *arg2 = (ImGuiNavMoveResult *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocal",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocal",2,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocal_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocal_set",2,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  if (arg1) (arg1)->NavMoveResultLocal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultLocal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocal",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocal_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavMoveResult *)& ((arg1)->NavMoveResultLocal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNavMoveResult,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultLocalVisibleSet_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *arg2 = (ImGuiNavMoveResult *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultLocalVisibleSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocalVisibleSet",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocalVisibleSet",2,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocalVisibleSet_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocalVisibleSet_set",2,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  if (arg1) (arg1)->NavMoveResultLocalVisibleSet = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultLocalVisibleSet_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultLocalVisibleSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultLocalVisibleSet",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultLocalVisibleSet_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavMoveResult *)& ((arg1)->NavMoveResultLocalVisibleSet);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNavMoveResult,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultOther_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *arg2 = (ImGuiNavMoveResult *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultOther",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultOther",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavMoveResultOther",2,"ImGuiNavMoveResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultOther_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiNavMoveResult,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultOther_set",2,SWIGTYPE_p_ImGuiNavMoveResult);
  }
  
  if (arg1) (arg1)->NavMoveResultOther = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavMoveResultOther_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveResult *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavMoveResultOther",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavMoveResultOther",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavMoveResultOther_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavMoveResult *)& ((arg1)->NavMoveResultOther);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiNavMoveResult,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWrapRequestWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWrapRequestWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWrapRequestWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavWrapRequestWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWrapRequestWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_NavWrapRequestWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavWrapRequestWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWrapRequestWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWrapRequestWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWrapRequestWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWrapRequestWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavWrapRequestWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWrapRequestFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavWrapRequestFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWrapRequestFlags",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavWrapRequestFlags",2,"ImGuiNavMoveFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWrapRequestFlags_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiNavMoveFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavWrapRequestFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWrapRequestFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiNavMoveFlags result;
  
  SWIG_check_num_args("ImGuiContext::NavWrapRequestFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWrapRequestFlags",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWrapRequestFlags_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiNavMoveFlags) ((arg1)->NavWrapRequestFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTarget",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingTarget",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTarget_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTarget_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavWindowingTarget = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTarget",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTarget_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavWindowingTarget);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTargetAnim_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTargetAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTargetAnim",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingTargetAnim",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTargetAnim_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTargetAnim_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavWindowingTargetAnim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTargetAnim_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTargetAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTargetAnim",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTargetAnim_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavWindowingTargetAnim);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingListWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingListWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingListWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingListWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingListWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingListWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavWindowingListWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingListWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingListWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingListWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingListWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavWindowingListWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavWindowingTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->NavWindowingTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingHighlightAlpha_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingHighlightAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingHighlightAlpha",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingHighlightAlpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingHighlightAlpha_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavWindowingHighlightAlpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingHighlightAlpha_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingHighlightAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingHighlightAlpha",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingHighlightAlpha_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->NavWindowingHighlightAlpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingToggleLayer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingToggleLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingToggleLayer",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::NavWindowingToggleLayer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingToggleLayer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavWindowingToggleLayer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_NavWindowingToggleLayer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::NavWindowingToggleLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::NavWindowingToggleLayer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_NavWindowingToggleLayer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->NavWindowingToggleLayer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->FocusRequestCurrWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->FocusRequestCurrWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestNextWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextWindow_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->FocusRequestNextWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextWindow",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextWindow_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiWindow *) ((arg1)->FocusRequestNextWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrCounterRegular_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrCounterRegular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterRegular",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterRegular",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrCounterRegular_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusRequestCurrCounterRegular = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrCounterRegular_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrCounterRegular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterRegular",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrCounterRegular_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FocusRequestCurrCounterRegular);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrCounterTabStop_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrCounterTabStop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterTabStop",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterTabStop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrCounterTabStop_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusRequestCurrCounterTabStop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestCurrCounterTabStop_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestCurrCounterTabStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestCurrCounterTabStop",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestCurrCounterTabStop_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FocusRequestCurrCounterTabStop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextCounterRegular_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextCounterRegular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterRegular",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterRegular",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextCounterRegular_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusRequestNextCounterRegular = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextCounterRegular_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextCounterRegular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterRegular",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextCounterRegular_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FocusRequestNextCounterRegular);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextCounterTabStop_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextCounterTabStop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterTabStop",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterTabStop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextCounterTabStop_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusRequestNextCounterTabStop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusRequestNextCounterTabStop_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FocusRequestNextCounterTabStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusRequestNextCounterTabStop",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusRequestNextCounterTabStop_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FocusRequestNextCounterTabStop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusTabPressed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FocusTabPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusTabPressed",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::FocusTabPressed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusTabPressed_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->FocusTabPressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FocusTabPressed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::FocusTabPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FocusTabPressed",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FocusTabPressed_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->FocusTabPressed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DimBgRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DimBgRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DimBgRatio",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DimBgRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DimBgRatio_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DimBgRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DimBgRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::DimBgRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DimBgRatio",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DimBgRatio_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->DimBgRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseCursor_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiMouseCursor arg2 ;
  
  SWIG_check_num_args("ImGuiContext::MouseCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseCursor",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::MouseCursor",2,"ImGuiMouseCursor");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseCursor_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiMouseCursor)lua_tonumber(L, 2);
  if (arg1) (arg1)->MouseCursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MouseCursor_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiMouseCursor result;
  
  SWIG_check_num_args("ImGuiContext::MouseCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MouseCursor",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MouseCursor_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiMouseCursor) ((arg1)->MouseCursor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropActive",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::DragDropActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropActive_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DragDropActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::DragDropActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropActive",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropActive_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->DragDropActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropWithinSource_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropWithinSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropWithinSource",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::DragDropWithinSource",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropWithinSource_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DragDropWithinSource = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropWithinSource_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::DragDropWithinSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropWithinSource",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropWithinSource_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->DragDropWithinSource);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropWithinTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropWithinTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropWithinTarget",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::DragDropWithinTarget",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropWithinTarget_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DragDropWithinTarget = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropWithinTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::DragDropWithinTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropWithinTarget",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropWithinTarget_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->DragDropWithinTarget);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropSourceFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDragDropFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropSourceFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropSourceFlags",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropSourceFlags",2,"ImGuiDragDropFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropSourceFlags_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiDragDropFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropSourceFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropSourceFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDragDropFlags result;
  
  SWIG_check_num_args("ImGuiContext::DragDropSourceFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropSourceFlags",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropSourceFlags_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDragDropFlags) ((arg1)->DragDropSourceFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropSourceFrameCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropSourceFrameCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropSourceFrameCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropSourceFrameCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropSourceFrameCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropSourceFrameCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropSourceFrameCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::DragDropSourceFrameCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropSourceFrameCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropSourceFrameCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->DragDropSourceFrameCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropMouseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropMouseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropMouseButton",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropMouseButton",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropMouseButton_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropMouseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropMouseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::DragDropMouseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropMouseButton",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropMouseButton_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->DragDropMouseButton);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayload_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiPayload *arg2 = (ImGuiPayload *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayload",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayload",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DragDropPayload",2,"ImGuiPayload *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayload_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiPayload,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayload_set",2,SWIGTYPE_p_ImGuiPayload);
  }
  
  if (arg1) (arg1)->DragDropPayload = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayload_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiPayload *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayload",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayload_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiPayload *)& ((arg1)->DragDropPayload);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropTargetRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropTargetRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropTargetRect",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DragDropTargetRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropTargetRect_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropTargetRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->DragDropTargetRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropTargetRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropTargetRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropTargetRect",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropTargetRect_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImRect *)& ((arg1)->DragDropTargetRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropTargetId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropTargetId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropTargetId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropTargetId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropTargetId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropTargetId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropTargetId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::DragDropTargetId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropTargetId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropTargetId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->DragDropTargetId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDragDropFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFlags",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFlags",2,"ImGuiDragDropFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptFlags_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiDragDropFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropAcceptFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDragDropFlags result;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFlags",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptFlags_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDragDropFlags) ((arg1)->DragDropAcceptFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdCurrRectSurface_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdCurrRectSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurrRectSurface",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurrRectSurface",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdCurrRectSurface_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropAcceptIdCurrRectSurface = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdCurrRectSurface_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdCurrRectSurface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurrRectSurface",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdCurrRectSurface_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->DragDropAcceptIdCurrRectSurface);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdCurr_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdCurr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurr",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurr",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdCurr_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropAcceptIdCurr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdCurr_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdCurr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdCurr",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdCurr_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->DragDropAcceptIdCurr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdPrev",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdPrev",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdPrev_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropAcceptIdPrev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptIdPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptIdPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptIdPrev",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptIdPrev_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->DragDropAcceptIdPrev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptFrameCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptFrameCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFrameCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFrameCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptFrameCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropAcceptFrameCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropAcceptFrameCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::DragDropAcceptFrameCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropAcceptFrameCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropAcceptFrameCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->DragDropAcceptFrameCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropHoldJustPressedId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropHoldJustPressedId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropHoldJustPressedId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragDropHoldJustPressedId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropHoldJustPressedId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragDropHoldJustPressedId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropHoldJustPressedId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::DragDropHoldJustPressedId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropHoldJustPressedId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropHoldJustPressedId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->DragDropHoldJustPressedId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayloadBufHeap_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< unsigned char > *arg2 = (ImVector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayloadBufHeap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufHeap",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufHeap",2,"ImVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufHeap_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufHeap_set",2,SWIGTYPE_p_ImVectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->DragDropPayloadBufHeap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayloadBufHeap_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayloadBufHeap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufHeap",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufHeap_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< unsigned char > *)& ((arg1)->DragDropPayloadBufHeap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayloadBufLocal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayloadBufLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufLocal",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufLocal",2,"unsigned char [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufLocal_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufLocal_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->DragDropPayloadBufLocal;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragDropPayloadBufLocal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DragDropPayloadBufLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragDropPayloadBufLocal",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragDropPayloadBufLocal_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->DragDropPayloadBufLocal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentTabBar_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTabBar *arg2 = (ImGuiTabBar *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentTabBar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentTabBar",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::CurrentTabBar",2,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBar_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabBar,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBar_set",2,SWIGTYPE_p_ImGuiTabBar);
  }
  
  if (arg1) (arg1)->CurrentTabBar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentTabBar_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTabBar *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentTabBar",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBar_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiTabBar *) ((arg1)->CurrentTabBar);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabBar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TabBars_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImPool< ImGuiTabBar > *arg2 = (ImPool< ImGuiTabBar > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::TabBars",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TabBars",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::TabBars",2,"ImPool< ImGuiTabBar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TabBars_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImPoolT_ImGuiTabBar_t,0))){
    SWIG_fail_ptr("ImGuiContext_TabBars_set",2,SWIGTYPE_p_ImPoolT_ImGuiTabBar_t);
  }
  
  if (arg1) (arg1)->TabBars = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TabBars_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImPool< ImGuiTabBar > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::TabBars",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TabBars",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TabBars_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImPool< ImGuiTabBar > *)& ((arg1)->TabBars);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImPoolT_ImGuiTabBar_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentTabBarStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPtrOrIndex > *arg2 = (ImVector< ImGuiPtrOrIndex > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentTabBarStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentTabBarStack",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::CurrentTabBarStack",2,"ImVector< ImGuiPtrOrIndex > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBarStack_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiPtrOrIndex_t,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBarStack_set",2,SWIGTYPE_p_ImVectorT_ImGuiPtrOrIndex_t);
  }
  
  if (arg1) (arg1)->CurrentTabBarStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_CurrentTabBarStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiPtrOrIndex > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::CurrentTabBarStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::CurrentTabBarStack",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_CurrentTabBarStack_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiPtrOrIndex > *)& ((arg1)->CurrentTabBarStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiPtrOrIndex_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ShrinkWidthBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiShrinkWidthItem > *arg2 = (ImVector< ImGuiShrinkWidthItem > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ShrinkWidthBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ShrinkWidthBuffer",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ShrinkWidthBuffer",2,"ImVector< ImGuiShrinkWidthItem > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ShrinkWidthBuffer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiShrinkWidthItem_t,0))){
    SWIG_fail_ptr("ImGuiContext_ShrinkWidthBuffer_set",2,SWIGTYPE_p_ImVectorT_ImGuiShrinkWidthItem_t);
  }
  
  if (arg1) (arg1)->ShrinkWidthBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ShrinkWidthBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiShrinkWidthItem > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ShrinkWidthBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ShrinkWidthBuffer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ShrinkWidthBuffer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiShrinkWidthItem > *)& ((arg1)->ShrinkWidthBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiShrinkWidthItem_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastValidMousePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::LastValidMousePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastValidMousePos",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::LastValidMousePos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastValidMousePos_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiContext_LastValidMousePos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->LastValidMousePos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LastValidMousePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::LastValidMousePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LastValidMousePos",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LastValidMousePos_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec2 *)& ((arg1)->LastValidMousePos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_InputTextState_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputTextState *arg2 = (ImGuiInputTextState *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::InputTextState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::InputTextState",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::InputTextState",2,"ImGuiInputTextState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextState_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiInputTextState,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextState_set",2,SWIGTYPE_p_ImGuiInputTextState);
  }
  
  if (arg1) (arg1)->InputTextState = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_InputTextState_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiInputTextState *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::InputTextState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::InputTextState",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextState_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiInputTextState *)& ((arg1)->InputTextState);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiInputTextState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_InputTextPasswordFont_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::InputTextPasswordFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::InputTextPasswordFont",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::InputTextPasswordFont",2,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextPasswordFont_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextPasswordFont_set",2,SWIGTYPE_p_ImFont);
  }
  
  if (arg1) (arg1)->InputTextPasswordFont = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_InputTextPasswordFont_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::InputTextPasswordFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::InputTextPasswordFont",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_InputTextPasswordFont_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImFont *)& ((arg1)->InputTextPasswordFont);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TempInputId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::TempInputId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TempInputId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::TempInputId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TempInputId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->TempInputId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TempInputId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::TempInputId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TempInputId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TempInputId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->TempInputId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditOptions_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiColorEditFlags arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ColorEditOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditOptions",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ColorEditOptions",2,"ImGuiColorEditFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditOptions_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiColorEditFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ColorEditOptions = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditOptions_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiColorEditFlags result;
  
  SWIG_check_num_args("ImGuiContext::ColorEditOptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditOptions",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditOptions_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiColorEditFlags) ((arg1)->ColorEditOptions);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastHue_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastHue",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ColorEditLastHue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastHue_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ColorEditLastHue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastHue_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastHue",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastHue_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->ColorEditLastHue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastSat_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastSat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastSat",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ColorEditLastSat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastSat_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ColorEditLastSat = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastSat_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastSat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastSat",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastSat_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->ColorEditLastSat);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastColor_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastColor",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ColorEditLastColor",2,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastColor_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastColor_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->ColorEditLastColor;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorEditLastColor_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ColorEditLastColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorEditLastColor",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorEditLastColor_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float *)(float *) ((arg1)->ColorEditLastColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorPickerRef_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ColorPickerRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorPickerRef",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ColorPickerRef",2,"ImVec4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorPickerRef_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImGuiContext_ColorPickerRef_set",2,SWIGTYPE_p_ImVec4);
  }
  
  if (arg1) (arg1)->ColorPickerRef = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ColorPickerRef_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec4 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ColorPickerRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ColorPickerRef",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ColorPickerRef_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec4 *)& ((arg1)->ColorPickerRef);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SliderCurrentAccum_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::SliderCurrentAccum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccum",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SliderCurrentAccum_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->SliderCurrentAccum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SliderCurrentAccum_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::SliderCurrentAccum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccum",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SliderCurrentAccum_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->SliderCurrentAccum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SliderCurrentAccumDirty_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::SliderCurrentAccumDirty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccumDirty",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccumDirty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SliderCurrentAccumDirty_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->SliderCurrentAccumDirty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SliderCurrentAccumDirty_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::SliderCurrentAccumDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SliderCurrentAccumDirty",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SliderCurrentAccumDirty_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->SliderCurrentAccumDirty);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragCurrentAccumDirty_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragCurrentAccumDirty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragCurrentAccumDirty",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::DragCurrentAccumDirty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragCurrentAccumDirty_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DragCurrentAccumDirty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragCurrentAccumDirty_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::DragCurrentAccumDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragCurrentAccumDirty",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragCurrentAccumDirty_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->DragCurrentAccumDirty);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragCurrentAccum_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragCurrentAccum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragCurrentAccum",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragCurrentAccum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragCurrentAccum_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragCurrentAccum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragCurrentAccum_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::DragCurrentAccum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragCurrentAccum",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragCurrentAccum_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->DragCurrentAccum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragSpeedDefaultRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DragSpeedDefaultRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragSpeedDefaultRatio",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DragSpeedDefaultRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragSpeedDefaultRatio_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->DragSpeedDefaultRatio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DragSpeedDefaultRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::DragSpeedDefaultRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DragSpeedDefaultRatio",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DragSpeedDefaultRatio_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->DragSpeedDefaultRatio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ScrollbarClickDeltaToGrabCenter_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::ScrollbarClickDeltaToGrabCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ScrollbarClickDeltaToGrabCenter",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::ScrollbarClickDeltaToGrabCenter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ScrollbarClickDeltaToGrabCenter_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollbarClickDeltaToGrabCenter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ScrollbarClickDeltaToGrabCenter_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::ScrollbarClickDeltaToGrabCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ScrollbarClickDeltaToGrabCenter",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ScrollbarClickDeltaToGrabCenter_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->ScrollbarClickDeltaToGrabCenter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TooltipOverrideCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::TooltipOverrideCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TooltipOverrideCount",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::TooltipOverrideCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TooltipOverrideCount_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TooltipOverrideCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TooltipOverrideCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::TooltipOverrideCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TooltipOverrideCount",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TooltipOverrideCount_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->TooltipOverrideCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ClipboardHandlerData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::ClipboardHandlerData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ClipboardHandlerData",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::ClipboardHandlerData",2,"ImVector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ClipboardHandlerData_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_char_t,0))){
    SWIG_fail_ptr("ImGuiContext_ClipboardHandlerData_set",2,SWIGTYPE_p_ImVectorT_char_t);
  }
  
  if (arg1) (arg1)->ClipboardHandlerData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_ClipboardHandlerData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< char > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ClipboardHandlerData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ClipboardHandlerData",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_ClipboardHandlerData_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< char > *)& ((arg1)->ClipboardHandlerData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MenusIdSubmittedThisFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiID > *arg2 = (ImVector< ImGuiID > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::MenusIdSubmittedThisFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MenusIdSubmittedThisFrame",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::MenusIdSubmittedThisFrame",2,"ImVector< ImGuiID > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MenusIdSubmittedThisFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("ImGuiContext_MenusIdSubmittedThisFrame_set",2,SWIGTYPE_p_ImVectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->MenusIdSubmittedThisFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_MenusIdSubmittedThisFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiID > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::MenusIdSubmittedThisFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::MenusIdSubmittedThisFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_MenusIdSubmittedThisFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiID > *)& ((arg1)->MenusIdSubmittedThisFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImePos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImePos",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::PlatformImePos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePos_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->PlatformImePos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImePos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImePos",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePos_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec2 *)& ((arg1)->PlatformImePos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImeLastPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImeLastPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImeLastPos",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::PlatformImeLastPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImeLastPos_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImeLastPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->PlatformImeLastPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImeLastPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImeLastPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImeLastPos",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImeLastPos_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVec2 *)& ((arg1)->PlatformImeLastPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImePosViewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *arg2 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImePosViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImePosViewport",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::PlatformImePosViewport",2,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePosViewport_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewportP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePosViewport_set",2,SWIGTYPE_p_ImGuiViewportP);
  }
  
  if (arg1) (arg1)->PlatformImePosViewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformImePosViewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformImePosViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformImePosViewport",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformImePosViewport_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiViewportP *) ((arg1)->PlatformImePosViewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformLocaleDecimalPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("ImGuiContext::PlatformLocaleDecimalPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformLocaleDecimalPoint",1,"ImGuiContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiContext::PlatformLocaleDecimalPoint",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformLocaleDecimalPoint_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->PlatformLocaleDecimalPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_PlatformLocaleDecimalPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  char result;
  
  SWIG_check_num_args("ImGuiContext::PlatformLocaleDecimalPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::PlatformLocaleDecimalPoint",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_PlatformLocaleDecimalPoint_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (char) ((arg1)->PlatformLocaleDecimalPoint);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DockContext_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDockContext *arg2 = (ImGuiDockContext *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::DockContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DockContext",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::DockContext",2,"ImGuiDockContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DockContext_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockContext,0))){
    SWIG_fail_ptr("ImGuiContext_DockContext_set",2,SWIGTYPE_p_ImGuiDockContext);
  }
  
  if (arg1) (arg1)->DockContext = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DockContext_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDockContext *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::DockContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DockContext",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DockContext_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiDockContext *)& ((arg1)->DockContext);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsLoaded_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsLoaded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsLoaded",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::SettingsLoaded",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsLoaded_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->SettingsLoaded = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsLoaded_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::SettingsLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsLoaded",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsLoaded_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->SettingsLoaded);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsDirtyTimer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsDirtyTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsDirtyTimer",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::SettingsDirtyTimer",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsDirtyTimer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->SettingsDirtyTimer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsDirtyTimer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::SettingsDirtyTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsDirtyTimer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsDirtyTimer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->SettingsDirtyTimer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsIniData_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTextBuffer *arg2 = (ImGuiTextBuffer *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsIniData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsIniData",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::SettingsIniData",2,"ImGuiTextBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsIniData_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsIniData_set",2,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  if (arg1) (arg1)->SettingsIniData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsIniData_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTextBuffer *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsIniData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsIniData",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsIniData_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiTextBuffer *)& ((arg1)->SettingsIniData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsHandlers_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiSettingsHandler > *arg2 = (ImVector< ImGuiSettingsHandler > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsHandlers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsHandlers",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::SettingsHandlers",2,"ImVector< ImGuiSettingsHandler > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsHandlers_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiSettingsHandler_t,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsHandlers_set",2,SWIGTYPE_p_ImVectorT_ImGuiSettingsHandler_t);
  }
  
  if (arg1) (arg1)->SettingsHandlers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsHandlers_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiSettingsHandler > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsHandlers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsHandlers",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsHandlers_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiSettingsHandler > *)& ((arg1)->SettingsHandlers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiSettingsHandler_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsWindows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImChunkStream< ImGuiWindowSettings > *arg2 = (ImChunkStream< ImGuiWindowSettings > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsWindows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsWindows",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::SettingsWindows",2,"ImChunkStream< ImGuiWindowSettings > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsWindows_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImChunkStreamT_ImGuiWindowSettings_t,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsWindows_set",2,SWIGTYPE_p_ImChunkStreamT_ImGuiWindowSettings_t);
  }
  
  if (arg1) (arg1)->SettingsWindows = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_SettingsWindows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImChunkStream< ImGuiWindowSettings > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::SettingsWindows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::SettingsWindows",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_SettingsWindows_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImChunkStream< ImGuiWindowSettings > *)& ((arg1)->SettingsWindows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImChunkStreamT_ImGuiWindowSettings_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Hooks_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiContextHook > *arg2 = (ImVector< ImGuiContextHook > *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::Hooks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Hooks",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::Hooks",2,"ImVector< ImGuiContextHook > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Hooks_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiContextHook_t,0))){
    SWIG_fail_ptr("ImGuiContext_Hooks_set",2,SWIGTYPE_p_ImVectorT_ImGuiContextHook_t);
  }
  
  if (arg1) (arg1)->Hooks = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_Hooks_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImVector< ImGuiContextHook > *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::Hooks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::Hooks",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_Hooks_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImVector< ImGuiContextHook > *)& ((arg1)->Hooks);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiContextHook_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogEnabled",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::LogEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogEnabled_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->LogEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::LogEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogEnabled",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogEnabled_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->LogEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogType_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiLogType arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogType",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LogType",2,"ImGuiLogType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogType_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiLogType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogType_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiLogType result;
  
  SWIG_check_num_args("ImGuiContext::LogType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogType",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogType_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiLogType) ((arg1)->LogType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogFile_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFileHandle arg2 = (ImFileHandle) 0 ;
  
  SWIG_check_num_args("ImGuiContext::LogFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogFile",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::LogFile",2,"ImFileHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogFile_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiContext_LogFile_set",2,SWIGTYPE_p_FILE);
  }
  
  if (arg1) (arg1)->LogFile = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogFile_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImFileHandle result;
  
  SWIG_check_num_args("ImGuiContext::LogFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogFile",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogFile_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImFileHandle) ((arg1)->LogFile);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTextBuffer *arg2 = (ImGuiTextBuffer *) 0 ;
  
  SWIG_check_num_args("ImGuiContext::LogBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogBuffer",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::LogBuffer",2,"ImGuiTextBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogBuffer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiContext_LogBuffer_set",2,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  if (arg1) (arg1)->LogBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiTextBuffer *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::LogBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogBuffer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogBuffer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiTextBuffer *)& ((arg1)->LogBuffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogLinePosY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogLinePosY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogLinePosY",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LogLinePosY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogLinePosY_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogLinePosY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogLinePosY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::LogLinePosY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogLinePosY",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogLinePosY_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->LogLinePosY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogLineFirstItem_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogLineFirstItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogLineFirstItem",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::LogLineFirstItem",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogLineFirstItem_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->LogLineFirstItem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogLineFirstItem_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::LogLineFirstItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogLineFirstItem",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogLineFirstItem_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->LogLineFirstItem);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthRef_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogDepthRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthRef",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LogDepthRef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthRef_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogDepthRef = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthRef_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::LogDepthRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthRef",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthRef_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->LogDepthRef);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthToExpand_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogDepthToExpand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthToExpand",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LogDepthToExpand",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthToExpand_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogDepthToExpand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthToExpand_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::LogDepthToExpand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthToExpand",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthToExpand_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->LogDepthToExpand);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthToExpandDefault_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::LogDepthToExpandDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthToExpandDefault",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::LogDepthToExpandDefault",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthToExpandDefault_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LogDepthToExpandDefault = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_LogDepthToExpandDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::LogDepthToExpandDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::LogDepthToExpandDefault",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_LogDepthToExpandDefault_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->LogDepthToExpandDefault);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DebugItemPickerActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DebugItemPickerActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DebugItemPickerActive",1,"ImGuiContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiContext::DebugItemPickerActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DebugItemPickerActive_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DebugItemPickerActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DebugItemPickerActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiContext::DebugItemPickerActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DebugItemPickerActive",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DebugItemPickerActive_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (bool) ((arg1)->DebugItemPickerActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DebugItemPickerBreakId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiContext::DebugItemPickerBreakId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DebugItemPickerBreakId",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::DebugItemPickerBreakId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DebugItemPickerBreakId_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DebugItemPickerBreakId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_DebugItemPickerBreakId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiContext::DebugItemPickerBreakId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::DebugItemPickerBreakId",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_DebugItemPickerBreakId_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID) ((arg1)->DebugItemPickerBreakId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrame",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrame",2,"float [120]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrame_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->FramerateSecPerFrame;
    for (ii = 0; ii < (size_t)120; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float *)(float *) ((arg1)->FramerateSecPerFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrameIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrameIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameIdx",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameIdx",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrameIdx_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FramerateSecPerFrameIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrameIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrameIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameIdx",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrameIdx_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->FramerateSecPerFrameIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrameAccum_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrameAccum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameAccum",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameAccum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrameAccum_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FramerateSecPerFrameAccum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_FramerateSecPerFrameAccum_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiContext::FramerateSecPerFrameAccum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::FramerateSecPerFrameAccum",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_FramerateSecPerFrameAccum_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (float) ((arg1)->FramerateSecPerFrameAccum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantCaptureMouseNextFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WantCaptureMouseNextFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantCaptureMouseNextFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::WantCaptureMouseNextFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantCaptureMouseNextFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->WantCaptureMouseNextFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantCaptureMouseNextFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::WantCaptureMouseNextFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantCaptureMouseNextFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantCaptureMouseNextFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->WantCaptureMouseNextFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantCaptureKeyboardNextFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WantCaptureKeyboardNextFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantCaptureKeyboardNextFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::WantCaptureKeyboardNextFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantCaptureKeyboardNextFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->WantCaptureKeyboardNextFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantCaptureKeyboardNextFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::WantCaptureKeyboardNextFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantCaptureKeyboardNextFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantCaptureKeyboardNextFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->WantCaptureKeyboardNextFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantTextInputNextFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiContext::WantTextInputNextFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantTextInputNextFrame",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiContext::WantTextInputNextFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantTextInputNextFrame_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->WantTextInputNextFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_WantTextInputNextFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiContext::WantTextInputNextFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::WantTextInputNextFrame",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_WantTextInputNextFrame_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (int) ((arg1)->WantTextInputNextFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TempBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("ImGuiContext::TempBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TempBuffer",1,"ImGuiContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiContext::TempBuffer",2,"char [1024*3+1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TempBuffer_set",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->TempBuffer, (const char *)arg2, 1024*3+1-1);
      arg1->TempBuffer[1024*3+1-1] = 0;
    } else {
      arg1->TempBuffer[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiContext_TempBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::TempBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::TempBuffer",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("ImGuiContext_TempBuffer_get",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (char *)(char *) ((arg1)->TempBuffer);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiContext(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  
  SWIG_check_num_args("ImGuiContext::ImGuiContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiContext::ImGuiContext",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("new_ImGuiContext",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (ImGuiContext *)new ImGuiContext(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiContext(void *obj) {
ImGuiContext *arg1 = (ImGuiContext *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiContext(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiContext);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiContext_attributes[] = {
    { "Initialized", _wrap_ImGuiContext_Initialized_get, _wrap_ImGuiContext_Initialized_set },
    { "FontAtlasOwnedByContext", _wrap_ImGuiContext_FontAtlasOwnedByContext_get, _wrap_ImGuiContext_FontAtlasOwnedByContext_set },
    { "IO", _wrap_ImGuiContext_IO_get, _wrap_ImGuiContext_IO_set },
    { "PlatformIO", _wrap_ImGuiContext_PlatformIO_get, _wrap_ImGuiContext_PlatformIO_set },
    { "Style", _wrap_ImGuiContext_Style_get, _wrap_ImGuiContext_Style_set },
    { "ConfigFlagsCurrFrame", _wrap_ImGuiContext_ConfigFlagsCurrFrame_get, _wrap_ImGuiContext_ConfigFlagsCurrFrame_set },
    { "ConfigFlagsLastFrame", _wrap_ImGuiContext_ConfigFlagsLastFrame_get, _wrap_ImGuiContext_ConfigFlagsLastFrame_set },
    { "Font", _wrap_ImGuiContext_Font_get, _wrap_ImGuiContext_Font_set },
    { "FontSize", _wrap_ImGuiContext_FontSize_get, _wrap_ImGuiContext_FontSize_set },
    { "FontBaseSize", _wrap_ImGuiContext_FontBaseSize_get, _wrap_ImGuiContext_FontBaseSize_set },
    { "DrawListSharedData", _wrap_ImGuiContext_DrawListSharedData_get, _wrap_ImGuiContext_DrawListSharedData_set },
    { "Time", _wrap_ImGuiContext_Time_get, _wrap_ImGuiContext_Time_set },
    { "FrameCount", _wrap_ImGuiContext_FrameCount_get, _wrap_ImGuiContext_FrameCount_set },
    { "FrameCountEnded", _wrap_ImGuiContext_FrameCountEnded_get, _wrap_ImGuiContext_FrameCountEnded_set },
    { "FrameCountPlatformEnded", _wrap_ImGuiContext_FrameCountPlatformEnded_get, _wrap_ImGuiContext_FrameCountPlatformEnded_set },
    { "FrameCountRendered", _wrap_ImGuiContext_FrameCountRendered_get, _wrap_ImGuiContext_FrameCountRendered_set },
    { "WithinFrameScope", _wrap_ImGuiContext_WithinFrameScope_get, _wrap_ImGuiContext_WithinFrameScope_set },
    { "WithinFrameScopeWithImplicitWindow", _wrap_ImGuiContext_WithinFrameScopeWithImplicitWindow_get, _wrap_ImGuiContext_WithinFrameScopeWithImplicitWindow_set },
    { "WithinEndChild", _wrap_ImGuiContext_WithinEndChild_get, _wrap_ImGuiContext_WithinEndChild_set },
    { "TestEngineHookItems", _wrap_ImGuiContext_TestEngineHookItems_get, _wrap_ImGuiContext_TestEngineHookItems_set },
    { "TestEngineHookIdInfo", _wrap_ImGuiContext_TestEngineHookIdInfo_get, _wrap_ImGuiContext_TestEngineHookIdInfo_set },
    { "TestEngine", _wrap_ImGuiContext_TestEngine_get, _wrap_ImGuiContext_TestEngine_set },
    { "Windows", _wrap_ImGuiContext_Windows_get, _wrap_ImGuiContext_Windows_set },
    { "WindowsFocusOrder", _wrap_ImGuiContext_WindowsFocusOrder_get, _wrap_ImGuiContext_WindowsFocusOrder_set },
    { "WindowsTempSortBuffer", _wrap_ImGuiContext_WindowsTempSortBuffer_get, _wrap_ImGuiContext_WindowsTempSortBuffer_set },
    { "CurrentWindowStack", _wrap_ImGuiContext_CurrentWindowStack_get, _wrap_ImGuiContext_CurrentWindowStack_set },
    { "WindowsById", _wrap_ImGuiContext_WindowsById_get, _wrap_ImGuiContext_WindowsById_set },
    { "WindowsActiveCount", _wrap_ImGuiContext_WindowsActiveCount_get, _wrap_ImGuiContext_WindowsActiveCount_set },
    { "CurrentWindow", _wrap_ImGuiContext_CurrentWindow_get, _wrap_ImGuiContext_CurrentWindow_set },
    { "HoveredWindow", _wrap_ImGuiContext_HoveredWindow_get, _wrap_ImGuiContext_HoveredWindow_set },
    { "HoveredRootWindow", _wrap_ImGuiContext_HoveredRootWindow_get, _wrap_ImGuiContext_HoveredRootWindow_set },
    { "HoveredWindowUnderMovingWindow", _wrap_ImGuiContext_HoveredWindowUnderMovingWindow_get, _wrap_ImGuiContext_HoveredWindowUnderMovingWindow_set },
    { "HoveredDockNode", _wrap_ImGuiContext_HoveredDockNode_get, _wrap_ImGuiContext_HoveredDockNode_set },
    { "MovingWindow", _wrap_ImGuiContext_MovingWindow_get, _wrap_ImGuiContext_MovingWindow_set },
    { "WheelingWindow", _wrap_ImGuiContext_WheelingWindow_get, _wrap_ImGuiContext_WheelingWindow_set },
    { "WheelingWindowRefMousePos", _wrap_ImGuiContext_WheelingWindowRefMousePos_get, _wrap_ImGuiContext_WheelingWindowRefMousePos_set },
    { "WheelingWindowTimer", _wrap_ImGuiContext_WheelingWindowTimer_get, _wrap_ImGuiContext_WheelingWindowTimer_set },
    { "HoveredId", _wrap_ImGuiContext_HoveredId_get, _wrap_ImGuiContext_HoveredId_set },
    { "HoveredIdPreviousFrame", _wrap_ImGuiContext_HoveredIdPreviousFrame_get, _wrap_ImGuiContext_HoveredIdPreviousFrame_set },
    { "HoveredIdAllowOverlap", _wrap_ImGuiContext_HoveredIdAllowOverlap_get, _wrap_ImGuiContext_HoveredIdAllowOverlap_set },
    { "HoveredIdDisabled", _wrap_ImGuiContext_HoveredIdDisabled_get, _wrap_ImGuiContext_HoveredIdDisabled_set },
    { "HoveredIdTimer", _wrap_ImGuiContext_HoveredIdTimer_get, _wrap_ImGuiContext_HoveredIdTimer_set },
    { "HoveredIdNotActiveTimer", _wrap_ImGuiContext_HoveredIdNotActiveTimer_get, _wrap_ImGuiContext_HoveredIdNotActiveTimer_set },
    { "ActiveId", _wrap_ImGuiContext_ActiveId_get, _wrap_ImGuiContext_ActiveId_set },
    { "ActiveIdIsAlive", _wrap_ImGuiContext_ActiveIdIsAlive_get, _wrap_ImGuiContext_ActiveIdIsAlive_set },
    { "ActiveIdTimer", _wrap_ImGuiContext_ActiveIdTimer_get, _wrap_ImGuiContext_ActiveIdTimer_set },
    { "ActiveIdIsJustActivated", _wrap_ImGuiContext_ActiveIdIsJustActivated_get, _wrap_ImGuiContext_ActiveIdIsJustActivated_set },
    { "ActiveIdAllowOverlap", _wrap_ImGuiContext_ActiveIdAllowOverlap_get, _wrap_ImGuiContext_ActiveIdAllowOverlap_set },
    { "ActiveIdNoClearOnFocusLoss", _wrap_ImGuiContext_ActiveIdNoClearOnFocusLoss_get, _wrap_ImGuiContext_ActiveIdNoClearOnFocusLoss_set },
    { "ActiveIdHasBeenPressedBefore", _wrap_ImGuiContext_ActiveIdHasBeenPressedBefore_get, _wrap_ImGuiContext_ActiveIdHasBeenPressedBefore_set },
    { "ActiveIdHasBeenEditedBefore", _wrap_ImGuiContext_ActiveIdHasBeenEditedBefore_get, _wrap_ImGuiContext_ActiveIdHasBeenEditedBefore_set },
    { "ActiveIdHasBeenEditedThisFrame", _wrap_ImGuiContext_ActiveIdHasBeenEditedThisFrame_get, _wrap_ImGuiContext_ActiveIdHasBeenEditedThisFrame_set },
    { "ActiveIdUsingNavDirMask", _wrap_ImGuiContext_ActiveIdUsingNavDirMask_get, _wrap_ImGuiContext_ActiveIdUsingNavDirMask_set },
    { "ActiveIdUsingNavInputMask", _wrap_ImGuiContext_ActiveIdUsingNavInputMask_get, _wrap_ImGuiContext_ActiveIdUsingNavInputMask_set },
    { "ActiveIdUsingKeyInputMask", _wrap_ImGuiContext_ActiveIdUsingKeyInputMask_get, _wrap_ImGuiContext_ActiveIdUsingKeyInputMask_set },
    { "ActiveIdClickOffset", _wrap_ImGuiContext_ActiveIdClickOffset_get, _wrap_ImGuiContext_ActiveIdClickOffset_set },
    { "ActiveIdWindow", _wrap_ImGuiContext_ActiveIdWindow_get, _wrap_ImGuiContext_ActiveIdWindow_set },
    { "ActiveIdSource", _wrap_ImGuiContext_ActiveIdSource_get, _wrap_ImGuiContext_ActiveIdSource_set },
    { "ActiveIdMouseButton", _wrap_ImGuiContext_ActiveIdMouseButton_get, _wrap_ImGuiContext_ActiveIdMouseButton_set },
    { "ActiveIdPreviousFrame", _wrap_ImGuiContext_ActiveIdPreviousFrame_get, _wrap_ImGuiContext_ActiveIdPreviousFrame_set },
    { "ActiveIdPreviousFrameIsAlive", _wrap_ImGuiContext_ActiveIdPreviousFrameIsAlive_get, _wrap_ImGuiContext_ActiveIdPreviousFrameIsAlive_set },
    { "ActiveIdPreviousFrameHasBeenEditedBefore", _wrap_ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_get, _wrap_ImGuiContext_ActiveIdPreviousFrameHasBeenEditedBefore_set },
    { "ActiveIdPreviousFrameWindow", _wrap_ImGuiContext_ActiveIdPreviousFrameWindow_get, _wrap_ImGuiContext_ActiveIdPreviousFrameWindow_set },
    { "LastActiveId", _wrap_ImGuiContext_LastActiveId_get, _wrap_ImGuiContext_LastActiveId_set },
    { "LastActiveIdTimer", _wrap_ImGuiContext_LastActiveIdTimer_get, _wrap_ImGuiContext_LastActiveIdTimer_set },
    { "NextWindowData", _wrap_ImGuiContext_NextWindowData_get, _wrap_ImGuiContext_NextWindowData_set },
    { "NextItemData", _wrap_ImGuiContext_NextItemData_get, _wrap_ImGuiContext_NextItemData_set },
    { "ColorModifiers", _wrap_ImGuiContext_ColorModifiers_get, _wrap_ImGuiContext_ColorModifiers_set },
    { "StyleModifiers", _wrap_ImGuiContext_StyleModifiers_get, _wrap_ImGuiContext_StyleModifiers_set },
    { "FontStack", _wrap_ImGuiContext_FontStack_get, _wrap_ImGuiContext_FontStack_set },
    { "OpenPopupStack", _wrap_ImGuiContext_OpenPopupStack_get, _wrap_ImGuiContext_OpenPopupStack_set },
    { "BeginPopupStack", _wrap_ImGuiContext_BeginPopupStack_get, _wrap_ImGuiContext_BeginPopupStack_set },
    { "Viewports", _wrap_ImGuiContext_Viewports_get, _wrap_ImGuiContext_Viewports_set },
    { "CurrentDpiScale", _wrap_ImGuiContext_CurrentDpiScale_get, _wrap_ImGuiContext_CurrentDpiScale_set },
    { "CurrentViewport", _wrap_ImGuiContext_CurrentViewport_get, _wrap_ImGuiContext_CurrentViewport_set },
    { "MouseViewport", _wrap_ImGuiContext_MouseViewport_get, _wrap_ImGuiContext_MouseViewport_set },
    { "MouseLastHoveredViewport", _wrap_ImGuiContext_MouseLastHoveredViewport_get, _wrap_ImGuiContext_MouseLastHoveredViewport_set },
    { "ViewportFrontMostStampCount", _wrap_ImGuiContext_ViewportFrontMostStampCount_get, _wrap_ImGuiContext_ViewportFrontMostStampCount_set },
    { "NavWindow", _wrap_ImGuiContext_NavWindow_get, _wrap_ImGuiContext_NavWindow_set },
    { "NavId", _wrap_ImGuiContext_NavId_get, _wrap_ImGuiContext_NavId_set },
    { "NavFocusScopeId", _wrap_ImGuiContext_NavFocusScopeId_get, _wrap_ImGuiContext_NavFocusScopeId_set },
    { "NavActivateId", _wrap_ImGuiContext_NavActivateId_get, _wrap_ImGuiContext_NavActivateId_set },
    { "NavActivateDownId", _wrap_ImGuiContext_NavActivateDownId_get, _wrap_ImGuiContext_NavActivateDownId_set },
    { "NavActivatePressedId", _wrap_ImGuiContext_NavActivatePressedId_get, _wrap_ImGuiContext_NavActivatePressedId_set },
    { "NavInputId", _wrap_ImGuiContext_NavInputId_get, _wrap_ImGuiContext_NavInputId_set },
    { "NavJustTabbedId", _wrap_ImGuiContext_NavJustTabbedId_get, _wrap_ImGuiContext_NavJustTabbedId_set },
    { "NavJustMovedToId", _wrap_ImGuiContext_NavJustMovedToId_get, _wrap_ImGuiContext_NavJustMovedToId_set },
    { "NavJustMovedToFocusScopeId", _wrap_ImGuiContext_NavJustMovedToFocusScopeId_get, _wrap_ImGuiContext_NavJustMovedToFocusScopeId_set },
    { "NavJustMovedToKeyMods", _wrap_ImGuiContext_NavJustMovedToKeyMods_get, _wrap_ImGuiContext_NavJustMovedToKeyMods_set },
    { "NavNextActivateId", _wrap_ImGuiContext_NavNextActivateId_get, _wrap_ImGuiContext_NavNextActivateId_set },
    { "NavInputSource", _wrap_ImGuiContext_NavInputSource_get, _wrap_ImGuiContext_NavInputSource_set },
    { "NavScoringRect", _wrap_ImGuiContext_NavScoringRect_get, _wrap_ImGuiContext_NavScoringRect_set },
    { "NavScoringCount", _wrap_ImGuiContext_NavScoringCount_get, _wrap_ImGuiContext_NavScoringCount_set },
    { "NavLayer", _wrap_ImGuiContext_NavLayer_get, _wrap_ImGuiContext_NavLayer_set },
    { "NavIdTabCounter", _wrap_ImGuiContext_NavIdTabCounter_get, _wrap_ImGuiContext_NavIdTabCounter_set },
    { "NavIdIsAlive", _wrap_ImGuiContext_NavIdIsAlive_get, _wrap_ImGuiContext_NavIdIsAlive_set },
    { "NavMousePosDirty", _wrap_ImGuiContext_NavMousePosDirty_get, _wrap_ImGuiContext_NavMousePosDirty_set },
    { "NavDisableHighlight", _wrap_ImGuiContext_NavDisableHighlight_get, _wrap_ImGuiContext_NavDisableHighlight_set },
    { "NavDisableMouseHover", _wrap_ImGuiContext_NavDisableMouseHover_get, _wrap_ImGuiContext_NavDisableMouseHover_set },
    { "NavAnyRequest", _wrap_ImGuiContext_NavAnyRequest_get, _wrap_ImGuiContext_NavAnyRequest_set },
    { "NavInitRequest", _wrap_ImGuiContext_NavInitRequest_get, _wrap_ImGuiContext_NavInitRequest_set },
    { "NavInitRequestFromMove", _wrap_ImGuiContext_NavInitRequestFromMove_get, _wrap_ImGuiContext_NavInitRequestFromMove_set },
    { "NavInitResultId", _wrap_ImGuiContext_NavInitResultId_get, _wrap_ImGuiContext_NavInitResultId_set },
    { "NavInitResultRectRel", _wrap_ImGuiContext_NavInitResultRectRel_get, _wrap_ImGuiContext_NavInitResultRectRel_set },
    { "NavMoveRequest", _wrap_ImGuiContext_NavMoveRequest_get, _wrap_ImGuiContext_NavMoveRequest_set },
    { "NavMoveRequestFlags", _wrap_ImGuiContext_NavMoveRequestFlags_get, _wrap_ImGuiContext_NavMoveRequestFlags_set },
    { "NavMoveRequestForward", _wrap_ImGuiContext_NavMoveRequestForward_get, _wrap_ImGuiContext_NavMoveRequestForward_set },
    { "NavMoveRequestKeyMods", _wrap_ImGuiContext_NavMoveRequestKeyMods_get, _wrap_ImGuiContext_NavMoveRequestKeyMods_set },
    { "NavMoveDir", _wrap_ImGuiContext_NavMoveDir_get, _wrap_ImGuiContext_NavMoveDir_set },
    { "NavMoveDirLast", _wrap_ImGuiContext_NavMoveDirLast_get, _wrap_ImGuiContext_NavMoveDirLast_set },
    { "NavMoveClipDir", _wrap_ImGuiContext_NavMoveClipDir_get, _wrap_ImGuiContext_NavMoveClipDir_set },
    { "NavMoveResultLocal", _wrap_ImGuiContext_NavMoveResultLocal_get, _wrap_ImGuiContext_NavMoveResultLocal_set },
    { "NavMoveResultLocalVisibleSet", _wrap_ImGuiContext_NavMoveResultLocalVisibleSet_get, _wrap_ImGuiContext_NavMoveResultLocalVisibleSet_set },
    { "NavMoveResultOther", _wrap_ImGuiContext_NavMoveResultOther_get, _wrap_ImGuiContext_NavMoveResultOther_set },
    { "NavWrapRequestWindow", _wrap_ImGuiContext_NavWrapRequestWindow_get, _wrap_ImGuiContext_NavWrapRequestWindow_set },
    { "NavWrapRequestFlags", _wrap_ImGuiContext_NavWrapRequestFlags_get, _wrap_ImGuiContext_NavWrapRequestFlags_set },
    { "NavWindowingTarget", _wrap_ImGuiContext_NavWindowingTarget_get, _wrap_ImGuiContext_NavWindowingTarget_set },
    { "NavWindowingTargetAnim", _wrap_ImGuiContext_NavWindowingTargetAnim_get, _wrap_ImGuiContext_NavWindowingTargetAnim_set },
    { "NavWindowingListWindow", _wrap_ImGuiContext_NavWindowingListWindow_get, _wrap_ImGuiContext_NavWindowingListWindow_set },
    { "NavWindowingTimer", _wrap_ImGuiContext_NavWindowingTimer_get, _wrap_ImGuiContext_NavWindowingTimer_set },
    { "NavWindowingHighlightAlpha", _wrap_ImGuiContext_NavWindowingHighlightAlpha_get, _wrap_ImGuiContext_NavWindowingHighlightAlpha_set },
    { "NavWindowingToggleLayer", _wrap_ImGuiContext_NavWindowingToggleLayer_get, _wrap_ImGuiContext_NavWindowingToggleLayer_set },
    { "FocusRequestCurrWindow", _wrap_ImGuiContext_FocusRequestCurrWindow_get, _wrap_ImGuiContext_FocusRequestCurrWindow_set },
    { "FocusRequestNextWindow", _wrap_ImGuiContext_FocusRequestNextWindow_get, _wrap_ImGuiContext_FocusRequestNextWindow_set },
    { "FocusRequestCurrCounterRegular", _wrap_ImGuiContext_FocusRequestCurrCounterRegular_get, _wrap_ImGuiContext_FocusRequestCurrCounterRegular_set },
    { "FocusRequestCurrCounterTabStop", _wrap_ImGuiContext_FocusRequestCurrCounterTabStop_get, _wrap_ImGuiContext_FocusRequestCurrCounterTabStop_set },
    { "FocusRequestNextCounterRegular", _wrap_ImGuiContext_FocusRequestNextCounterRegular_get, _wrap_ImGuiContext_FocusRequestNextCounterRegular_set },
    { "FocusRequestNextCounterTabStop", _wrap_ImGuiContext_FocusRequestNextCounterTabStop_get, _wrap_ImGuiContext_FocusRequestNextCounterTabStop_set },
    { "FocusTabPressed", _wrap_ImGuiContext_FocusTabPressed_get, _wrap_ImGuiContext_FocusTabPressed_set },
    { "DimBgRatio", _wrap_ImGuiContext_DimBgRatio_get, _wrap_ImGuiContext_DimBgRatio_set },
    { "MouseCursor", _wrap_ImGuiContext_MouseCursor_get, _wrap_ImGuiContext_MouseCursor_set },
    { "DragDropActive", _wrap_ImGuiContext_DragDropActive_get, _wrap_ImGuiContext_DragDropActive_set },
    { "DragDropWithinSource", _wrap_ImGuiContext_DragDropWithinSource_get, _wrap_ImGuiContext_DragDropWithinSource_set },
    { "DragDropWithinTarget", _wrap_ImGuiContext_DragDropWithinTarget_get, _wrap_ImGuiContext_DragDropWithinTarget_set },
    { "DragDropSourceFlags", _wrap_ImGuiContext_DragDropSourceFlags_get, _wrap_ImGuiContext_DragDropSourceFlags_set },
    { "DragDropSourceFrameCount", _wrap_ImGuiContext_DragDropSourceFrameCount_get, _wrap_ImGuiContext_DragDropSourceFrameCount_set },
    { "DragDropMouseButton", _wrap_ImGuiContext_DragDropMouseButton_get, _wrap_ImGuiContext_DragDropMouseButton_set },
    { "DragDropPayload", _wrap_ImGuiContext_DragDropPayload_get, _wrap_ImGuiContext_DragDropPayload_set },
    { "DragDropTargetRect", _wrap_ImGuiContext_DragDropTargetRect_get, _wrap_ImGuiContext_DragDropTargetRect_set },
    { "DragDropTargetId", _wrap_ImGuiContext_DragDropTargetId_get, _wrap_ImGuiContext_DragDropTargetId_set },
    { "DragDropAcceptFlags", _wrap_ImGuiContext_DragDropAcceptFlags_get, _wrap_ImGuiContext_DragDropAcceptFlags_set },
    { "DragDropAcceptIdCurrRectSurface", _wrap_ImGuiContext_DragDropAcceptIdCurrRectSurface_get, _wrap_ImGuiContext_DragDropAcceptIdCurrRectSurface_set },
    { "DragDropAcceptIdCurr", _wrap_ImGuiContext_DragDropAcceptIdCurr_get, _wrap_ImGuiContext_DragDropAcceptIdCurr_set },
    { "DragDropAcceptIdPrev", _wrap_ImGuiContext_DragDropAcceptIdPrev_get, _wrap_ImGuiContext_DragDropAcceptIdPrev_set },
    { "DragDropAcceptFrameCount", _wrap_ImGuiContext_DragDropAcceptFrameCount_get, _wrap_ImGuiContext_DragDropAcceptFrameCount_set },
    { "DragDropHoldJustPressedId", _wrap_ImGuiContext_DragDropHoldJustPressedId_get, _wrap_ImGuiContext_DragDropHoldJustPressedId_set },
    { "DragDropPayloadBufHeap", _wrap_ImGuiContext_DragDropPayloadBufHeap_get, _wrap_ImGuiContext_DragDropPayloadBufHeap_set },
    { "DragDropPayloadBufLocal", _wrap_ImGuiContext_DragDropPayloadBufLocal_get, _wrap_ImGuiContext_DragDropPayloadBufLocal_set },
    { "CurrentTabBar", _wrap_ImGuiContext_CurrentTabBar_get, _wrap_ImGuiContext_CurrentTabBar_set },
    { "TabBars", _wrap_ImGuiContext_TabBars_get, _wrap_ImGuiContext_TabBars_set },
    { "CurrentTabBarStack", _wrap_ImGuiContext_CurrentTabBarStack_get, _wrap_ImGuiContext_CurrentTabBarStack_set },
    { "ShrinkWidthBuffer", _wrap_ImGuiContext_ShrinkWidthBuffer_get, _wrap_ImGuiContext_ShrinkWidthBuffer_set },
    { "LastValidMousePos", _wrap_ImGuiContext_LastValidMousePos_get, _wrap_ImGuiContext_LastValidMousePos_set },
    { "InputTextState", _wrap_ImGuiContext_InputTextState_get, _wrap_ImGuiContext_InputTextState_set },
    { "InputTextPasswordFont", _wrap_ImGuiContext_InputTextPasswordFont_get, _wrap_ImGuiContext_InputTextPasswordFont_set },
    { "TempInputId", _wrap_ImGuiContext_TempInputId_get, _wrap_ImGuiContext_TempInputId_set },
    { "ColorEditOptions", _wrap_ImGuiContext_ColorEditOptions_get, _wrap_ImGuiContext_ColorEditOptions_set },
    { "ColorEditLastHue", _wrap_ImGuiContext_ColorEditLastHue_get, _wrap_ImGuiContext_ColorEditLastHue_set },
    { "ColorEditLastSat", _wrap_ImGuiContext_ColorEditLastSat_get, _wrap_ImGuiContext_ColorEditLastSat_set },
    { "ColorEditLastColor", _wrap_ImGuiContext_ColorEditLastColor_get, _wrap_ImGuiContext_ColorEditLastColor_set },
    { "ColorPickerRef", _wrap_ImGuiContext_ColorPickerRef_get, _wrap_ImGuiContext_ColorPickerRef_set },
    { "SliderCurrentAccum", _wrap_ImGuiContext_SliderCurrentAccum_get, _wrap_ImGuiContext_SliderCurrentAccum_set },
    { "SliderCurrentAccumDirty", _wrap_ImGuiContext_SliderCurrentAccumDirty_get, _wrap_ImGuiContext_SliderCurrentAccumDirty_set },
    { "DragCurrentAccumDirty", _wrap_ImGuiContext_DragCurrentAccumDirty_get, _wrap_ImGuiContext_DragCurrentAccumDirty_set },
    { "DragCurrentAccum", _wrap_ImGuiContext_DragCurrentAccum_get, _wrap_ImGuiContext_DragCurrentAccum_set },
    { "DragSpeedDefaultRatio", _wrap_ImGuiContext_DragSpeedDefaultRatio_get, _wrap_ImGuiContext_DragSpeedDefaultRatio_set },
    { "ScrollbarClickDeltaToGrabCenter", _wrap_ImGuiContext_ScrollbarClickDeltaToGrabCenter_get, _wrap_ImGuiContext_ScrollbarClickDeltaToGrabCenter_set },
    { "TooltipOverrideCount", _wrap_ImGuiContext_TooltipOverrideCount_get, _wrap_ImGuiContext_TooltipOverrideCount_set },
    { "ClipboardHandlerData", _wrap_ImGuiContext_ClipboardHandlerData_get, _wrap_ImGuiContext_ClipboardHandlerData_set },
    { "MenusIdSubmittedThisFrame", _wrap_ImGuiContext_MenusIdSubmittedThisFrame_get, _wrap_ImGuiContext_MenusIdSubmittedThisFrame_set },
    { "PlatformImePos", _wrap_ImGuiContext_PlatformImePos_get, _wrap_ImGuiContext_PlatformImePos_set },
    { "PlatformImeLastPos", _wrap_ImGuiContext_PlatformImeLastPos_get, _wrap_ImGuiContext_PlatformImeLastPos_set },
    { "PlatformImePosViewport", _wrap_ImGuiContext_PlatformImePosViewport_get, _wrap_ImGuiContext_PlatformImePosViewport_set },
    { "PlatformLocaleDecimalPoint", _wrap_ImGuiContext_PlatformLocaleDecimalPoint_get, _wrap_ImGuiContext_PlatformLocaleDecimalPoint_set },
    { "DockContext", _wrap_ImGuiContext_DockContext_get, _wrap_ImGuiContext_DockContext_set },
    { "SettingsLoaded", _wrap_ImGuiContext_SettingsLoaded_get, _wrap_ImGuiContext_SettingsLoaded_set },
    { "SettingsDirtyTimer", _wrap_ImGuiContext_SettingsDirtyTimer_get, _wrap_ImGuiContext_SettingsDirtyTimer_set },
    { "SettingsIniData", _wrap_ImGuiContext_SettingsIniData_get, _wrap_ImGuiContext_SettingsIniData_set },
    { "SettingsHandlers", _wrap_ImGuiContext_SettingsHandlers_get, _wrap_ImGuiContext_SettingsHandlers_set },
    { "SettingsWindows", _wrap_ImGuiContext_SettingsWindows_get, _wrap_ImGuiContext_SettingsWindows_set },
    { "Hooks", _wrap_ImGuiContext_Hooks_get, _wrap_ImGuiContext_Hooks_set },
    { "LogEnabled", _wrap_ImGuiContext_LogEnabled_get, _wrap_ImGuiContext_LogEnabled_set },
    { "LogType", _wrap_ImGuiContext_LogType_get, _wrap_ImGuiContext_LogType_set },
    { "LogFile", _wrap_ImGuiContext_LogFile_get, _wrap_ImGuiContext_LogFile_set },
    { "LogBuffer", _wrap_ImGuiContext_LogBuffer_get, _wrap_ImGuiContext_LogBuffer_set },
    { "LogLinePosY", _wrap_ImGuiContext_LogLinePosY_get, _wrap_ImGuiContext_LogLinePosY_set },
    { "LogLineFirstItem", _wrap_ImGuiContext_LogLineFirstItem_get, _wrap_ImGuiContext_LogLineFirstItem_set },
    { "LogDepthRef", _wrap_ImGuiContext_LogDepthRef_get, _wrap_ImGuiContext_LogDepthRef_set },
    { "LogDepthToExpand", _wrap_ImGuiContext_LogDepthToExpand_get, _wrap_ImGuiContext_LogDepthToExpand_set },
    { "LogDepthToExpandDefault", _wrap_ImGuiContext_LogDepthToExpandDefault_get, _wrap_ImGuiContext_LogDepthToExpandDefault_set },
    { "DebugItemPickerActive", _wrap_ImGuiContext_DebugItemPickerActive_get, _wrap_ImGuiContext_DebugItemPickerActive_set },
    { "DebugItemPickerBreakId", _wrap_ImGuiContext_DebugItemPickerBreakId_get, _wrap_ImGuiContext_DebugItemPickerBreakId_set },
    { "FramerateSecPerFrame", _wrap_ImGuiContext_FramerateSecPerFrame_get, _wrap_ImGuiContext_FramerateSecPerFrame_set },
    { "FramerateSecPerFrameIdx", _wrap_ImGuiContext_FramerateSecPerFrameIdx_get, _wrap_ImGuiContext_FramerateSecPerFrameIdx_set },
    { "FramerateSecPerFrameAccum", _wrap_ImGuiContext_FramerateSecPerFrameAccum_get, _wrap_ImGuiContext_FramerateSecPerFrameAccum_set },
    { "WantCaptureMouseNextFrame", _wrap_ImGuiContext_WantCaptureMouseNextFrame_get, _wrap_ImGuiContext_WantCaptureMouseNextFrame_set },
    { "WantCaptureKeyboardNextFrame", _wrap_ImGuiContext_WantCaptureKeyboardNextFrame_get, _wrap_ImGuiContext_WantCaptureKeyboardNextFrame_set },
    { "WantTextInputNextFrame", _wrap_ImGuiContext_WantTextInputNextFrame_get, _wrap_ImGuiContext_WantTextInputNextFrame_set },
    { "TempBuffer", _wrap_ImGuiContext_TempBuffer_get, _wrap_ImGuiContext_TempBuffer_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiContext_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiContext_Sf_SwigStatic = {
    "ImGuiContext",
    swig_ImGuiContext_Sf_SwigStatic_methods,
    swig_ImGuiContext_Sf_SwigStatic_attributes,
    swig_ImGuiContext_Sf_SwigStatic_constants,
    swig_ImGuiContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiContext_bases[] = {0};
static const char *swig_ImGuiContext_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiContext = { "ImGuiContext", "ImGuiContext", &SWIGTYPE_p_ImGuiContext,_proxy__wrap_new_ImGuiContext, swig_delete_ImGuiContext, swig_ImGuiContext_methods, swig_ImGuiContext_attributes, &swig_ImGuiContext_Sf_SwigStatic, swig_ImGuiContext_meta, swig_ImGuiContext_bases, swig_ImGuiContext_base_names };

static int _wrap_ImGuiWindowTempData_CursorPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorPos",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CursorPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPos_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CursorPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorPos",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPos_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->CursorPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorPosPrevLine_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorPosPrevLine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorPosPrevLine",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CursorPosPrevLine",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPosPrevLine_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPosPrevLine_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CursorPosPrevLine = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorPosPrevLine_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorPosPrevLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorPosPrevLine",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorPosPrevLine_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->CursorPosPrevLine);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorStartPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorStartPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorStartPos",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CursorStartPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorStartPos_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorStartPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CursorStartPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorStartPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorStartPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorStartPos",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorStartPos_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->CursorStartPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorMaxPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorMaxPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorMaxPos",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CursorMaxPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorMaxPos_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorMaxPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CursorMaxPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CursorMaxPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CursorMaxPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CursorMaxPos",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CursorMaxPos_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->CursorMaxPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrLineSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrLineSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineSize",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrLineSize_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrLineSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->CurrLineSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrLineSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrLineSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineSize",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrLineSize_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->CurrLineSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_PrevLineSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::PrevLineSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineSize",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_PrevLineSize_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_PrevLineSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->PrevLineSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_PrevLineSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::PrevLineSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineSize",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_PrevLineSize_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->PrevLineSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrLineTextBaseOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrLineTextBaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineTextBaseOffset",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineTextBaseOffset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrLineTextBaseOffset_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurrLineTextBaseOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrLineTextBaseOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrLineTextBaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrLineTextBaseOffset",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrLineTextBaseOffset_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (float) ((arg1)->CurrLineTextBaseOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_PrevLineTextBaseOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::PrevLineTextBaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineTextBaseOffset",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineTextBaseOffset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_PrevLineTextBaseOffset_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->PrevLineTextBaseOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_PrevLineTextBaseOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindowTempData::PrevLineTextBaseOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::PrevLineTextBaseOffset",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_PrevLineTextBaseOffset_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (float) ((arg1)->PrevLineTextBaseOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_Indent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *arg2 = (ImVec1 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::Indent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::Indent",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::Indent",2,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_Indent_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_Indent_set",2,SWIGTYPE_p_ImVec1);
  }
  
  if (arg1) (arg1)->Indent = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_Indent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::Indent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::Indent",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_Indent_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec1 *)& ((arg1)->Indent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ColumnsOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *arg2 = (ImVec1 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ColumnsOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ColumnsOffset",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ColumnsOffset",2,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ColumnsOffset_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ColumnsOffset_set",2,SWIGTYPE_p_ImVec1);
  }
  
  if (arg1) (arg1)->ColumnsOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ColumnsOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ColumnsOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ColumnsOffset",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ColumnsOffset_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec1 *)& ((arg1)->ColumnsOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_GroupOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *arg2 = (ImVec1 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::GroupOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::GroupOffset",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::GroupOffset",2,"ImVec1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupOffset_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec1,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupOffset_set",2,SWIGTYPE_p_ImVec1);
  }
  
  if (arg1) (arg1)->GroupOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_GroupOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec1 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::GroupOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::GroupOffset",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupOffset_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec1 *)& ((arg1)->GroupOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemId",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::LastItemId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemId_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastItemId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemId",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemId_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiID) ((arg1)->LastItemId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemStatusFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiItemStatusFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemStatusFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemStatusFlags",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::LastItemStatusFlags",2,"ImGuiItemStatusFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemStatusFlags_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (ImGuiItemStatusFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastItemStatusFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemStatusFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiItemStatusFlags result;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemStatusFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemStatusFlags",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemStatusFlags_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiItemStatusFlags) ((arg1)->LastItemStatusFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemRect",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::LastItemRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemRect_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->LastItemRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemRect",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemRect_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImRect *)& ((arg1)->LastItemRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemDisplayRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemDisplayRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemDisplayRect",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::LastItemDisplayRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemDisplayRect_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemDisplayRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->LastItemDisplayRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LastItemDisplayRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LastItemDisplayRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LastItemDisplayRect",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LastItemDisplayRect_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImRect *)& ((arg1)->LastItemDisplayRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerCurrent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiNavLayer arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerCurrent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerCurrent",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerCurrent",2,"ImGuiNavLayer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerCurrent_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (ImGuiNavLayer)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavLayerCurrent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerCurrent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiNavLayer result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerCurrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerCurrent",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerCurrent_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiNavLayer) ((arg1)->NavLayerCurrent);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerActiveMask_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerActiveMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMask",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMask",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerActiveMask_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavLayerActiveMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerActiveMask_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerActiveMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMask",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerActiveMask_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (int) ((arg1)->NavLayerActiveMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerActiveMaskNext_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerActiveMaskNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMaskNext",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMaskNext",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerActiveMaskNext_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavLayerActiveMaskNext = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavLayerActiveMaskNext_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavLayerActiveMaskNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavLayerActiveMaskNext",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavLayerActiveMaskNext_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (int) ((arg1)->NavLayerActiveMaskNext);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavFocusScopeIdCurrent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavFocusScopeIdCurrent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavFocusScopeIdCurrent",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavFocusScopeIdCurrent",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavFocusScopeIdCurrent_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NavFocusScopeIdCurrent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavFocusScopeIdCurrent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavFocusScopeIdCurrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavFocusScopeIdCurrent",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavFocusScopeIdCurrent_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiID) ((arg1)->NavFocusScopeIdCurrent);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavHideHighlightOneFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavHideHighlightOneFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavHideHighlightOneFrame",1,"ImGuiWindowTempData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavHideHighlightOneFrame",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavHideHighlightOneFrame_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavHideHighlightOneFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavHideHighlightOneFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavHideHighlightOneFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavHideHighlightOneFrame",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavHideHighlightOneFrame_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (bool) ((arg1)->NavHideHighlightOneFrame);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavHasScroll_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavHasScroll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavHasScroll",1,"ImGuiWindowTempData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowTempData::NavHasScroll",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavHasScroll_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->NavHasScroll = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_NavHasScroll_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowTempData::NavHasScroll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::NavHasScroll",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_NavHasScroll_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (bool) ((arg1)->NavHasScroll);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuBarAppending_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuBarAppending",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarAppending",1,"ImGuiWindowTempData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarAppending",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuBarAppending_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->MenuBarAppending = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuBarAppending_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuBarAppending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarAppending",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuBarAppending_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (bool) ((arg1)->MenuBarAppending);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuBarOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuBarOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarOffset",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarOffset",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuBarOffset_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuBarOffset_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->MenuBarOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuBarOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuBarOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuBarOffset",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuBarOffset_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVec2 *)& ((arg1)->MenuBarOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuColumns_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiMenuColumns *arg2 = (ImGuiMenuColumns *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuColumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuColumns",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::MenuColumns",2,"ImGuiMenuColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuColumns_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiMenuColumns,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuColumns_set",2,SWIGTYPE_p_ImGuiMenuColumns);
  }
  
  if (arg1) (arg1)->MenuColumns = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_MenuColumns_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiMenuColumns *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::MenuColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::MenuColumns",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_MenuColumns_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiMenuColumns *)& ((arg1)->MenuColumns);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiMenuColumns,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TreeDepth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::TreeDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TreeDepth",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::TreeDepth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TreeDepth_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->TreeDepth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TreeDepth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindowTempData::TreeDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TreeDepth",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TreeDepth_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (int) ((arg1)->TreeDepth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TreeJumpToParentOnPopMask_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImU32 arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::TreeJumpToParentOnPopMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TreeJumpToParentOnPopMask",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::TreeJumpToParentOnPopMask",2,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TreeJumpToParentOnPopMask_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImU32)lua_tonumber(L, 2);
  if (arg1) (arg1)->TreeJumpToParentOnPopMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TreeJumpToParentOnPopMask_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImU32 result;
  
  SWIG_check_num_args("ImGuiWindowTempData::TreeJumpToParentOnPopMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TreeJumpToParentOnPopMask",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TreeJumpToParentOnPopMask_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImU32) ((arg1)->TreeJumpToParentOnPopMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ChildWindows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiWindow * > *arg2 = (ImVector< ImGuiWindow * > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ChildWindows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ChildWindows",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ChildWindows",2,"ImVector< ImGuiWindow * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ChildWindows_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ChildWindows_set",2,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t);
  }
  
  if (arg1) (arg1)->ChildWindows = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ChildWindows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiWindow * > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ChildWindows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ChildWindows",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ChildWindows_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVector< ImGuiWindow * > *)& ((arg1)->ChildWindows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_StateStorage_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiStorage *arg2 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::StateStorage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::StateStorage",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::StateStorage",2,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_StateStorage_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStorage,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindowTempData_StateStorage_set",2,SWIGTYPE_p_ImGuiStorage);
  }
  
  if (arg1) (arg1)->StateStorage = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_StateStorage_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::StateStorage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::StateStorage",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_StateStorage_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiStorage *) ((arg1)->StateStorage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrentColumns_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiColumns *arg2 = (ImGuiColumns *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrentColumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrentColumns",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::CurrentColumns",2,"ImGuiColumns *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrentColumns_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiColumns,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrentColumns_set",2,SWIGTYPE_p_ImGuiColumns);
  }
  
  if (arg1) (arg1)->CurrentColumns = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_CurrentColumns_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiColumns *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::CurrentColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::CurrentColumns",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_CurrentColumns_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiColumns *) ((arg1)->CurrentColumns);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiColumns,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LayoutType_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiLayoutType arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::LayoutType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LayoutType",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::LayoutType",2,"ImGuiLayoutType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LayoutType_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (ImGuiLayoutType)lua_tonumber(L, 2);
  if (arg1) (arg1)->LayoutType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_LayoutType_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiLayoutType result;
  
  SWIG_check_num_args("ImGuiWindowTempData::LayoutType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::LayoutType",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_LayoutType_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiLayoutType) ((arg1)->LayoutType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ParentLayoutType_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiLayoutType arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ParentLayoutType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ParentLayoutType",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ParentLayoutType",2,"ImGuiLayoutType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ParentLayoutType_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (ImGuiLayoutType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ParentLayoutType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ParentLayoutType_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiLayoutType result;
  
  SWIG_check_num_args("ImGuiWindowTempData::ParentLayoutType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ParentLayoutType",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ParentLayoutType_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiLayoutType) ((arg1)->ParentLayoutType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_FocusCounterRegular_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::FocusCounterRegular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterRegular",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterRegular",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_FocusCounterRegular_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusCounterRegular = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_FocusCounterRegular_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindowTempData::FocusCounterRegular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterRegular",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_FocusCounterRegular_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (int) ((arg1)->FocusCounterRegular);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_FocusCounterTabStop_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::FocusCounterTabStop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterTabStop",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterTabStop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_FocusCounterTabStop_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FocusCounterTabStop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_FocusCounterTabStop_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindowTempData::FocusCounterTabStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::FocusCounterTabStop",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_FocusCounterTabStop_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (int) ((arg1)->FocusCounterTabStop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiItemFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlags",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlags",2,"ImGuiItemFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemFlags_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (ImGuiItemFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImGuiItemFlags result;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlags",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemFlags_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImGuiItemFlags) ((arg1)->ItemFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidth",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemWidth_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidth",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemWidth_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (float) ((arg1)->ItemWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TextWrapPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::TextWrapPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPos",1,"ImGuiWindowTempData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TextWrapPos_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->TextWrapPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TextWrapPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindowTempData::TextWrapPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPos",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TextWrapPos_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (float) ((arg1)->TextWrapPos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemFlagsStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiItemFlags > *arg2 = (ImVector< ImGuiItemFlags > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemFlagsStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlagsStack",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlagsStack",2,"ImVector< ImGuiItemFlags > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemFlagsStack_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_int_t,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemFlagsStack_set",2,SWIGTYPE_p_ImVectorT_int_t);
  }
  
  if (arg1) (arg1)->ItemFlagsStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemFlagsStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiItemFlags > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemFlagsStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemFlagsStack",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemFlagsStack_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVector< ImGuiItemFlags > *)& ((arg1)->ItemFlagsStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemWidthStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< float > *arg2 = (ImVector< float > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemWidthStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidthStack",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidthStack",2,"ImVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemWidthStack_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_float_t,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemWidthStack_set",2,SWIGTYPE_p_ImVectorT_float_t);
  }
  
  if (arg1) (arg1)->ItemWidthStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_ItemWidthStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< float > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ItemWidthStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::ItemWidthStack",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_ItemWidthStack_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVector< float > *)& ((arg1)->ItemWidthStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TextWrapPosStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< float > *arg2 = (ImVector< float > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::TextWrapPosStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPosStack",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPosStack",2,"ImVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TextWrapPosStack_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_float_t,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TextWrapPosStack_set",2,SWIGTYPE_p_ImVectorT_float_t);
  }
  
  if (arg1) (arg1)->TextWrapPosStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_TextWrapPosStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< float > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::TextWrapPosStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::TextWrapPosStack",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_TextWrapPosStack_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVector< float > *)& ((arg1)->TextWrapPosStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_GroupStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiGroupData > *arg2 = (ImVector< ImGuiGroupData > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::GroupStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::GroupStack",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::GroupStack",2,"ImVector< ImGuiGroupData > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupStack_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiGroupData_t,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupStack_set",2,SWIGTYPE_p_ImVectorT_ImGuiGroupData_t);
  }
  
  if (arg1) (arg1)->GroupStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_GroupStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  ImVector< ImGuiGroupData > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::GroupStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::GroupStack",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_GroupStack_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (ImVector< ImGuiGroupData > *)& ((arg1)->GroupStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiGroupData_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_StackSizesBackup_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  short *arg2 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::StackSizesBackup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::StackSizesBackup",1,"ImGuiWindowTempData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindowTempData::StackSizesBackup",2,"short [6]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_StackSizesBackup_set",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_StackSizesBackup_set",2,SWIGTYPE_p_short);
  }
  
  {
    size_t ii;
    short *b = (short *) arg1->StackSizesBackup;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindowTempData_StackSizesBackup_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::StackSizesBackup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowTempData::StackSizesBackup",1,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindowTempData_StackSizesBackup_get",1,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  result = (short *)(short *) ((arg1)->StackSizesBackup);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiWindowTempData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowTempData *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindowTempData::ImGuiWindowTempData",0,0)
  result = (ImGuiWindowTempData *)new ImGuiWindowTempData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowTempData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiWindowTempData(void *obj) {
ImGuiWindowTempData *arg1 = (ImGuiWindowTempData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiWindowTempData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiWindowTempData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiWindowTempData_attributes[] = {
    { "CursorPos", _wrap_ImGuiWindowTempData_CursorPos_get, _wrap_ImGuiWindowTempData_CursorPos_set },
    { "CursorPosPrevLine", _wrap_ImGuiWindowTempData_CursorPosPrevLine_get, _wrap_ImGuiWindowTempData_CursorPosPrevLine_set },
    { "CursorStartPos", _wrap_ImGuiWindowTempData_CursorStartPos_get, _wrap_ImGuiWindowTempData_CursorStartPos_set },
    { "CursorMaxPos", _wrap_ImGuiWindowTempData_CursorMaxPos_get, _wrap_ImGuiWindowTempData_CursorMaxPos_set },
    { "CurrLineSize", _wrap_ImGuiWindowTempData_CurrLineSize_get, _wrap_ImGuiWindowTempData_CurrLineSize_set },
    { "PrevLineSize", _wrap_ImGuiWindowTempData_PrevLineSize_get, _wrap_ImGuiWindowTempData_PrevLineSize_set },
    { "CurrLineTextBaseOffset", _wrap_ImGuiWindowTempData_CurrLineTextBaseOffset_get, _wrap_ImGuiWindowTempData_CurrLineTextBaseOffset_set },
    { "PrevLineTextBaseOffset", _wrap_ImGuiWindowTempData_PrevLineTextBaseOffset_get, _wrap_ImGuiWindowTempData_PrevLineTextBaseOffset_set },
    { "Indent", _wrap_ImGuiWindowTempData_Indent_get, _wrap_ImGuiWindowTempData_Indent_set },
    { "ColumnsOffset", _wrap_ImGuiWindowTempData_ColumnsOffset_get, _wrap_ImGuiWindowTempData_ColumnsOffset_set },
    { "GroupOffset", _wrap_ImGuiWindowTempData_GroupOffset_get, _wrap_ImGuiWindowTempData_GroupOffset_set },
    { "LastItemId", _wrap_ImGuiWindowTempData_LastItemId_get, _wrap_ImGuiWindowTempData_LastItemId_set },
    { "LastItemStatusFlags", _wrap_ImGuiWindowTempData_LastItemStatusFlags_get, _wrap_ImGuiWindowTempData_LastItemStatusFlags_set },
    { "LastItemRect", _wrap_ImGuiWindowTempData_LastItemRect_get, _wrap_ImGuiWindowTempData_LastItemRect_set },
    { "LastItemDisplayRect", _wrap_ImGuiWindowTempData_LastItemDisplayRect_get, _wrap_ImGuiWindowTempData_LastItemDisplayRect_set },
    { "NavLayerCurrent", _wrap_ImGuiWindowTempData_NavLayerCurrent_get, _wrap_ImGuiWindowTempData_NavLayerCurrent_set },
    { "NavLayerActiveMask", _wrap_ImGuiWindowTempData_NavLayerActiveMask_get, _wrap_ImGuiWindowTempData_NavLayerActiveMask_set },
    { "NavLayerActiveMaskNext", _wrap_ImGuiWindowTempData_NavLayerActiveMaskNext_get, _wrap_ImGuiWindowTempData_NavLayerActiveMaskNext_set },
    { "NavFocusScopeIdCurrent", _wrap_ImGuiWindowTempData_NavFocusScopeIdCurrent_get, _wrap_ImGuiWindowTempData_NavFocusScopeIdCurrent_set },
    { "NavHideHighlightOneFrame", _wrap_ImGuiWindowTempData_NavHideHighlightOneFrame_get, _wrap_ImGuiWindowTempData_NavHideHighlightOneFrame_set },
    { "NavHasScroll", _wrap_ImGuiWindowTempData_NavHasScroll_get, _wrap_ImGuiWindowTempData_NavHasScroll_set },
    { "MenuBarAppending", _wrap_ImGuiWindowTempData_MenuBarAppending_get, _wrap_ImGuiWindowTempData_MenuBarAppending_set },
    { "MenuBarOffset", _wrap_ImGuiWindowTempData_MenuBarOffset_get, _wrap_ImGuiWindowTempData_MenuBarOffset_set },
    { "MenuColumns", _wrap_ImGuiWindowTempData_MenuColumns_get, _wrap_ImGuiWindowTempData_MenuColumns_set },
    { "TreeDepth", _wrap_ImGuiWindowTempData_TreeDepth_get, _wrap_ImGuiWindowTempData_TreeDepth_set },
    { "TreeJumpToParentOnPopMask", _wrap_ImGuiWindowTempData_TreeJumpToParentOnPopMask_get, _wrap_ImGuiWindowTempData_TreeJumpToParentOnPopMask_set },
    { "ChildWindows", _wrap_ImGuiWindowTempData_ChildWindows_get, _wrap_ImGuiWindowTempData_ChildWindows_set },
    { "StateStorage", _wrap_ImGuiWindowTempData_StateStorage_get, _wrap_ImGuiWindowTempData_StateStorage_set },
    { "CurrentColumns", _wrap_ImGuiWindowTempData_CurrentColumns_get, _wrap_ImGuiWindowTempData_CurrentColumns_set },
    { "LayoutType", _wrap_ImGuiWindowTempData_LayoutType_get, _wrap_ImGuiWindowTempData_LayoutType_set },
    { "ParentLayoutType", _wrap_ImGuiWindowTempData_ParentLayoutType_get, _wrap_ImGuiWindowTempData_ParentLayoutType_set },
    { "FocusCounterRegular", _wrap_ImGuiWindowTempData_FocusCounterRegular_get, _wrap_ImGuiWindowTempData_FocusCounterRegular_set },
    { "FocusCounterTabStop", _wrap_ImGuiWindowTempData_FocusCounterTabStop_get, _wrap_ImGuiWindowTempData_FocusCounterTabStop_set },
    { "ItemFlags", _wrap_ImGuiWindowTempData_ItemFlags_get, _wrap_ImGuiWindowTempData_ItemFlags_set },
    { "ItemWidth", _wrap_ImGuiWindowTempData_ItemWidth_get, _wrap_ImGuiWindowTempData_ItemWidth_set },
    { "TextWrapPos", _wrap_ImGuiWindowTempData_TextWrapPos_get, _wrap_ImGuiWindowTempData_TextWrapPos_set },
    { "ItemFlagsStack", _wrap_ImGuiWindowTempData_ItemFlagsStack_get, _wrap_ImGuiWindowTempData_ItemFlagsStack_set },
    { "ItemWidthStack", _wrap_ImGuiWindowTempData_ItemWidthStack_get, _wrap_ImGuiWindowTempData_ItemWidthStack_set },
    { "TextWrapPosStack", _wrap_ImGuiWindowTempData_TextWrapPosStack_get, _wrap_ImGuiWindowTempData_TextWrapPosStack_set },
    { "GroupStack", _wrap_ImGuiWindowTempData_GroupStack_get, _wrap_ImGuiWindowTempData_GroupStack_set },
    { "StackSizesBackup", _wrap_ImGuiWindowTempData_StackSizesBackup_get, _wrap_ImGuiWindowTempData_StackSizesBackup_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiWindowTempData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiWindowTempData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiWindowTempData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiWindowTempData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiWindowTempData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiWindowTempData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiWindowTempData_Sf_SwigStatic = {
    "ImGuiWindowTempData",
    swig_ImGuiWindowTempData_Sf_SwigStatic_methods,
    swig_ImGuiWindowTempData_Sf_SwigStatic_attributes,
    swig_ImGuiWindowTempData_Sf_SwigStatic_constants,
    swig_ImGuiWindowTempData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiWindowTempData_bases[] = {0};
static const char *swig_ImGuiWindowTempData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiWindowTempData = { "ImGuiWindowTempData", "ImGuiWindowTempData", &SWIGTYPE_p_ImGuiWindowTempData,_proxy__wrap_new_ImGuiWindowTempData, swig_delete_ImGuiWindowTempData, swig_ImGuiWindowTempData_methods, swig_ImGuiWindowTempData_attributes, &swig_ImGuiWindowTempData_Sf_SwigStatic, swig_ImGuiWindowTempData_meta, swig_ImGuiWindowTempData_bases, swig_ImGuiWindowTempData_base_names };

static int _wrap_ImGuiWindow_Name_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Name",1,"ImGuiWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::Name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Name_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->Name;
    if (arg2) {
      arg1->Name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Name, (const char *)arg2);
    } else {
      arg1->Name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Name_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Name",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Name_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (char *) ((arg1)->Name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ID",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ID_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ID",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ID_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Flags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::Flags",2,"ImGuiWindowFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Flags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags result;
  
  SWIG_check_num_args("ImGuiWindow::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Flags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Flags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindowFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FlagsPreviousFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::FlagsPreviousFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FlagsPreviousFrame",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::FlagsPreviousFrame",2,"ImGuiWindowFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FlagsPreviousFrame_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->FlagsPreviousFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FlagsPreviousFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags result;
  
  SWIG_check_num_args("ImGuiWindow::FlagsPreviousFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FlagsPreviousFrame",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FlagsPreviousFrame_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindowFlags) ((arg1)->FlagsPreviousFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowClass_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowClass *arg2 = (ImGuiWindowClass *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowClass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowClass",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::WindowClass",2,"ImGuiWindowClass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowClass_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindowClass,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowClass_set",2,SWIGTYPE_p_ImGuiWindowClass);
  }
  
  if (arg1) (arg1)->WindowClass = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowClass_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowClass *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowClass",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowClass_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindowClass *)& ((arg1)->WindowClass);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowClass,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Viewport_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiViewportP *arg2 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Viewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Viewport",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::Viewport",2,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Viewport_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewportP,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_Viewport_set",2,SWIGTYPE_p_ImGuiViewportP);
  }
  
  if (arg1) (arg1)->Viewport = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Viewport_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiViewportP *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Viewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Viewport",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Viewport_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiViewportP *) ((arg1)->Viewport);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewportP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ViewportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportId",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ViewportId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportId_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::ViewportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportId",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportId_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->ViewportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ViewportPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportPos",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ViewportPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportPos_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ViewportPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ViewportPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportPos",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportPos_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ViewportPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportAllowPlatformMonitorExtend_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ViewportAllowPlatformMonitorExtend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportAllowPlatformMonitorExtend",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ViewportAllowPlatformMonitorExtend",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportAllowPlatformMonitorExtend_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ViewportAllowPlatformMonitorExtend = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportAllowPlatformMonitorExtend_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::ViewportAllowPlatformMonitorExtend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportAllowPlatformMonitorExtend",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportAllowPlatformMonitorExtend_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->ViewportAllowPlatformMonitorExtend);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Pos",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::Pos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Pos_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_Pos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Pos",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Pos_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->Pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Size_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Size",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::Size",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Size_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_Size_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Size = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Size_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Size",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Size_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->Size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SizeFull_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SizeFull",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SizeFull",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::SizeFull",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SizeFull_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_SizeFull_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SizeFull = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SizeFull_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SizeFull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SizeFull",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SizeFull_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->SizeFull);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentSize",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ContentSize",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSize_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSize_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ContentSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentSize",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSize_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ContentSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentSizeExplicit_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentSizeExplicit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentSizeExplicit",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ContentSizeExplicit",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSizeExplicit_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSizeExplicit_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ContentSizeExplicit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentSizeExplicit_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentSizeExplicit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentSizeExplicit",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentSizeExplicit_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ContentSizeExplicit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowPadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowPadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowPadding",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::WindowPadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowPadding_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowPadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->WindowPadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowPadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowPadding",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowPadding_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->WindowPadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowRounding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowRounding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowRounding",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::WindowRounding",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowRounding_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowRounding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowRounding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::WindowRounding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowRounding",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowRounding_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->WindowRounding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowBorderSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::WindowBorderSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowBorderSize",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::WindowBorderSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowBorderSize_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WindowBorderSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WindowBorderSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::WindowBorderSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WindowBorderSize",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WindowBorderSize_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->WindowBorderSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NameBufLen_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::NameBufLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NameBufLen",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::NameBufLen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NameBufLen_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->NameBufLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NameBufLen_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::NameBufLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NameBufLen",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NameBufLen_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->NameBufLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MoveId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::MoveId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MoveId",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::MoveId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MoveId_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->MoveId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MoveId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::MoveId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MoveId",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MoveId_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->MoveId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ChildId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ChildId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ChildId",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ChildId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ChildId_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ChildId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ChildId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::ChildId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ChildId",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ChildId_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->ChildId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Scroll_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Scroll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Scroll",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::Scroll",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Scroll_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_Scroll_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->Scroll = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Scroll_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::Scroll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Scroll",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Scroll_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->Scroll);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollMax_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollMax",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollMax",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollMax_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollMax_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollMax_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollMax",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollMax_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTarget",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollTarget",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTarget_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTarget_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollTarget = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTarget",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTarget_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollTarget);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTargetCenterRatio_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTargetCenterRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTargetCenterRatio",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollTargetCenterRatio",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetCenterRatio_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetCenterRatio_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollTargetCenterRatio = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTargetCenterRatio_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTargetCenterRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTargetCenterRatio",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetCenterRatio_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollTargetCenterRatio);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTargetEdgeSnapDist_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTargetEdgeSnapDist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTargetEdgeSnapDist",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollTargetEdgeSnapDist",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetEdgeSnapDist_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetEdgeSnapDist_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollTargetEdgeSnapDist = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollTargetEdgeSnapDist_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollTargetEdgeSnapDist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollTargetEdgeSnapDist",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollTargetEdgeSnapDist_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollTargetEdgeSnapDist);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarSizes_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarSizes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarSizes",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollbarSizes",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarSizes_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarSizes_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->ScrollbarSizes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarSizes_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarSizes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarSizes",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarSizes_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->ScrollbarSizes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarX",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollbarX",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarX_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ScrollbarX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarX",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarX_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->ScrollbarX);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarY",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::ScrollbarY",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarY_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ScrollbarY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ScrollbarY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::ScrollbarY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ScrollbarY",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ScrollbarY_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->ScrollbarY);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportOwned_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ViewportOwned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportOwned",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::ViewportOwned",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportOwned_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ViewportOwned = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ViewportOwned_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::ViewportOwned",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ViewportOwned",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ViewportOwned_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->ViewportOwned);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Active_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::Active",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Active",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::Active",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Active_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Active = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Active_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::Active",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Active",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Active_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->Active);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WasActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::WasActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WasActive",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::WasActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WasActive_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WasActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WasActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::WasActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WasActive",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WasActive_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->WasActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WriteAccessed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::WriteAccessed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WriteAccessed",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::WriteAccessed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WriteAccessed_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WriteAccessed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WriteAccessed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::WriteAccessed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WriteAccessed",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WriteAccessed_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->WriteAccessed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Collapsed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::Collapsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Collapsed",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::Collapsed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Collapsed_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Collapsed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Collapsed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::Collapsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Collapsed",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Collapsed_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->Collapsed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WantCollapseToggle_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::WantCollapseToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WantCollapseToggle",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::WantCollapseToggle",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WantCollapseToggle_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantCollapseToggle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WantCollapseToggle_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::WantCollapseToggle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WantCollapseToggle",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WantCollapseToggle_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->WantCollapseToggle);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SkipItems_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SkipItems",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SkipItems",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::SkipItems",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SkipItems_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->SkipItems = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SkipItems_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::SkipItems",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SkipItems",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SkipItems_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->SkipItems);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Appearing_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::Appearing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Appearing",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::Appearing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Appearing_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Appearing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Appearing_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::Appearing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Appearing",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Appearing_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->Appearing);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Hidden_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::Hidden",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Hidden",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::Hidden",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Hidden_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->Hidden = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Hidden_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::Hidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Hidden",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Hidden_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->Hidden);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_IsFallbackWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::IsFallbackWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::IsFallbackWindow",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::IsFallbackWindow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_IsFallbackWindow_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->IsFallbackWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_IsFallbackWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::IsFallbackWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::IsFallbackWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_IsFallbackWindow_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->IsFallbackWindow);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HasCloseButton_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::HasCloseButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HasCloseButton",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::HasCloseButton",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HasCloseButton_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->HasCloseButton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HasCloseButton_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::HasCloseButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HasCloseButton",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HasCloseButton_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->HasCloseButton);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ResizeBorderHeld_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ResizeBorderHeld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ResizeBorderHeld",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ResizeBorderHeld",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ResizeBorderHeld_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  if (arg1) (arg1)->ResizeBorderHeld = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ResizeBorderHeld_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  signed char result;
  
  SWIG_check_num_args("ImGuiWindow::ResizeBorderHeld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ResizeBorderHeld",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ResizeBorderHeld_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (signed char) ((arg1)->ResizeBorderHeld);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::BeginCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginCount",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::BeginCount",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginCount_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->BeginCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiWindow::BeginCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginCount",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginCount_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (short) ((arg1)->BeginCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginOrderWithinParent_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::BeginOrderWithinParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinParent",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinParent",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginOrderWithinParent_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->BeginOrderWithinParent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginOrderWithinParent_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiWindow::BeginOrderWithinParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinParent",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginOrderWithinParent_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (short) ((arg1)->BeginOrderWithinParent);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginOrderWithinContext_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::BeginOrderWithinContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinContext",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinContext",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginOrderWithinContext_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->BeginOrderWithinContext = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_BeginOrderWithinContext_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiWindow::BeginOrderWithinContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::BeginOrderWithinContext",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_BeginOrderWithinContext_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (short) ((arg1)->BeginOrderWithinContext);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_PopupId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::PopupId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::PopupId",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::PopupId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_PopupId_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->PopupId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_PopupId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::PopupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::PopupId",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_PopupId_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->PopupId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitFramesX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitFramesX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesX",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesX",2,"ImS8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitFramesX_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImS8)lua_tonumber(L, 2);
  if (arg1) (arg1)->AutoFitFramesX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitFramesX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 result;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitFramesX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesX",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitFramesX_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImS8) ((arg1)->AutoFitFramesX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitFramesY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitFramesY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesY",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesY",2,"ImS8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitFramesY_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImS8)lua_tonumber(L, 2);
  if (arg1) (arg1)->AutoFitFramesY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitFramesY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 result;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitFramesY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitFramesY",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitFramesY_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImS8) ((arg1)->AutoFitFramesY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitChildAxises_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitChildAxises",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitChildAxises",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::AutoFitChildAxises",2,"ImS8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitChildAxises_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImS8)lua_tonumber(L, 2);
  if (arg1) (arg1)->AutoFitChildAxises = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitChildAxises_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImS8 result;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitChildAxises",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitChildAxises",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitChildAxises_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImS8) ((arg1)->AutoFitChildAxises);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitOnlyGrows_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitOnlyGrows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitOnlyGrows",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::AutoFitOnlyGrows",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitOnlyGrows_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->AutoFitOnlyGrows = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoFitOnlyGrows_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::AutoFitOnlyGrows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoFitOnlyGrows",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoFitOnlyGrows_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->AutoFitOnlyGrows);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoPosLastDirection_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDir arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::AutoPosLastDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoPosLastDirection",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::AutoPosLastDirection",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoPosLastDirection_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  if (arg1) (arg1)->AutoPosLastDirection = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_AutoPosLastDirection_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDir result;
  
  SWIG_check_num_args("ImGuiWindow::AutoPosLastDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::AutoPosLastDirection",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_AutoPosLastDirection_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiDir) ((arg1)->AutoPosLastDirection);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HiddenFramesCanSkipItems_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::HiddenFramesCanSkipItems",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCanSkipItems",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCanSkipItems",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HiddenFramesCanSkipItems_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->HiddenFramesCanSkipItems = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HiddenFramesCanSkipItems_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::HiddenFramesCanSkipItems",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCanSkipItems",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HiddenFramesCanSkipItems_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->HiddenFramesCanSkipItems);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HiddenFramesCannotSkipItems_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::HiddenFramesCannotSkipItems",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCannotSkipItems",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCannotSkipItems",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HiddenFramesCannotSkipItems_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->HiddenFramesCannotSkipItems = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HiddenFramesCannotSkipItems_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::HiddenFramesCannotSkipItems",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HiddenFramesCannotSkipItems",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HiddenFramesCannotSkipItems_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->HiddenFramesCannotSkipItems);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosAllowFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosAllowFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosAllowFlags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowPosAllowFlags",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosAllowFlags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->SetWindowPosAllowFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosAllowFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosAllowFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosAllowFlags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosAllowFlags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiCond) ((arg1)->SetWindowPosAllowFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowSizeAllowFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowSizeAllowFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowSizeAllowFlags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowSizeAllowFlags",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowSizeAllowFlags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->SetWindowSizeAllowFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowSizeAllowFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowSizeAllowFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowSizeAllowFlags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowSizeAllowFlags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiCond) ((arg1)->SetWindowSizeAllowFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowCollapsedAllowFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowCollapsedAllowFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowCollapsedAllowFlags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowCollapsedAllowFlags",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowCollapsedAllowFlags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->SetWindowCollapsedAllowFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowCollapsedAllowFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowCollapsedAllowFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowCollapsedAllowFlags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowCollapsedAllowFlags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiCond) ((arg1)->SetWindowCollapsedAllowFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowDockAllowFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowDockAllowFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowDockAllowFlags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowDockAllowFlags",2,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowDockAllowFlags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiCond)lua_tonumber(L, 2);
  if (arg1) (arg1)->SetWindowDockAllowFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowDockAllowFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiCond result;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowDockAllowFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowDockAllowFlags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowDockAllowFlags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiCond) ((arg1)->SetWindowDockAllowFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosVal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosVal",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowPosVal",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosVal_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosVal_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SetWindowPosVal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosVal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosVal",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosVal_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->SetWindowPosVal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosPivot_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosPivot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosPivot",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::SetWindowPosPivot",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosPivot_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosPivot_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->SetWindowPosPivot = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SetWindowPosPivot_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::SetWindowPosPivot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SetWindowPosPivot",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SetWindowPosPivot_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2 *)& ((arg1)->SetWindowPosPivot);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_IDStack_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVector< ImGuiID > *arg2 = (ImVector< ImGuiID > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::IDStack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::IDStack",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::IDStack",2,"ImVector< ImGuiID > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_IDStack_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("ImGuiWindow_IDStack_set",2,SWIGTYPE_p_ImVectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->IDStack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_IDStack_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVector< ImGuiID > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::IDStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::IDStack",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_IDStack_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVector< ImGuiID > *)& ((arg1)->IDStack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DC_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowTempData *arg2 = (ImGuiWindowTempData *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DC",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DC",2,"ImGuiWindowTempData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DC_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindowTempData,0))){
    SWIG_fail_ptr("ImGuiWindow_DC_set",2,SWIGTYPE_p_ImGuiWindowTempData);
  }
  
  if (arg1) (arg1)->DC = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DC_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowTempData *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DC",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DC_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindowTempData *)& ((arg1)->DC);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowTempData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_OuterRectClipped_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::OuterRectClipped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::OuterRectClipped",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::OuterRectClipped",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_OuterRectClipped_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_OuterRectClipped_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->OuterRectClipped = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_OuterRectClipped_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::OuterRectClipped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::OuterRectClipped",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_OuterRectClipped_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->OuterRectClipped);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_InnerRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::InnerRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::InnerRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::InnerRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->InnerRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_InnerRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::InnerRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::InnerRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->InnerRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_InnerClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::InnerClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::InnerClipRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::InnerClipRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerClipRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerClipRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->InnerClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_InnerClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::InnerClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::InnerClipRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_InnerClipRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->InnerClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WorkRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WorkRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WorkRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::WorkRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WorkRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_WorkRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->WorkRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_WorkRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::WorkRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::WorkRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_WorkRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->WorkRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ParentWorkRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ParentWorkRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ParentWorkRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ParentWorkRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ParentWorkRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_ParentWorkRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->ParentWorkRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ParentWorkRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ParentWorkRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ParentWorkRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ParentWorkRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->ParentWorkRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ClipRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ClipRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ClipRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ClipRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ClipRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_ClipRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->ClipRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ClipRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ClipRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ClipRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ClipRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->ClipRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentRegionRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentRegionRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentRegionRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ContentRegionRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentRegionRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentRegionRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->ContentRegionRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ContentRegionRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ContentRegionRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ContentRegionRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ContentRegionRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->ContentRegionRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HitTestHoleSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2ih *arg2 = (ImVec2ih *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::HitTestHoleSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HitTestHoleSize",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::HitTestHoleSize",2,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleSize_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleSize_set",2,SWIGTYPE_p_ImVec2ih);
  }
  
  if (arg1) (arg1)->HitTestHoleSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HitTestHoleSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::HitTestHoleSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HitTestHoleSize",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleSize_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2ih *)& ((arg1)->HitTestHoleSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HitTestHoleOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2ih *arg2 = (ImVec2ih *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::HitTestHoleOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HitTestHoleOffset",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::HitTestHoleOffset",2,"ImVec2ih *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleOffset_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2ih,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleOffset_set",2,SWIGTYPE_p_ImVec2ih);
  }
  
  if (arg1) (arg1)->HitTestHoleOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_HitTestHoleOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2ih *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::HitTestHoleOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::HitTestHoleOffset",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_HitTestHoleOffset_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVec2ih *)& ((arg1)->HitTestHoleOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2ih,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastFrameActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::LastFrameActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastFrameActive",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::LastFrameActive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastFrameActive_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastFrameActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::LastFrameActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastFrameActive",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastFrameActive_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->LastFrameActive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastFrameJustFocused_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::LastFrameJustFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastFrameJustFocused",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::LastFrameJustFocused",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastFrameJustFocused_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameJustFocused = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastFrameJustFocused_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::LastFrameJustFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastFrameJustFocused",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastFrameJustFocused_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->LastFrameJustFocused);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastTimeActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::LastTimeActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastTimeActive",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::LastTimeActive",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastTimeActive_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastTimeActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_LastTimeActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::LastTimeActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::LastTimeActive",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_LastTimeActive_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->LastTimeActive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ItemWidthDefault_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::ItemWidthDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ItemWidthDefault",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::ItemWidthDefault",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ItemWidthDefault_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemWidthDefault = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ItemWidthDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::ItemWidthDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ItemWidthDefault",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ItemWidthDefault_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->ItemWidthDefault);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_StateStorage_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiStorage *arg2 = (ImGuiStorage *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::StateStorage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::StateStorage",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::StateStorage",2,"ImGuiStorage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_StateStorage_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStorage,0))){
    SWIG_fail_ptr("ImGuiWindow_StateStorage_set",2,SWIGTYPE_p_ImGuiStorage);
  }
  
  if (arg1) (arg1)->StateStorage = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_StateStorage_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiStorage *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::StateStorage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::StateStorage",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_StateStorage_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiStorage *)& ((arg1)->StateStorage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ColumnsStorage_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVector< ImGuiColumns > *arg2 = (ImVector< ImGuiColumns > *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ColumnsStorage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ColumnsStorage",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ColumnsStorage",2,"ImVector< ImGuiColumns > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ColumnsStorage_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiColumns_t,0))){
    SWIG_fail_ptr("ImGuiWindow_ColumnsStorage_set",2,SWIGTYPE_p_ImVectorT_ImGuiColumns_t);
  }
  
  if (arg1) (arg1)->ColumnsStorage = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ColumnsStorage_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVector< ImGuiColumns > *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ColumnsStorage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ColumnsStorage",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ColumnsStorage_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImVector< ImGuiColumns > *)& ((arg1)->ColumnsStorage);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiColumns_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FontWindowScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::FontWindowScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FontWindowScale",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::FontWindowScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FontWindowScale_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontWindowScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FontWindowScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::FontWindowScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FontWindowScale",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FontWindowScale_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->FontWindowScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FontDpiScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::FontDpiScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FontDpiScale",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::FontDpiScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FontDpiScale_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FontDpiScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_FontDpiScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::FontDpiScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::FontDpiScale",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_FontDpiScale_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float) ((arg1)->FontDpiScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SettingsOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::SettingsOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SettingsOffset",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::SettingsOffset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SettingsOffset_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->SettingsOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_SettingsOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::SettingsOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::SettingsOffset",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_SettingsOffset_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->SettingsOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DrawList_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DrawList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DrawList",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DrawList",2,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DrawList_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_DrawList_set",2,SWIGTYPE_p_ImDrawList);
  }
  
  if (arg1) (arg1)->DrawList = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DrawList_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DrawList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DrawList",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DrawList_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImDrawList *) ((arg1)->DrawList);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DrawListInst_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DrawListInst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DrawListInst",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DrawListInst",2,"ImDrawList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DrawListInst_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ImGuiWindow_DrawListInst_set",2,SWIGTYPE_p_ImDrawList);
  }
  
  if (arg1) (arg1)->DrawListInst = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DrawListInst_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DrawListInst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DrawListInst",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DrawListInst_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImDrawList *)& ((arg1)->DrawListInst);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ParentWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ParentWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ParentWindow",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::ParentWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ParentWindow_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_ParentWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->ParentWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_ParentWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ParentWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ParentWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_ParentWindow_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->ParentWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindow",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::RootWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindow_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_RootWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->RootWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindow_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->RootWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowDockStop_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowDockStop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowDockStop",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::RootWindowDockStop",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowDockStop_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowDockStop_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->RootWindowDockStop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowDockStop_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowDockStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowDockStop",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowDockStop_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->RootWindowDockStop);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowForTitleBarHighlight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowForTitleBarHighlight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowForTitleBarHighlight",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::RootWindowForTitleBarHighlight",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForTitleBarHighlight_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForTitleBarHighlight_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->RootWindowForTitleBarHighlight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowForTitleBarHighlight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowForTitleBarHighlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowForTitleBarHighlight",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForTitleBarHighlight_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->RootWindowForTitleBarHighlight);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowForNav_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowForNav",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowForNav",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::RootWindowForNav",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForNav_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForNav_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->RootWindowForNav = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_RootWindowForNav_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::RootWindowForNav",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::RootWindowForNav",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_RootWindowForNav_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->RootWindowForNav);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavLastChildNavWindow_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::NavLastChildNavWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavLastChildNavWindow",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::NavLastChildNavWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavLastChildNavWindow_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_NavLastChildNavWindow_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->NavLastChildNavWindow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavLastChildNavWindow_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::NavLastChildNavWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavLastChildNavWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavLastChildNavWindow_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiWindow *) ((arg1)->NavLastChildNavWindow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavLastIds_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID *arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::NavLastIds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavLastIds",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::NavLastIds",2,"ImGuiID [ImGuiNavLayer_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavLastIds_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImGuiWindow_NavLastIds_set",2,SWIGTYPE_p_unsigned_int);
  }
  
  {
    size_t ii;
    ImGuiID *b = (ImGuiID *) arg1->NavLastIds;
    for (ii = 0; ii < (size_t)ImGuiNavLayer_COUNT; ii++) b[ii] = *((ImGuiID *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavLastIds_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::NavLastIds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavLastIds",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavLastIds_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID *)(ImGuiID *) ((arg1)->NavLastIds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavRectRel_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::NavRectRel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavRectRel",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::NavRectRel",2,"ImRect [ImGuiNavLayer_COUNT]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavRectRel_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_NavRectRel_set",2,SWIGTYPE_p_ImRect);
  }
  
  {
    size_t ii;
    ImRect *b = (ImRect *) arg1->NavRectRel;
    for (ii = 0; ii < (size_t)ImGuiNavLayer_COUNT; ii++) b[ii] = *((ImRect *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_NavRectRel_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::NavRectRel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::NavRectRel",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_NavRectRel_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)(ImRect *) ((arg1)->NavRectRel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryCompacted_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::MemoryCompacted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryCompacted",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::MemoryCompacted",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryCompacted_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->MemoryCompacted = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryCompacted_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::MemoryCompacted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryCompacted",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryCompacted_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->MemoryCompacted);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryDrawListIdxCapacity_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::MemoryDrawListIdxCapacity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListIdxCapacity",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListIdxCapacity",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryDrawListIdxCapacity_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MemoryDrawListIdxCapacity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryDrawListIdxCapacity_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::MemoryDrawListIdxCapacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListIdxCapacity",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryDrawListIdxCapacity_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->MemoryDrawListIdxCapacity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryDrawListVtxCapacity_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::MemoryDrawListVtxCapacity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListVtxCapacity",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListVtxCapacity",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryDrawListVtxCapacity_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->MemoryDrawListVtxCapacity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MemoryDrawListVtxCapacity_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiWindow::MemoryDrawListVtxCapacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MemoryDrawListVtxCapacity",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MemoryDrawListVtxCapacity_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (int) ((arg1)->MemoryDrawListVtxCapacity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockNode_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockNode",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DockNode",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockNode_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_DockNode_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->DockNode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockNode_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockNode",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockNode_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiDockNode *) ((arg1)->DockNode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockNodeAsHost_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockNodeAsHost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockNodeAsHost",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DockNodeAsHost",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockNodeAsHost_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiWindow_DockNodeAsHost_set",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  if (arg1) (arg1)->DockNodeAsHost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockNodeAsHost_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockNodeAsHost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockNodeAsHost",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockNodeAsHost_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiDockNode *) ((arg1)->DockNodeAsHost);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockId",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::DockId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockId_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::DockId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockId",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockId_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiID) ((arg1)->DockId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabItemStatusFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiItemStatusFlags arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockTabItemStatusFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabItemStatusFlags",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::DockTabItemStatusFlags",2,"ImGuiItemStatusFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabItemStatusFlags_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiItemStatusFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockTabItemStatusFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabItemStatusFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiItemStatusFlags result;
  
  SWIG_check_num_args("ImGuiWindow::DockTabItemStatusFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabItemStatusFlags",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabItemStatusFlags_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImGuiItemStatusFlags) ((arg1)->DockTabItemStatusFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabItemRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockTabItemRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabItemRect",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::DockTabItemRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabItemRect_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabItemRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->DockTabItemRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabItemRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::DockTabItemRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabItemRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabItemRect_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImRect *)& ((arg1)->DockTabItemRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockOrder",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::DockOrder",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockOrder_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->DockOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  short result;
  
  SWIG_check_num_args("ImGuiWindow::DockOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockOrder",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockOrder_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (short) ((arg1)->DockOrder);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockIsActive_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockIsActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockIsActive",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::DockIsActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockIsActive_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DockIsActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockIsActive_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::DockIsActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockIsActive",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockIsActive_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->DockIsActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabIsVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockTabIsVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabIsVisible",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::DockTabIsVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabIsVisible_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DockTabIsVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabIsVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::DockTabIsVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabIsVisible",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabIsVisible_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->DockTabIsVisible);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabWantClose_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiWindow::DockTabWantClose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabWantClose",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindow::DockTabWantClose",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabWantClose_set",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->DockTabWantClose = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_DockTabWantClose_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiWindow::DockTabWantClose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::DockTabWantClose",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_DockTabWantClose_get",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool) ((arg1)->DockTabWantClose);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiWindow::ImGuiWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::ImGuiWindow",1,"ImGuiContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::ImGuiWindow",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("new_ImGuiWindow",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ImGuiWindow *)new ImGuiWindow(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetID",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetID",1,"ImGuiWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::GetID",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiWindow::GetID",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (ImGuiID)(arg1)->GetID((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetID",1,"ImGuiWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::GetID",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ImGuiID)(arg1)->GetID((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  void *arg2 = (void *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetID",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::GetID",2,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiWindow_GetID");
  result = (ImGuiID)(arg1)->GetID((void const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetID__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetID",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::GetID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImGuiID)(arg1)->GetID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetID(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetID__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetID__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetID__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiWindow_GetID__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiWindow_GetID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiWindow::GetID(char const *,char const *)\n"
    "    ImGuiWindow::GetID(char const *)\n"
    "    ImGuiWindow::GetID(void const *)\n"
    "    ImGuiWindow::GetID(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetIDNoKeepAlive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",1,"ImGuiWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDNoKeepAlive",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (ImGuiID)(arg1)->GetIDNoKeepAlive((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetIDNoKeepAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",1,"ImGuiWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDNoKeepAlive",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ImGuiID)(arg1)->GetIDNoKeepAlive((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  void *arg2 = (void *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetIDNoKeepAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",2,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDNoKeepAlive",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiWindow_GetIDNoKeepAlive");
  result = (ImGuiID)(arg1)->GetIDNoKeepAlive((void const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetIDNoKeepAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindow::GetIDNoKeepAlive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDNoKeepAlive",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImGuiID)(arg1)->GetIDNoKeepAlive(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_GetIDNoKeepAlive(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImGuiWindow_GetIDNoKeepAlive__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiWindow_GetIDNoKeepAlive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGuiWindow::GetIDNoKeepAlive(char const *,char const *)\n"
    "    ImGuiWindow::GetIDNoKeepAlive(char const *)\n"
    "    ImGuiWindow::GetIDNoKeepAlive(void const *)\n"
    "    ImGuiWindow::GetIDNoKeepAlive(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ImGuiWindow_GetIDFromRectangle(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiWindow::GetIDFromRectangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::GetIDFromRectangle",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGuiWindow::GetIDFromRectangle",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDFromRectangle",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiWindow_GetIDFromRectangle",2,SWIGTYPE_p_ImRect);
  }
  
  result = (ImGuiID)(arg1)->GetIDFromRectangle((ImRect const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_Rect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiWindow::Rect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::Rect",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_Rect",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ((ImGuiWindow const *)arg1)->Rect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_CalcFontSize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::CalcFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::CalcFontSize",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_CalcFontSize",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float)((ImGuiWindow const *)arg1)->CalcFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_TitleBarHeight(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::TitleBarHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::TitleBarHeight",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_TitleBarHeight",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float)((ImGuiWindow const *)arg1)->TitleBarHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_TitleBarRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiWindow::TitleBarRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::TitleBarRect",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_TitleBarRect",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ((ImGuiWindow const *)arg1)->TitleBarRect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MenuBarHeight(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiWindow::MenuBarHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MenuBarHeight",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MenuBarHeight",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (float)((ImGuiWindow const *)arg1)->MenuBarHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiWindow_MenuBarRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGuiWindow::MenuBarRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindow::MenuBarRect",1,"ImGuiWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ImGuiWindow_MenuBarRect",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ((ImGuiWindow const *)arg1)->MenuBarRect();
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiWindow(void *obj) {
ImGuiWindow *arg1 = (ImGuiWindow *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiWindow_attributes[] = {
    { "Name", _wrap_ImGuiWindow_Name_get, _wrap_ImGuiWindow_Name_set },
    { "ID", _wrap_ImGuiWindow_ID_get, _wrap_ImGuiWindow_ID_set },
    { "Flags", _wrap_ImGuiWindow_Flags_get, _wrap_ImGuiWindow_Flags_set },
    { "FlagsPreviousFrame", _wrap_ImGuiWindow_FlagsPreviousFrame_get, _wrap_ImGuiWindow_FlagsPreviousFrame_set },
    { "WindowClass", _wrap_ImGuiWindow_WindowClass_get, _wrap_ImGuiWindow_WindowClass_set },
    { "Viewport", _wrap_ImGuiWindow_Viewport_get, _wrap_ImGuiWindow_Viewport_set },
    { "ViewportId", _wrap_ImGuiWindow_ViewportId_get, _wrap_ImGuiWindow_ViewportId_set },
    { "ViewportPos", _wrap_ImGuiWindow_ViewportPos_get, _wrap_ImGuiWindow_ViewportPos_set },
    { "ViewportAllowPlatformMonitorExtend", _wrap_ImGuiWindow_ViewportAllowPlatformMonitorExtend_get, _wrap_ImGuiWindow_ViewportAllowPlatformMonitorExtend_set },
    { "Pos", _wrap_ImGuiWindow_Pos_get, _wrap_ImGuiWindow_Pos_set },
    { "Size", _wrap_ImGuiWindow_Size_get, _wrap_ImGuiWindow_Size_set },
    { "SizeFull", _wrap_ImGuiWindow_SizeFull_get, _wrap_ImGuiWindow_SizeFull_set },
    { "ContentSize", _wrap_ImGuiWindow_ContentSize_get, _wrap_ImGuiWindow_ContentSize_set },
    { "ContentSizeExplicit", _wrap_ImGuiWindow_ContentSizeExplicit_get, _wrap_ImGuiWindow_ContentSizeExplicit_set },
    { "WindowPadding", _wrap_ImGuiWindow_WindowPadding_get, _wrap_ImGuiWindow_WindowPadding_set },
    { "WindowRounding", _wrap_ImGuiWindow_WindowRounding_get, _wrap_ImGuiWindow_WindowRounding_set },
    { "WindowBorderSize", _wrap_ImGuiWindow_WindowBorderSize_get, _wrap_ImGuiWindow_WindowBorderSize_set },
    { "NameBufLen", _wrap_ImGuiWindow_NameBufLen_get, _wrap_ImGuiWindow_NameBufLen_set },
    { "MoveId", _wrap_ImGuiWindow_MoveId_get, _wrap_ImGuiWindow_MoveId_set },
    { "ChildId", _wrap_ImGuiWindow_ChildId_get, _wrap_ImGuiWindow_ChildId_set },
    { "Scroll", _wrap_ImGuiWindow_Scroll_get, _wrap_ImGuiWindow_Scroll_set },
    { "ScrollMax", _wrap_ImGuiWindow_ScrollMax_get, _wrap_ImGuiWindow_ScrollMax_set },
    { "ScrollTarget", _wrap_ImGuiWindow_ScrollTarget_get, _wrap_ImGuiWindow_ScrollTarget_set },
    { "ScrollTargetCenterRatio", _wrap_ImGuiWindow_ScrollTargetCenterRatio_get, _wrap_ImGuiWindow_ScrollTargetCenterRatio_set },
    { "ScrollTargetEdgeSnapDist", _wrap_ImGuiWindow_ScrollTargetEdgeSnapDist_get, _wrap_ImGuiWindow_ScrollTargetEdgeSnapDist_set },
    { "ScrollbarSizes", _wrap_ImGuiWindow_ScrollbarSizes_get, _wrap_ImGuiWindow_ScrollbarSizes_set },
    { "ScrollbarX", _wrap_ImGuiWindow_ScrollbarX_get, _wrap_ImGuiWindow_ScrollbarX_set },
    { "ScrollbarY", _wrap_ImGuiWindow_ScrollbarY_get, _wrap_ImGuiWindow_ScrollbarY_set },
    { "ViewportOwned", _wrap_ImGuiWindow_ViewportOwned_get, _wrap_ImGuiWindow_ViewportOwned_set },
    { "Active", _wrap_ImGuiWindow_Active_get, _wrap_ImGuiWindow_Active_set },
    { "WasActive", _wrap_ImGuiWindow_WasActive_get, _wrap_ImGuiWindow_WasActive_set },
    { "WriteAccessed", _wrap_ImGuiWindow_WriteAccessed_get, _wrap_ImGuiWindow_WriteAccessed_set },
    { "Collapsed", _wrap_ImGuiWindow_Collapsed_get, _wrap_ImGuiWindow_Collapsed_set },
    { "WantCollapseToggle", _wrap_ImGuiWindow_WantCollapseToggle_get, _wrap_ImGuiWindow_WantCollapseToggle_set },
    { "SkipItems", _wrap_ImGuiWindow_SkipItems_get, _wrap_ImGuiWindow_SkipItems_set },
    { "Appearing", _wrap_ImGuiWindow_Appearing_get, _wrap_ImGuiWindow_Appearing_set },
    { "Hidden", _wrap_ImGuiWindow_Hidden_get, _wrap_ImGuiWindow_Hidden_set },
    { "IsFallbackWindow", _wrap_ImGuiWindow_IsFallbackWindow_get, _wrap_ImGuiWindow_IsFallbackWindow_set },
    { "HasCloseButton", _wrap_ImGuiWindow_HasCloseButton_get, _wrap_ImGuiWindow_HasCloseButton_set },
    { "ResizeBorderHeld", _wrap_ImGuiWindow_ResizeBorderHeld_get, _wrap_ImGuiWindow_ResizeBorderHeld_set },
    { "BeginCount", _wrap_ImGuiWindow_BeginCount_get, _wrap_ImGuiWindow_BeginCount_set },
    { "BeginOrderWithinParent", _wrap_ImGuiWindow_BeginOrderWithinParent_get, _wrap_ImGuiWindow_BeginOrderWithinParent_set },
    { "BeginOrderWithinContext", _wrap_ImGuiWindow_BeginOrderWithinContext_get, _wrap_ImGuiWindow_BeginOrderWithinContext_set },
    { "PopupId", _wrap_ImGuiWindow_PopupId_get, _wrap_ImGuiWindow_PopupId_set },
    { "AutoFitFramesX", _wrap_ImGuiWindow_AutoFitFramesX_get, _wrap_ImGuiWindow_AutoFitFramesX_set },
    { "AutoFitFramesY", _wrap_ImGuiWindow_AutoFitFramesY_get, _wrap_ImGuiWindow_AutoFitFramesY_set },
    { "AutoFitChildAxises", _wrap_ImGuiWindow_AutoFitChildAxises_get, _wrap_ImGuiWindow_AutoFitChildAxises_set },
    { "AutoFitOnlyGrows", _wrap_ImGuiWindow_AutoFitOnlyGrows_get, _wrap_ImGuiWindow_AutoFitOnlyGrows_set },
    { "AutoPosLastDirection", _wrap_ImGuiWindow_AutoPosLastDirection_get, _wrap_ImGuiWindow_AutoPosLastDirection_set },
    { "HiddenFramesCanSkipItems", _wrap_ImGuiWindow_HiddenFramesCanSkipItems_get, _wrap_ImGuiWindow_HiddenFramesCanSkipItems_set },
    { "HiddenFramesCannotSkipItems", _wrap_ImGuiWindow_HiddenFramesCannotSkipItems_get, _wrap_ImGuiWindow_HiddenFramesCannotSkipItems_set },
    { "SetWindowPosAllowFlags", _wrap_ImGuiWindow_SetWindowPosAllowFlags_get, _wrap_ImGuiWindow_SetWindowPosAllowFlags_set },
    { "SetWindowSizeAllowFlags", _wrap_ImGuiWindow_SetWindowSizeAllowFlags_get, _wrap_ImGuiWindow_SetWindowSizeAllowFlags_set },
    { "SetWindowCollapsedAllowFlags", _wrap_ImGuiWindow_SetWindowCollapsedAllowFlags_get, _wrap_ImGuiWindow_SetWindowCollapsedAllowFlags_set },
    { "SetWindowDockAllowFlags", _wrap_ImGuiWindow_SetWindowDockAllowFlags_get, _wrap_ImGuiWindow_SetWindowDockAllowFlags_set },
    { "SetWindowPosVal", _wrap_ImGuiWindow_SetWindowPosVal_get, _wrap_ImGuiWindow_SetWindowPosVal_set },
    { "SetWindowPosPivot", _wrap_ImGuiWindow_SetWindowPosPivot_get, _wrap_ImGuiWindow_SetWindowPosPivot_set },
    { "IDStack", _wrap_ImGuiWindow_IDStack_get, _wrap_ImGuiWindow_IDStack_set },
    { "DC", _wrap_ImGuiWindow_DC_get, _wrap_ImGuiWindow_DC_set },
    { "OuterRectClipped", _wrap_ImGuiWindow_OuterRectClipped_get, _wrap_ImGuiWindow_OuterRectClipped_set },
    { "InnerRect", _wrap_ImGuiWindow_InnerRect_get, _wrap_ImGuiWindow_InnerRect_set },
    { "InnerClipRect", _wrap_ImGuiWindow_InnerClipRect_get, _wrap_ImGuiWindow_InnerClipRect_set },
    { "WorkRect", _wrap_ImGuiWindow_WorkRect_get, _wrap_ImGuiWindow_WorkRect_set },
    { "ParentWorkRect", _wrap_ImGuiWindow_ParentWorkRect_get, _wrap_ImGuiWindow_ParentWorkRect_set },
    { "ClipRect", _wrap_ImGuiWindow_ClipRect_get, _wrap_ImGuiWindow_ClipRect_set },
    { "ContentRegionRect", _wrap_ImGuiWindow_ContentRegionRect_get, _wrap_ImGuiWindow_ContentRegionRect_set },
    { "HitTestHoleSize", _wrap_ImGuiWindow_HitTestHoleSize_get, _wrap_ImGuiWindow_HitTestHoleSize_set },
    { "HitTestHoleOffset", _wrap_ImGuiWindow_HitTestHoleOffset_get, _wrap_ImGuiWindow_HitTestHoleOffset_set },
    { "LastFrameActive", _wrap_ImGuiWindow_LastFrameActive_get, _wrap_ImGuiWindow_LastFrameActive_set },
    { "LastFrameJustFocused", _wrap_ImGuiWindow_LastFrameJustFocused_get, _wrap_ImGuiWindow_LastFrameJustFocused_set },
    { "LastTimeActive", _wrap_ImGuiWindow_LastTimeActive_get, _wrap_ImGuiWindow_LastTimeActive_set },
    { "ItemWidthDefault", _wrap_ImGuiWindow_ItemWidthDefault_get, _wrap_ImGuiWindow_ItemWidthDefault_set },
    { "StateStorage", _wrap_ImGuiWindow_StateStorage_get, _wrap_ImGuiWindow_StateStorage_set },
    { "ColumnsStorage", _wrap_ImGuiWindow_ColumnsStorage_get, _wrap_ImGuiWindow_ColumnsStorage_set },
    { "FontWindowScale", _wrap_ImGuiWindow_FontWindowScale_get, _wrap_ImGuiWindow_FontWindowScale_set },
    { "FontDpiScale", _wrap_ImGuiWindow_FontDpiScale_get, _wrap_ImGuiWindow_FontDpiScale_set },
    { "SettingsOffset", _wrap_ImGuiWindow_SettingsOffset_get, _wrap_ImGuiWindow_SettingsOffset_set },
    { "DrawList", _wrap_ImGuiWindow_DrawList_get, _wrap_ImGuiWindow_DrawList_set },
    { "DrawListInst", _wrap_ImGuiWindow_DrawListInst_get, _wrap_ImGuiWindow_DrawListInst_set },
    { "ParentWindow", _wrap_ImGuiWindow_ParentWindow_get, _wrap_ImGuiWindow_ParentWindow_set },
    { "RootWindow", _wrap_ImGuiWindow_RootWindow_get, _wrap_ImGuiWindow_RootWindow_set },
    { "RootWindowDockStop", _wrap_ImGuiWindow_RootWindowDockStop_get, _wrap_ImGuiWindow_RootWindowDockStop_set },
    { "RootWindowForTitleBarHighlight", _wrap_ImGuiWindow_RootWindowForTitleBarHighlight_get, _wrap_ImGuiWindow_RootWindowForTitleBarHighlight_set },
    { "RootWindowForNav", _wrap_ImGuiWindow_RootWindowForNav_get, _wrap_ImGuiWindow_RootWindowForNav_set },
    { "NavLastChildNavWindow", _wrap_ImGuiWindow_NavLastChildNavWindow_get, _wrap_ImGuiWindow_NavLastChildNavWindow_set },
    { "NavLastIds", _wrap_ImGuiWindow_NavLastIds_get, _wrap_ImGuiWindow_NavLastIds_set },
    { "NavRectRel", _wrap_ImGuiWindow_NavRectRel_get, _wrap_ImGuiWindow_NavRectRel_set },
    { "MemoryCompacted", _wrap_ImGuiWindow_MemoryCompacted_get, _wrap_ImGuiWindow_MemoryCompacted_set },
    { "MemoryDrawListIdxCapacity", _wrap_ImGuiWindow_MemoryDrawListIdxCapacity_get, _wrap_ImGuiWindow_MemoryDrawListIdxCapacity_set },
    { "MemoryDrawListVtxCapacity", _wrap_ImGuiWindow_MemoryDrawListVtxCapacity_get, _wrap_ImGuiWindow_MemoryDrawListVtxCapacity_set },
    { "DockNode", _wrap_ImGuiWindow_DockNode_get, _wrap_ImGuiWindow_DockNode_set },
    { "DockNodeAsHost", _wrap_ImGuiWindow_DockNodeAsHost_get, _wrap_ImGuiWindow_DockNodeAsHost_set },
    { "DockId", _wrap_ImGuiWindow_DockId_get, _wrap_ImGuiWindow_DockId_set },
    { "DockTabItemStatusFlags", _wrap_ImGuiWindow_DockTabItemStatusFlags_get, _wrap_ImGuiWindow_DockTabItemStatusFlags_set },
    { "DockTabItemRect", _wrap_ImGuiWindow_DockTabItemRect_get, _wrap_ImGuiWindow_DockTabItemRect_set },
    { "DockOrder", _wrap_ImGuiWindow_DockOrder_get, _wrap_ImGuiWindow_DockOrder_set },
    { "DockIsActive", _wrap_ImGuiWindow_DockIsActive_get, _wrap_ImGuiWindow_DockIsActive_set },
    { "DockTabIsVisible", _wrap_ImGuiWindow_DockTabIsVisible_get, _wrap_ImGuiWindow_DockTabIsVisible_set },
    { "DockTabWantClose", _wrap_ImGuiWindow_DockTabWantClose_get, _wrap_ImGuiWindow_DockTabWantClose_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiWindow_methods[]= {
    { "GetID", _wrap_ImGuiWindow_GetID},
    { "GetIDNoKeepAlive", _wrap_ImGuiWindow_GetIDNoKeepAlive},
    { "GetIDFromRectangle", _wrap_ImGuiWindow_GetIDFromRectangle},
    { "Rect", _wrap_ImGuiWindow_Rect},
    { "CalcFontSize", _wrap_ImGuiWindow_CalcFontSize},
    { "TitleBarHeight", _wrap_ImGuiWindow_TitleBarHeight},
    { "TitleBarRect", _wrap_ImGuiWindow_TitleBarRect},
    { "MenuBarHeight", _wrap_ImGuiWindow_MenuBarHeight},
    { "MenuBarRect", _wrap_ImGuiWindow_MenuBarRect},
    {0,0}
};
static swig_lua_method swig_ImGuiWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiWindow_Sf_SwigStatic = {
    "ImGuiWindow",
    swig_ImGuiWindow_Sf_SwigStatic_methods,
    swig_ImGuiWindow_Sf_SwigStatic_attributes,
    swig_ImGuiWindow_Sf_SwigStatic_constants,
    swig_ImGuiWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiWindow_bases[] = {0};
static const char *swig_ImGuiWindow_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiWindow = { "ImGuiWindow", "ImGuiWindow", &SWIGTYPE_p_ImGuiWindow,_proxy__wrap_new_ImGuiWindow, swig_delete_ImGuiWindow, swig_ImGuiWindow_methods, swig_ImGuiWindow_attributes, &swig_ImGuiWindow_Sf_SwigStatic, swig_ImGuiWindow_meta, swig_ImGuiWindow_bases, swig_ImGuiWindow_base_names };

static int _wrap_ImGuiLastItemDataBackup_LastItemId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemId",1,"ImGuiLastItemDataBackup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemId_set",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastItemId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemId",1,"ImGuiLastItemDataBackup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemId_get",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  result = (ImGuiID) ((arg1)->LastItemId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemStatusFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImGuiItemStatusFlags arg2 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemStatusFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemStatusFlags",1,"ImGuiLastItemDataBackup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemStatusFlags",2,"ImGuiItemStatusFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemStatusFlags_set",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  arg2 = (ImGuiItemStatusFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastItemStatusFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemStatusFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImGuiItemStatusFlags result;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemStatusFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemStatusFlags",1,"ImGuiLastItemDataBackup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemStatusFlags_get",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  result = (ImGuiItemStatusFlags) ((arg1)->LastItemStatusFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemRect",1,"ImGuiLastItemDataBackup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemRect_set",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->LastItemRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemRect",1,"ImGuiLastItemDataBackup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemRect_get",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  result = (ImRect *)& ((arg1)->LastItemRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemDisplayRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemDisplayRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemDisplayRect",1,"ImGuiLastItemDataBackup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemDisplayRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemDisplayRect_set",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemDisplayRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->LastItemDisplayRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_LastItemDisplayRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::LastItemDisplayRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::LastItemDisplayRect",1,"ImGuiLastItemDataBackup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_LastItemDisplayRect_get",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  result = (ImRect *)& ((arg1)->LastItemDisplayRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiLastItemDataBackup(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *result = 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::ImGuiLastItemDataBackup",0,0)
  result = (ImGuiLastItemDataBackup *)new ImGuiLastItemDataBackup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiLastItemDataBackup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_Backup(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::Backup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::Backup",1,"ImGuiLastItemDataBackup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_Backup",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  (arg1)->Backup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiLastItemDataBackup_Restore(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) 0 ;
  
  SWIG_check_num_args("ImGuiLastItemDataBackup::Restore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiLastItemDataBackup::Restore",1,"ImGuiLastItemDataBackup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiLastItemDataBackup,0))){
    SWIG_fail_ptr("ImGuiLastItemDataBackup_Restore",1,SWIGTYPE_p_ImGuiLastItemDataBackup);
  }
  
  ((ImGuiLastItemDataBackup const *)arg1)->Restore();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiLastItemDataBackup(void *obj) {
ImGuiLastItemDataBackup *arg1 = (ImGuiLastItemDataBackup *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiLastItemDataBackup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiLastItemDataBackup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiLastItemDataBackup_attributes[] = {
    { "LastItemId", _wrap_ImGuiLastItemDataBackup_LastItemId_get, _wrap_ImGuiLastItemDataBackup_LastItemId_set },
    { "LastItemStatusFlags", _wrap_ImGuiLastItemDataBackup_LastItemStatusFlags_get, _wrap_ImGuiLastItemDataBackup_LastItemStatusFlags_set },
    { "LastItemRect", _wrap_ImGuiLastItemDataBackup_LastItemRect_get, _wrap_ImGuiLastItemDataBackup_LastItemRect_set },
    { "LastItemDisplayRect", _wrap_ImGuiLastItemDataBackup_LastItemDisplayRect_get, _wrap_ImGuiLastItemDataBackup_LastItemDisplayRect_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiLastItemDataBackup_methods[]= {
    { "Backup", _wrap_ImGuiLastItemDataBackup_Backup},
    { "Restore", _wrap_ImGuiLastItemDataBackup_Restore},
    {0,0}
};
static swig_lua_method swig_ImGuiLastItemDataBackup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiLastItemDataBackup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiLastItemDataBackup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiLastItemDataBackup_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiLastItemDataBackup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiLastItemDataBackup_SwigStatic = {
    "ImGuiLastItemDataBackup",
    swig_ImGuiLastItemDataBackup_SwigStatic_methods,
    swig_ImGuiLastItemDataBackup_SwigStatic_attributes,
    swig_ImGuiLastItemDataBackup_SwigStatic_constants,
    swig_ImGuiLastItemDataBackup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiLastItemDataBackup_bases[] = {0};
static const char *swig_ImGuiLastItemDataBackup_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiLastItemDataBackup = { "ImGuiLastItemDataBackup", "ImGuiLastItemDataBackup", &SWIGTYPE_p_ImGuiLastItemDataBackup,_proxy__wrap_new_ImGuiLastItemDataBackup, swig_delete_ImGuiLastItemDataBackup, swig_ImGuiLastItemDataBackup_methods, swig_ImGuiLastItemDataBackup_attributes, &swig_ImGuiLastItemDataBackup_SwigStatic, swig_ImGuiLastItemDataBackup_meta, swig_ImGuiLastItemDataBackup_bases, swig_ImGuiLastItemDataBackup_base_names };

static int _wrap_ImGuiTabItem_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::ID",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_ID_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabItem::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::ID",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_ID_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiTabItemFlags arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Flags",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::Flags",2,"ImGuiTabItemFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Flags_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (ImGuiTabItemFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiTabItemFlags result;
  
  SWIG_check_num_args("ImGuiTabItem::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Flags",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Flags_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImGuiTabItemFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Window_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGuiTabItem::Window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Window",1,"ImGuiTabItem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabItem::Window",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Window_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ImGuiTabItem_Window_set",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  if (arg1) (arg1)->Window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Window_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabItem::Window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Window",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Window_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImGuiWindow *) ((arg1)->Window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_LastFrameVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::LastFrameVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::LastFrameVisible",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::LastFrameVisible",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_LastFrameVisible_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_LastFrameVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTabItem::LastFrameVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::LastFrameVisible",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_LastFrameVisible_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (int) ((arg1)->LastFrameVisible);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_LastFrameSelected_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::LastFrameSelected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::LastFrameSelected",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::LastFrameSelected",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_LastFrameSelected_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastFrameSelected = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_LastFrameSelected_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTabItem::LastFrameSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::LastFrameSelected",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_LastFrameSelected_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (int) ((arg1)->LastFrameSelected);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Offset",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::Offset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Offset_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabItem::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Offset",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Offset_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (float) ((arg1)->Offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Width_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::Width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Width",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::Width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Width_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_Width_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabItem::Width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::Width",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_Width_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (float) ((arg1)->Width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_ContentWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::ContentWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::ContentWidth",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::ContentWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_ContentWidth_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ContentWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_ContentWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabItem::ContentWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::ContentWidth",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_ContentWidth_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (float) ((arg1)->ContentWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_NameOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::NameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::NameOffset",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::NameOffset",2,"ImS16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_NameOffset_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (ImS16)lua_tonumber(L, 2);
  if (arg1) (arg1)->NameOffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_NameOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 result;
  
  SWIG_check_num_args("ImGuiTabItem::NameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::NameOffset",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_NameOffset_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImS16) ((arg1)->NameOffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_BeginOrder_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::BeginOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::BeginOrder",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::BeginOrder",2,"ImS16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_BeginOrder_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (ImS16)lua_tonumber(L, 2);
  if (arg1) (arg1)->BeginOrder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_BeginOrder_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 result;
  
  SWIG_check_num_args("ImGuiTabItem::BeginOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::BeginOrder",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_BeginOrder_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImS16) ((arg1)->BeginOrder);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_IndexDuringLayout_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::IndexDuringLayout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::IndexDuringLayout",1,"ImGuiTabItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabItem::IndexDuringLayout",2,"ImS16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_IndexDuringLayout_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (ImS16)lua_tonumber(L, 2);
  if (arg1) (arg1)->IndexDuringLayout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_IndexDuringLayout_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  ImS16 result;
  
  SWIG_check_num_args("ImGuiTabItem::IndexDuringLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::IndexDuringLayout",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_IndexDuringLayout_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (ImS16) ((arg1)->IndexDuringLayout);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_WantClose_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiTabItem::WantClose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::WantClose",1,"ImGuiTabItem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiTabItem::WantClose",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_WantClose_set",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantClose = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabItem_WantClose_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *arg1 = (ImGuiTabItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTabItem::WantClose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabItem::WantClose",1,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabItem_WantClose_get",1,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (bool) ((arg1)->WantClose);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiTabItem(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabItem *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabItem::ImGuiTabItem",0,0)
  result = (ImGuiTabItem *)new ImGuiTabItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiTabItem(void *obj) {
ImGuiTabItem *arg1 = (ImGuiTabItem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTabItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTabItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTabItem_attributes[] = {
    { "ID", _wrap_ImGuiTabItem_ID_get, _wrap_ImGuiTabItem_ID_set },
    { "Flags", _wrap_ImGuiTabItem_Flags_get, _wrap_ImGuiTabItem_Flags_set },
    { "Window", _wrap_ImGuiTabItem_Window_get, _wrap_ImGuiTabItem_Window_set },
    { "LastFrameVisible", _wrap_ImGuiTabItem_LastFrameVisible_get, _wrap_ImGuiTabItem_LastFrameVisible_set },
    { "LastFrameSelected", _wrap_ImGuiTabItem_LastFrameSelected_get, _wrap_ImGuiTabItem_LastFrameSelected_set },
    { "Offset", _wrap_ImGuiTabItem_Offset_get, _wrap_ImGuiTabItem_Offset_set },
    { "Width", _wrap_ImGuiTabItem_Width_get, _wrap_ImGuiTabItem_Width_set },
    { "ContentWidth", _wrap_ImGuiTabItem_ContentWidth_get, _wrap_ImGuiTabItem_ContentWidth_set },
    { "NameOffset", _wrap_ImGuiTabItem_NameOffset_get, _wrap_ImGuiTabItem_NameOffset_set },
    { "BeginOrder", _wrap_ImGuiTabItem_BeginOrder_get, _wrap_ImGuiTabItem_BeginOrder_set },
    { "IndexDuringLayout", _wrap_ImGuiTabItem_IndexDuringLayout_get, _wrap_ImGuiTabItem_IndexDuringLayout_set },
    { "WantClose", _wrap_ImGuiTabItem_WantClose_get, _wrap_ImGuiTabItem_WantClose_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTabItem_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiTabItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTabItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTabItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTabItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTabItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTabItem_Sf_SwigStatic = {
    "ImGuiTabItem",
    swig_ImGuiTabItem_Sf_SwigStatic_methods,
    swig_ImGuiTabItem_Sf_SwigStatic_attributes,
    swig_ImGuiTabItem_Sf_SwigStatic_constants,
    swig_ImGuiTabItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTabItem_bases[] = {0};
static const char *swig_ImGuiTabItem_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTabItem = { "ImGuiTabItem", "ImGuiTabItem", &SWIGTYPE_p_ImGuiTabItem,_proxy__wrap_new_ImGuiTabItem, swig_delete_ImGuiTabItem, swig_ImGuiTabItem_methods, swig_ImGuiTabItem_attributes, &swig_ImGuiTabItem_Sf_SwigStatic, swig_ImGuiTabItem_meta, swig_ImGuiTabItem_bases, swig_ImGuiTabItem_base_names };

static int _wrap_ImGuiTabBar_Tabs_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVector< ImGuiTabItem > *arg2 = (ImVector< ImGuiTabItem > *) 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::Tabs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::Tabs",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::Tabs",2,"ImVector< ImGuiTabItem > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_Tabs_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiTabItem_t,0))){
    SWIG_fail_ptr("ImGuiTabBar_Tabs_set",2,SWIGTYPE_p_ImVectorT_ImGuiTabItem_t);
  }
  
  if (arg1) (arg1)->Tabs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_Tabs_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVector< ImGuiTabItem > *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::Tabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::Tabs",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_Tabs_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImVector< ImGuiTabItem > *)& ((arg1)->Tabs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiTabItem_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_Flags_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabBarFlags arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::Flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::Flags",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::Flags",2,"ImGuiTabBarFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_Flags_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImGuiTabBarFlags)lua_tonumber(L, 2);
  if (arg1) (arg1)->Flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_Flags_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabBarFlags result;
  
  SWIG_check_num_args("ImGuiTabBar::Flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::Flags",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_Flags_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiTabBarFlags) ((arg1)->Flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ID",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ID_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabBar::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ID",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ID_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiID) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_SelectedTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::SelectedTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::SelectedTabId",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::SelectedTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_SelectedTabId_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->SelectedTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_SelectedTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabBar::SelectedTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::SelectedTabId",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_SelectedTabId_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiID) ((arg1)->SelectedTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_NextSelectedTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::NextSelectedTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::NextSelectedTabId",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::NextSelectedTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_NextSelectedTabId_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->NextSelectedTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_NextSelectedTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabBar::NextSelectedTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::NextSelectedTabId",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_NextSelectedTabId_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiID) ((arg1)->NextSelectedTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_VisibleTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::VisibleTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::VisibleTabId",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::VisibleTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_VisibleTabId_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->VisibleTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_VisibleTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabBar::VisibleTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::VisibleTabId",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_VisibleTabId_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiID) ((arg1)->VisibleTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_CurrFrameVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::CurrFrameVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::CurrFrameVisible",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::CurrFrameVisible",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_CurrFrameVisible_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurrFrameVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_CurrFrameVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTabBar::CurrFrameVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::CurrFrameVisible",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_CurrFrameVisible_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (int) ((arg1)->CurrFrameVisible);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_PrevFrameVisible_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::PrevFrameVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::PrevFrameVisible",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::PrevFrameVisible",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_PrevFrameVisible_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->PrevFrameVisible = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_PrevFrameVisible_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTabBar::PrevFrameVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::PrevFrameVisible",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_PrevFrameVisible_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (int) ((arg1)->PrevFrameVisible);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BarRect_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImRect *arg2 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::BarRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BarRect",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::BarRect",2,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BarRect_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ImGuiTabBar_BarRect_set",2,SWIGTYPE_p_ImRect);
  }
  
  if (arg1) (arg1)->BarRect = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BarRect_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImRect *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::BarRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BarRect",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BarRect_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImRect *)& ((arg1)->BarRect);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImRect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_CurrTabsContentsHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::CurrTabsContentsHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::CurrTabsContentsHeight",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::CurrTabsContentsHeight",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_CurrTabsContentsHeight_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurrTabsContentsHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_CurrTabsContentsHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::CurrTabsContentsHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::CurrTabsContentsHeight",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_CurrTabsContentsHeight_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->CurrTabsContentsHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_PrevTabsContentsHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::PrevTabsContentsHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::PrevTabsContentsHeight",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::PrevTabsContentsHeight",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_PrevTabsContentsHeight_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->PrevTabsContentsHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_PrevTabsContentsHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::PrevTabsContentsHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::PrevTabsContentsHeight",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_PrevTabsContentsHeight_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->PrevTabsContentsHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WidthAllTabs_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::WidthAllTabs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabs",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WidthAllTabs_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WidthAllTabs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WidthAllTabs_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::WidthAllTabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabs",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WidthAllTabs_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->WidthAllTabs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WidthAllTabsIdeal_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::WidthAllTabsIdeal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabsIdeal",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabsIdeal",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WidthAllTabsIdeal_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->WidthAllTabsIdeal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WidthAllTabsIdeal_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::WidthAllTabsIdeal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WidthAllTabsIdeal",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WidthAllTabsIdeal_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->WidthAllTabsIdeal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingAnim_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingAnim",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingAnim",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingAnim_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingAnim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingAnim_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingAnim",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingAnim_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingAnim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingTarget",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingTarget",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingTarget_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingTarget = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingTarget",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingTarget_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingTarget);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingTargetDistToVisibility_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingTargetDistToVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingTargetDistToVisibility",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingTargetDistToVisibility",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingTargetDistToVisibility_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingTargetDistToVisibility = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingTargetDistToVisibility_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingTargetDistToVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingTargetDistToVisibility",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingTargetDistToVisibility_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingTargetDistToVisibility);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingSpeed_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingSpeed",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingSpeed_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingSpeed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingSpeed_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingSpeed",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingSpeed_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingSpeed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingRectMinX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingRectMinX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMinX",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMinX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingRectMinX_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingRectMinX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingRectMinX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingRectMinX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMinX",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingRectMinX_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingRectMinX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingRectMaxX_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingRectMaxX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMaxX",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMaxX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingRectMaxX_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ScrollingRectMaxX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ScrollingRectMaxX_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ScrollingRectMaxX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ScrollingRectMaxX",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ScrollingRectMaxX_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ScrollingRectMaxX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ReorderRequestTabId_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ReorderRequestTabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestTabId",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestTabId",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ReorderRequestTabId_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  if (arg1) (arg1)->ReorderRequestTabId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ReorderRequestTabId_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGuiTabBar::ReorderRequestTabId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestTabId",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ReorderRequestTabId_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiID) ((arg1)->ReorderRequestTabId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ReorderRequestDir_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS8 arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ReorderRequestDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestDir",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestDir",2,"ImS8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ReorderRequestDir_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImS8)lua_tonumber(L, 2);
  if (arg1) (arg1)->ReorderRequestDir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ReorderRequestDir_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS8 result;
  
  SWIG_check_num_args("ImGuiTabBar::ReorderRequestDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ReorderRequestDir",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ReorderRequestDir_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImS8) ((arg1)->ReorderRequestDir);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BeginCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS8 arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::BeginCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BeginCount",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::BeginCount",2,"ImS8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BeginCount_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImS8)lua_tonumber(L, 2);
  if (arg1) (arg1)->BeginCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BeginCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS8 result;
  
  SWIG_check_num_args("ImGuiTabBar::BeginCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BeginCount",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BeginCount_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImS8) ((arg1)->BeginCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WantLayout_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::WantLayout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WantLayout",1,"ImGuiTabBar *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiTabBar::WantLayout",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WantLayout_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->WantLayout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_WantLayout_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTabBar::WantLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::WantLayout",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_WantLayout_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (bool) ((arg1)->WantLayout);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_VisibleTabWasSubmitted_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::VisibleTabWasSubmitted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::VisibleTabWasSubmitted",1,"ImGuiTabBar *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiTabBar::VisibleTabWasSubmitted",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_VisibleTabWasSubmitted_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->VisibleTabWasSubmitted = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_VisibleTabWasSubmitted_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTabBar::VisibleTabWasSubmitted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::VisibleTabWasSubmitted",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_VisibleTabWasSubmitted_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (bool) ((arg1)->VisibleTabWasSubmitted);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsAddedNew_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::TabsAddedNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsAddedNew",1,"ImGuiTabBar *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiTabBar::TabsAddedNew",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsAddedNew_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->TabsAddedNew = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsAddedNew_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGuiTabBar::TabsAddedNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsAddedNew",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsAddedNew_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (bool) ((arg1)->TabsAddedNew);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsActiveCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS16 arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::TabsActiveCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsActiveCount",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::TabsActiveCount",2,"ImS16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsActiveCount_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImS16)lua_tonumber(L, 2);
  if (arg1) (arg1)->TabsActiveCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsActiveCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS16 result;
  
  SWIG_check_num_args("ImGuiTabBar::TabsActiveCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsActiveCount",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsActiveCount_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImS16) ((arg1)->TabsActiveCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_LastTabItemIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS16 arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::LastTabItemIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::LastTabItemIdx",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::LastTabItemIdx",2,"ImS16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_LastTabItemIdx_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImS16)lua_tonumber(L, 2);
  if (arg1) (arg1)->LastTabItemIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_LastTabItemIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImS16 result;
  
  SWIG_check_num_args("ImGuiTabBar::LastTabItemIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::LastTabItemIdx",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_LastTabItemIdx_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImS16) ((arg1)->LastTabItemIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ItemSpacingY_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGuiTabBar::ItemSpacingY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ItemSpacingY",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTabBar::ItemSpacingY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ItemSpacingY_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ItemSpacingY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_ItemSpacingY_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  float result;
  
  SWIG_check_num_args("ImGuiTabBar::ItemSpacingY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::ItemSpacingY",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_ItemSpacingY_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (float) ((arg1)->ItemSpacingY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_FramePadding_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::FramePadding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::FramePadding",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::FramePadding",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_FramePadding_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiTabBar_FramePadding_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->FramePadding = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_FramePadding_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::FramePadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::FramePadding",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_FramePadding_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImVec2 *)& ((arg1)->FramePadding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BackupCursorPos_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::BackupCursorPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BackupCursorPos",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::BackupCursorPos",2,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BackupCursorPos_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImGuiTabBar_BackupCursorPos_set",2,SWIGTYPE_p_ImVec2);
  }
  
  if (arg1) (arg1)->BackupCursorPos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_BackupCursorPos_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImVec2 *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::BackupCursorPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::BackupCursorPos",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_BackupCursorPos_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImVec2 *)& ((arg1)->BackupCursorPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsNames_set(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTextBuffer *arg2 = (ImGuiTextBuffer *) 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::TabsNames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsNames",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::TabsNames",2,"ImGuiTextBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsNames_set",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTextBuffer,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsNames_set",2,SWIGTYPE_p_ImGuiTextBuffer);
  }
  
  if (arg1) (arg1)->TabsNames = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_TabsNames_get(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTextBuffer *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::TabsNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::TabsNames",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_TabsNames_get",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiTextBuffer *)& ((arg1)->TabsNames);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImGuiTabBar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::ImGuiTabBar",0,0)
  result = (ImGuiTabBar *)new ImGuiTabBar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_GetTabOrder(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGuiTabBar::GetTabOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::GetTabOrder",1,"ImGuiTabBar const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::GetTabOrder",2,"ImGuiTabItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_GetTabOrder",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabBar_GetTabOrder",2,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (int)((ImGuiTabBar const *)arg1)->GetTabOrder((ImGuiTabItem const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImGuiTabBar_GetTabName(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGuiTabBar::GetTabName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTabBar::GetTabName",1,"ImGuiTabBar const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTabBar::GetTabName",2,"ImGuiTabItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("ImGuiTabBar_GetTabName",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("ImGuiTabBar_GetTabName",2,SWIGTYPE_p_ImGuiTabItem);
  }
  
  result = (char *)((ImGuiTabBar const *)arg1)->GetTabName((ImGuiTabItem const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImGuiTabBar(void *obj) {
ImGuiTabBar *arg1 = (ImGuiTabBar *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTabBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTabBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTabBar_attributes[] = {
    { "Tabs", _wrap_ImGuiTabBar_Tabs_get, _wrap_ImGuiTabBar_Tabs_set },
    { "Flags", _wrap_ImGuiTabBar_Flags_get, _wrap_ImGuiTabBar_Flags_set },
    { "ID", _wrap_ImGuiTabBar_ID_get, _wrap_ImGuiTabBar_ID_set },
    { "SelectedTabId", _wrap_ImGuiTabBar_SelectedTabId_get, _wrap_ImGuiTabBar_SelectedTabId_set },
    { "NextSelectedTabId", _wrap_ImGuiTabBar_NextSelectedTabId_get, _wrap_ImGuiTabBar_NextSelectedTabId_set },
    { "VisibleTabId", _wrap_ImGuiTabBar_VisibleTabId_get, _wrap_ImGuiTabBar_VisibleTabId_set },
    { "CurrFrameVisible", _wrap_ImGuiTabBar_CurrFrameVisible_get, _wrap_ImGuiTabBar_CurrFrameVisible_set },
    { "PrevFrameVisible", _wrap_ImGuiTabBar_PrevFrameVisible_get, _wrap_ImGuiTabBar_PrevFrameVisible_set },
    { "BarRect", _wrap_ImGuiTabBar_BarRect_get, _wrap_ImGuiTabBar_BarRect_set },
    { "CurrTabsContentsHeight", _wrap_ImGuiTabBar_CurrTabsContentsHeight_get, _wrap_ImGuiTabBar_CurrTabsContentsHeight_set },
    { "PrevTabsContentsHeight", _wrap_ImGuiTabBar_PrevTabsContentsHeight_get, _wrap_ImGuiTabBar_PrevTabsContentsHeight_set },
    { "WidthAllTabs", _wrap_ImGuiTabBar_WidthAllTabs_get, _wrap_ImGuiTabBar_WidthAllTabs_set },
    { "WidthAllTabsIdeal", _wrap_ImGuiTabBar_WidthAllTabsIdeal_get, _wrap_ImGuiTabBar_WidthAllTabsIdeal_set },
    { "ScrollingAnim", _wrap_ImGuiTabBar_ScrollingAnim_get, _wrap_ImGuiTabBar_ScrollingAnim_set },
    { "ScrollingTarget", _wrap_ImGuiTabBar_ScrollingTarget_get, _wrap_ImGuiTabBar_ScrollingTarget_set },
    { "ScrollingTargetDistToVisibility", _wrap_ImGuiTabBar_ScrollingTargetDistToVisibility_get, _wrap_ImGuiTabBar_ScrollingTargetDistToVisibility_set },
    { "ScrollingSpeed", _wrap_ImGuiTabBar_ScrollingSpeed_get, _wrap_ImGuiTabBar_ScrollingSpeed_set },
    { "ScrollingRectMinX", _wrap_ImGuiTabBar_ScrollingRectMinX_get, _wrap_ImGuiTabBar_ScrollingRectMinX_set },
    { "ScrollingRectMaxX", _wrap_ImGuiTabBar_ScrollingRectMaxX_get, _wrap_ImGuiTabBar_ScrollingRectMaxX_set },
    { "ReorderRequestTabId", _wrap_ImGuiTabBar_ReorderRequestTabId_get, _wrap_ImGuiTabBar_ReorderRequestTabId_set },
    { "ReorderRequestDir", _wrap_ImGuiTabBar_ReorderRequestDir_get, _wrap_ImGuiTabBar_ReorderRequestDir_set },
    { "BeginCount", _wrap_ImGuiTabBar_BeginCount_get, _wrap_ImGuiTabBar_BeginCount_set },
    { "WantLayout", _wrap_ImGuiTabBar_WantLayout_get, _wrap_ImGuiTabBar_WantLayout_set },
    { "VisibleTabWasSubmitted", _wrap_ImGuiTabBar_VisibleTabWasSubmitted_get, _wrap_ImGuiTabBar_VisibleTabWasSubmitted_set },
    { "TabsAddedNew", _wrap_ImGuiTabBar_TabsAddedNew_get, _wrap_ImGuiTabBar_TabsAddedNew_set },
    { "TabsActiveCount", _wrap_ImGuiTabBar_TabsActiveCount_get, _wrap_ImGuiTabBar_TabsActiveCount_set },
    { "LastTabItemIdx", _wrap_ImGuiTabBar_LastTabItemIdx_get, _wrap_ImGuiTabBar_LastTabItemIdx_set },
    { "ItemSpacingY", _wrap_ImGuiTabBar_ItemSpacingY_get, _wrap_ImGuiTabBar_ItemSpacingY_set },
    { "FramePadding", _wrap_ImGuiTabBar_FramePadding_get, _wrap_ImGuiTabBar_FramePadding_set },
    { "BackupCursorPos", _wrap_ImGuiTabBar_BackupCursorPos_get, _wrap_ImGuiTabBar_BackupCursorPos_set },
    { "TabsNames", _wrap_ImGuiTabBar_TabsNames_get, _wrap_ImGuiTabBar_TabsNames_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTabBar_methods[]= {
    { "GetTabOrder", _wrap_ImGuiTabBar_GetTabOrder},
    { "GetTabName", _wrap_ImGuiTabBar_GetTabName},
    {0,0}
};
static swig_lua_method swig_ImGuiTabBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTabBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTabBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTabBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTabBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTabBar_Sf_SwigStatic = {
    "ImGuiTabBar",
    swig_ImGuiTabBar_Sf_SwigStatic_methods,
    swig_ImGuiTabBar_Sf_SwigStatic_attributes,
    swig_ImGuiTabBar_Sf_SwigStatic_constants,
    swig_ImGuiTabBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTabBar_bases[] = {0};
static const char *swig_ImGuiTabBar_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTabBar = { "ImGuiTabBar", "ImGuiTabBar", &SWIGTYPE_p_ImGuiTabBar,_proxy__wrap_new_ImGuiTabBar, swig_delete_ImGuiTabBar, swig_ImGuiTabBar_methods, swig_ImGuiTabBar_attributes, &swig_ImGuiTabBar_Sf_SwigStatic, swig_ImGuiTabBar_meta, swig_ImGuiTabBar_bases, swig_ImGuiTabBar_base_names };

static int _wrap_GetCurrentWindowRead(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetCurrentWindowRead",0,0)
  result = (ImGuiWindow *)ImGui::GetCurrentWindowRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCurrentWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetCurrentWindow",0,0)
  result = (ImGuiWindow *)ImGui::GetCurrentWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindWindowByID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindWindowByID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::FindWindowByID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiWindow *)ImGui::FindWindowByID(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindWindowByName(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindWindowByName",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::FindWindowByName",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiWindow *)ImGui::FindWindowByName((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateWindowParentAndRootLinks(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags arg2 ;
  ImGuiWindow *arg3 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::UpdateWindowParentAndRootLinks",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::UpdateWindowParentAndRootLinks",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::UpdateWindowParentAndRootLinks",2,"ImGuiWindowFlags");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::UpdateWindowParentAndRootLinks",3,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("UpdateWindowParentAndRootLinks",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("UpdateWindowParentAndRootLinks",3,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::UpdateWindowParentAndRootLinks(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcWindowExpectedSize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcWindowExpectedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::CalcWindowExpectedSize",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("CalcWindowExpectedSize",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ImGui::CalcWindowExpectedSize(arg1);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowChildOf(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowChildOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::IsWindowChildOf",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::IsWindowChildOf",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("IsWindowChildOf",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("IsWindowChildOf",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool)ImGui::IsWindowChildOf(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsWindowNavFocusable(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsWindowNavFocusable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::IsWindowNavFocusable",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("IsWindowNavFocusable",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool)ImGui::IsWindowNavFocusable(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowAllowedExtentRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect result;
  
  SWIG_check_num_args("ImGui::GetWindowAllowedExtentRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetWindowAllowedExtentRect",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetWindowAllowedExtentRect",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ImGui::GetWindowAllowedExtentRect(arg1);
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowPos",3,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowPos",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowPos(arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowPos",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowPos",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowPos(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowPos(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SetWindowPos__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetWindowPos__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetWindowPos__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetWindowPos__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowPos__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowPos__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowPos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetWindowPos(ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowPos(ImVec2 const &)\n"
    "    ImGui::SetWindowPos(char const *,ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowPos(char const *,ImVec2 const &)\n"
    "    ImGui::SetWindowPos(ImGuiWindow *,ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowPos(ImGuiWindow *,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetWindowSize__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowSize",3,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowSize",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowSize(arg1,(ImVec2 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowSize",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowSize",2,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowSize(arg1,(ImVec2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowSize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SetWindowSize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetWindowSize__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetWindowSize__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SetWindowSize__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowSize__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowSize__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetWindowSize(ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowSize(ImVec2 const &)\n"
    "    ImGui::SetWindowSize(char const *,ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowSize(char const *,ImVec2 const &)\n"
    "    ImGui::SetWindowSize(ImGuiWindow *,ImVec2 const &,ImGuiCond)\n"
    "    ImGui::SetWindowSize(ImGuiWindow *,ImVec2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SetWindowCollapsed__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowCollapsed",3,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowCollapsed",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowCollapsed(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::SetWindowCollapsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowCollapsed",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::SetWindowCollapsed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowCollapsed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetWindowCollapsed__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetWindowCollapsed__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetWindowCollapsed__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetWindowCollapsed__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowCollapsed__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetWindowCollapsed__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowCollapsed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetWindowCollapsed(bool,ImGuiCond)\n"
    "    ImGui::SetWindowCollapsed(bool)\n"
    "    ImGui::SetWindowCollapsed(char const *,bool,ImGuiCond)\n"
    "    ImGui::SetWindowCollapsed(char const *,bool)\n"
    "    ImGui::SetWindowCollapsed(ImGuiWindow *,bool,ImGuiCond)\n"
    "    ImGui::SetWindowCollapsed(ImGuiWindow *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_SetWindowHitTestHole(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowHitTestHole",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowHitTestHole",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowHitTestHole",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::SetWindowHitTestHole",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowHitTestHole",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowHitTestHole",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetWindowHitTestHole",3,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetWindowHitTestHole(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FocusWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::FocusWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FocusWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FocusWindow",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::FocusWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FocusTopMostWindowUnderOne(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::FocusTopMostWindowUnderOne",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FocusTopMostWindowUnderOne",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::FocusTopMostWindowUnderOne",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FocusTopMostWindowUnderOne",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FocusTopMostWindowUnderOne",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::FocusTopMostWindowUnderOne(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BringWindowToFocusFront(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::BringWindowToFocusFront",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BringWindowToFocusFront",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BringWindowToFocusFront",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::BringWindowToFocusFront(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BringWindowToDisplayFront(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::BringWindowToDisplayFront",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BringWindowToDisplayFront",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BringWindowToDisplayFront",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::BringWindowToDisplayFront(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BringWindowToDisplayBack(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::BringWindowToDisplayBack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BringWindowToDisplayBack",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BringWindowToDisplayBack",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::BringWindowToDisplayBack(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCurrentFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *arg1 = (ImFont *) 0 ;
  
  SWIG_check_num_args("ImGui::SetCurrentFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetCurrentFont",1,"ImFont *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("SetCurrentFont",1,SWIGTYPE_p_ImFont);
  }
  
  ImGui::SetCurrentFont(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDefaultFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFont *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetDefaultFont",0,0)
  result = (ImFont *)ImGui::GetDefaultFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetForegroundDrawList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetForegroundDrawList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetForegroundDrawList",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetForegroundDrawList",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (ImDrawList *)ImGui::GetForegroundDrawList(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetForegroundDrawList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetForegroundDrawList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiViewport, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GetForegroundDrawList__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GetForegroundDrawList__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetForegroundDrawList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetForegroundDrawList()\n"
    "    ImGui::GetForegroundDrawList(ImGuiViewport *)\n"
    "    ImGui::GetForegroundDrawList(ImGuiWindow *)\n");
  lua_error(L);return 0;
}


static int _wrap_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Initialize",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("Initialize",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::Initialize(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shutdown(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::Shutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::Shutdown",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("Shutdown",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::Shutdown(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateHoveredWindowAndCaptureFlags(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::UpdateHoveredWindowAndCaptureFlags",0,0)
  ImGui::UpdateHoveredWindowAndCaptureFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartMouseMovingWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::StartMouseMovingWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StartMouseMovingWindow",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("StartMouseMovingWindow",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::StartMouseMovingWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartMouseMovingWindowOrNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImGui::StartMouseMovingWindowOrNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StartMouseMovingWindowOrNode",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::StartMouseMovingWindowOrNode",2,"ImGuiDockNode *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::StartMouseMovingWindowOrNode",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("StartMouseMovingWindowOrNode",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("StartMouseMovingWindowOrNode",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  ImGui::StartMouseMovingWindowOrNode(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateMouseMovingWindowNewFrame(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::UpdateMouseMovingWindowNewFrame",0,0)
  ImGui::UpdateMouseMovingWindowNewFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateMouseMovingWindowEndFrame(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::UpdateMouseMovingWindowEndFrame",0,0)
  ImGui::UpdateMouseMovingWindowEndFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AddContextHook(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiContextHook *arg2 = (ImGuiContextHook *) 0 ;
  
  SWIG_check_num_args("ImGui::AddContextHook",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::AddContextHook",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::AddContextHook",2,"ImGuiContextHook const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("AddContextHook",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContextHook,0))){
    SWIG_fail_ptr("AddContextHook",2,SWIGTYPE_p_ImGuiContextHook);
  }
  
  ImGui::AddContextHook(arg1,(ImGuiContextHook const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallContextHooks(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiContextHookType arg2 ;
  
  SWIG_check_num_args("ImGui::CallContextHooks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::CallContextHooks",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CallContextHooks",2,"ImGuiContextHookType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("CallContextHooks",1,SWIGTYPE_p_ImGuiContext);
  }
  
  arg2 = (ImGuiContextHookType)(int)lua_tonumber(L, 2);
  ImGui::CallContextHooks(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TranslateWindowsInViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ImGui::TranslateWindowsInViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TranslateWindowsInViewport",1,"ImGuiViewportP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TranslateWindowsInViewport",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TranslateWindowsInViewport",3,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("TranslateWindowsInViewport",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("TranslateWindowsInViewport",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("TranslateWindowsInViewport",3,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::TranslateWindowsInViewport(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaleWindowsInViewport(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::ScaleWindowsInViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ScaleWindowsInViewport",1,"ImGuiViewportP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ScaleWindowsInViewport",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("ScaleWindowsInViewport",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::ScaleWindowsInViewport(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DestroyPlatformWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiViewportP *arg1 = (ImGuiViewportP *) 0 ;
  
  SWIG_check_num_args("ImGui::DestroyPlatformWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DestroyPlatformWindow",1,"ImGuiViewportP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewportP,0))){
    SWIG_fail_ptr("DestroyPlatformWindow",1,SWIGTYPE_p_ImGuiViewportP);
  }
  
  ImGui::DestroyPlatformWindow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShowViewportThumbnails(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ShowViewportThumbnails",0,0)
  ImGui::ShowViewportThumbnails();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MarkIniSettingsDirty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::MarkIniSettingsDirty",0,0)
  ImGui::MarkIniSettingsDirty();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MarkIniSettingsDirty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::MarkIniSettingsDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::MarkIniSettingsDirty",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("MarkIniSettingsDirty",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::MarkIniSettingsDirty(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MarkIniSettingsDirty(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_MarkIniSettingsDirty__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MarkIniSettingsDirty__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MarkIniSettingsDirty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::MarkIniSettingsDirty()\n"
    "    ImGui::MarkIniSettingsDirty(ImGuiWindow *)\n");
  lua_error(L);return 0;
}


static int _wrap_ClearIniSettings(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ClearIniSettings",0,0)
  ImGui::ClearIniSettings();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateNewWindowSettings(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiWindowSettings *result = 0 ;
  
  SWIG_check_num_args("ImGui::CreateNewWindowSettings",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CreateNewWindowSettings",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiWindowSettings *)ImGui::CreateNewWindowSettings((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowSettings,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindWindowSettings(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiWindowSettings *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindWindowSettings",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::FindWindowSettings",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiWindowSettings *)ImGui::FindWindowSettings(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowSettings,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindOrCreateWindowSettings(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiWindowSettings *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindOrCreateWindowSettings",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::FindOrCreateWindowSettings",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiWindowSettings *)ImGui::FindOrCreateWindowSettings((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowSettings,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindSettingsHandler(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiSettingsHandler *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindSettingsHandler",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::FindSettingsHandler",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ImGuiSettingsHandler *)ImGui::FindSettingsHandler((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSettingsHandler,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNextWindowScroll(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNextWindowScroll",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowScroll",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("SetNextWindowScroll",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::SetNextWindowScroll((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetScrollX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetScrollX",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetScrollX",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetScrollX(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollX(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollX__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetScrollX__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollX(float)\n"
    "    ImGui::SetScrollX(ImGuiWindow *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SetScrollY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::SetScrollY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetScrollY",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetScrollY",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::SetScrollY(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollY(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollY__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetScrollY__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollY(float)\n"
    "    ImGui::SetScrollY(ImGuiWindow *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SetScrollFromPosX__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosX",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosX",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetScrollFromPosX",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetScrollFromPosX",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ImGui::SetScrollFromPosX(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollFromPosX(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollFromPosX__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetScrollFromPosX__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetScrollFromPosX__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollFromPosX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollFromPosX(float,float)\n"
    "    ImGui::SetScrollFromPosX(float)\n"
    "    ImGui::SetScrollFromPosX(ImGuiWindow *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SetScrollFromPosY__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ImGui::SetScrollFromPosY",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosY",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosY",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetScrollFromPosY",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetScrollFromPosY",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ImGui::SetScrollFromPosY(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetScrollFromPosY(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SetScrollFromPosY__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SetScrollFromPosY__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SetScrollFromPosY__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetScrollFromPosY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SetScrollFromPosY(float,float)\n"
    "    ImGui::SetScrollFromPosY(float)\n"
    "    ImGui::SetScrollFromPosY(ImGuiWindow *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollToBringRectIntoView(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::ScrollToBringRectIntoView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ScrollToBringRectIntoView",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ScrollToBringRectIntoView",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ScrollToBringRectIntoView",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ScrollToBringRectIntoView",2,SWIGTYPE_p_ImRect);
  }
  
  result = ImGui::ScrollToBringRectIntoView(arg1,(ImRect const &)*arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetItemID",0,0)
  result = (ImGuiID)ImGui::GetItemID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemStatusFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiItemStatusFlags result;
  
  SWIG_check_num_args("ImGui::GetItemStatusFlags",0,0)
  result = (ImGuiItemStatusFlags)ImGui::GetItemStatusFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetActiveID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetActiveID",0,0)
  result = (ImGuiID)ImGui::GetActiveID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFocusID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetFocusID",0,0)
  result = (ImGuiID)ImGui::GetFocusID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetActiveID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::SetActiveID",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetActiveID",1,"ImGuiID");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetActiveID",2,"ImGuiWindow *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetActiveID",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::SetActiveID(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetFocusID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::SetFocusID",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetFocusID",1,"ImGuiID");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetFocusID",2,"ImGuiWindow *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetFocusID",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::SetFocusID(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClearActiveID(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ClearActiveID",0,0)
  ImGui::ClearActiveID();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetHoveredID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetHoveredID",0,0)
  result = (ImGuiID)ImGui::GetHoveredID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetHoveredID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::SetHoveredID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetHoveredID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::SetHoveredID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeepAliveID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::KeepAliveID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::KeepAliveID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::KeepAliveID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MarkItemEdited(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::MarkItemEdited",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::MarkItemEdited",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::MarkItemEdited(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushOverrideID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::PushOverrideID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushOverrideID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::PushOverrideID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetIDWithSeed(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID arg3 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetIDWithSeed",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetIDWithSeed",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::GetIDWithSeed",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::GetIDWithSeed",3,"ImGuiID");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImGuiID)lua_tonumber(L, 3);
  result = (ImGuiID)ImGui::GetIDWithSeed((char const *)arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::ItemSize",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemSize",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ItemSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ItemSize",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::ItemSize((ImVec2 const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::ItemSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemSize",1,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ItemSize",1,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::ItemSize((ImVec2 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::ItemSize",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemSize",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ItemSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemSize",1,SWIGTYPE_p_ImRect);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::ItemSize((ImRect const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemSize__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  
  SWIG_check_num_args("ImGui::ItemSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemSize",1,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemSize",1,SWIGTYPE_p_ImRect);
  }
  
  ImGui::ItemSize((ImRect const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemSize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ItemSize__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ItemSize__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ItemSize__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ItemSize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ItemSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ItemSize(ImVec2 const &,float)\n"
    "    ImGui::ItemSize(ImVec2 const &)\n"
    "    ImGui::ItemSize(ImRect const &,float)\n"
    "    ImGui::ItemSize(ImRect const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ItemAdd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImRect *arg3 = (ImRect *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ItemAdd",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemAdd",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ItemAdd",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ItemAdd",3,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemAdd",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemAdd",3,SWIGTYPE_p_ImRect);
  }
  
  result = (bool)ImGui::ItemAdd((ImRect const &)*arg1,arg2,(ImRect const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemAdd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ItemAdd",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemAdd",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ItemAdd",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemAdd",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool)ImGui::ItemAdd((ImRect const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemAdd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ItemAdd__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ItemAdd__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ItemAdd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ItemAdd(ImRect const &,ImGuiID,ImRect const *)\n"
    "    ImGui::ItemAdd(ImRect const &,ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ItemHoverable(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ItemHoverable",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ItemHoverable",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ItemHoverable",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ItemHoverable",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool)ImGui::ItemHoverable((ImRect const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsClippedEx(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsClippedEx",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsClippedEx",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsClippedEx",2,"ImGuiID");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::IsClippedEx",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("IsClippedEx",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ImGui::IsClippedEx((ImRect const &)*arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetLastItemData(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  ImGuiItemStatusFlags arg3 ;
  ImRect *arg4 = 0 ;
  
  SWIG_check_num_args("ImGui::SetLastItemData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetLastItemData",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetLastItemData",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetLastItemData",3,"ImGuiItemStatusFlags");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::SetLastItemData",4,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetLastItemData",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiItemStatusFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SetLastItemData",4,SWIGTYPE_p_ImRect);
  }
  
  ImGui::SetLastItemData(arg1,arg2,arg3,(ImRect const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FocusableItemRegister(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::FocusableItemRegister",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FocusableItemRegister",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::FocusableItemRegister",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FocusableItemRegister",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool)ImGui::FocusableItemRegister(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FocusableItemUnregister(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::FocusableItemUnregister",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FocusableItemUnregister",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FocusableItemUnregister",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::FocusableItemUnregister(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcItemSize(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  float arg2 ;
  float arg3 ;
  ImVec2 *argp1 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::CalcItemSize",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::CalcItemSize",1,"ImVec2");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CalcItemSize",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CalcItemSize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("CalcItemSize",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = ImGui::CalcItemSize(arg1,arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalcWrapWidthForPos(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImGui::CalcWrapWidthForPos",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::CalcWrapWidthForPos",1,"ImVec2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CalcWrapWidthForPos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("CalcWrapWidthForPos",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)ImGui::CalcWrapWidthForPos((ImVec2 const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushMultiItemsWidths(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImGui::PushMultiItemsWidths",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushMultiItemsWidths",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushMultiItemsWidths",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  ImGui::PushMultiItemsWidths(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushItemFlag(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiItemFlags arg1 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::PushItemFlag",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushItemFlag",1,"ImGuiItemFlags");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::PushItemFlag",2,"bool");
  arg1 = (ImGuiItemFlags)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::PushItemFlag(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopItemFlag(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopItemFlag",0,0)
  ImGui::PopItemFlag();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsItemToggledSelection(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsItemToggledSelection",0,0)
  result = (bool)ImGui::IsItemToggledSelection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetContentRegionMaxAbs(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetContentRegionMaxAbs",0,0)
  result = ImGui::GetContentRegionMaxAbs();
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShrinkWidths(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ImGui::ShrinkWidths",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShrinkWidths",1,"ImGuiShrinkWidthItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ShrinkWidths",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ShrinkWidths",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiShrinkWidthItem,0))){
    SWIG_fail_ptr("ShrinkWidths",1,SWIGTYPE_p_ImGuiShrinkWidthItem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ImGui::ShrinkWidths(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogBegin(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiLogType arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGui::LogBegin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogBegin",1,"ImGuiLogType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::LogBegin",2,"int");
  arg1 = (ImGuiLogType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  ImGui::LogBegin(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::LogToBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToBuffer",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::LogToBuffer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::LogToBuffer",0,0)
  ImGui::LogToBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogToBuffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_LogToBuffer__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_LogToBuffer__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LogToBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LogToBuffer(int)\n"
    "    ImGui::LogToBuffer()\n");
  lua_error(L);return 0;
}


static int _wrap_BeginChildEx(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiID arg2 ;
  ImVec2 *arg3 = 0 ;
  bool arg4 ;
  ImGuiWindowFlags arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginChildEx",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChildEx",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginChildEx",2,"ImGuiID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::BeginChildEx",3,"ImVec2 const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::BeginChildEx",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::BeginChildEx",5,"ImGuiWindowFlags");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("BeginChildEx",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (ImGuiWindowFlags)lua_tonumber(L, 5);
  result = (bool)ImGui::BeginChildEx((char const *)arg1,arg2,(ImVec2 const &)*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiPopupFlags arg2 ;
  
  SWIG_check_num_args("ImGui::OpenPopupEx",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::OpenPopupEx",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopupEx",2,"ImGuiPopupFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  ImGui::OpenPopupEx(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::OpenPopupEx",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::OpenPopupEx",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::OpenPopupEx(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenPopupEx(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_OpenPopupEx__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OpenPopupEx__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OpenPopupEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::OpenPopupEx(ImGuiID,ImGuiPopupFlags)\n"
    "    ImGui::OpenPopupEx(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_ClosePopupToLevel(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::ClosePopupToLevel",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ClosePopupToLevel",1,"int");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::ClosePopupToLevel",2,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::ClosePopupToLevel(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClosePopupsOverWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::ClosePopupsOverWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ClosePopupsOverWindow",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::ClosePopupsOverWindow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("ClosePopupsOverWindow",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::ClosePopupsOverWindow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsPopupOpen__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsPopupOpen",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsPopupOpen",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsPopupOpen",2,"ImGuiPopupFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::IsPopupOpen(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsPopupOpen(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsPopupOpen__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsPopupOpen__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsPopupOpen__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsPopupOpen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsPopupOpen(char const *,ImGuiPopupFlags)\n"
    "    ImGui::IsPopupOpen(char const *)\n"
    "    ImGui::IsPopupOpen(ImGuiID,ImGuiPopupFlags)\n");
  lua_error(L);return 0;
}


static int _wrap_BeginPopupEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginPopupEx",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginPopupEx",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupEx",2,"ImGuiWindowFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginPopupEx(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTooltipEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindowFlags arg1 ;
  ImGuiTooltipFlags arg2 ;
  
  SWIG_check_num_args("ImGui::BeginTooltipEx",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginTooltipEx",1,"ImGuiWindowFlags");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginTooltipEx",2,"ImGuiTooltipFlags");
  arg1 = (ImGuiWindowFlags)lua_tonumber(L, 1);
  arg2 = (ImGuiTooltipFlags)lua_tonumber(L, 2);
  ImGui::BeginTooltipEx(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTopMostPopupModal(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetTopMostPopupModal",0,0)
  result = (ImGuiWindow *)ImGui::GetTopMostPopupModal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindBestWindowPosForPopup(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::FindBestWindowPosForPopup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopup",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopup",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = ImGui::FindBestWindowPosForPopup(arg1);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindBestWindowPosForPopupEx(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDir *arg3 = (ImGuiDir *) 0 ;
  ImRect *arg4 = 0 ;
  ImRect *arg5 = 0 ;
  ImGuiPopupPositionPolicy arg6 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::FindBestWindowPosForPopupEx",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",3,"ImGuiDir *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",4,"ImRect const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",5,"ImRect const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::FindBestWindowPosForPopupEx",6,"ImGuiPopupPositionPolicy");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopupEx",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopupEx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopupEx",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopupEx",4,SWIGTYPE_p_ImRect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("FindBestWindowPosForPopupEx",5,SWIGTYPE_p_ImRect);
  }
  
  arg6 = (ImGuiPopupPositionPolicy)(int)lua_tonumber(L, 6);
  result = ImGui::FindBestWindowPosForPopupEx((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,(ImRect const &)*arg4,(ImRect const &)*arg5,arg6);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NavInitWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::NavInitWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::NavInitWindow",1,"ImGuiWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::NavInitWindow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("NavInitWindow",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::NavInitWindow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NavMoveRequestButNoResultYet(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::NavMoveRequestButNoResultYet",0,0)
  result = (bool)ImGui::NavMoveRequestButNoResultYet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NavMoveRequestCancel(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::NavMoveRequestCancel",0,0)
  ImGui::NavMoveRequestCancel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NavMoveRequestForward(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDir arg1 ;
  ImGuiDir arg2 ;
  ImRect *arg3 = 0 ;
  ImGuiNavMoveFlags arg4 ;
  
  SWIG_check_num_args("ImGui::NavMoveRequestForward",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::NavMoveRequestForward",1,"ImGuiDir");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::NavMoveRequestForward",2,"ImGuiDir");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::NavMoveRequestForward",3,"ImRect const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::NavMoveRequestForward",4,"ImGuiNavMoveFlags");
  arg1 = (ImGuiDir)lua_tonumber(L, 1);
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("NavMoveRequestForward",3,SWIGTYPE_p_ImRect);
  }
  
  arg4 = (ImGuiNavMoveFlags)lua_tonumber(L, 4);
  ImGui::NavMoveRequestForward(arg1,arg2,(ImRect const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NavMoveRequestTryWrapping(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiNavMoveFlags arg2 ;
  
  SWIG_check_num_args("ImGui::NavMoveRequestTryWrapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::NavMoveRequestTryWrapping",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::NavMoveRequestTryWrapping",2,"ImGuiNavMoveFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("NavMoveRequestTryWrapping",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiNavMoveFlags)lua_tonumber(L, 2);
  ImGui::NavMoveRequestTryWrapping(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNavInputAmount(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavInput arg1 ;
  ImGuiInputReadMode arg2 ;
  float result;
  
  SWIG_check_num_args("ImGui::GetNavInputAmount",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetNavInputAmount",1,"ImGuiNavInput");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetNavInputAmount",2,"ImGuiInputReadMode");
  arg1 = (ImGuiNavInput)lua_tonumber(L, 1);
  arg2 = (ImGuiInputReadMode)(int)lua_tonumber(L, 2);
  result = (float)ImGui::GetNavInputAmount(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNavInputAmount2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetNavInputAmount2d",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",1,"ImGuiNavDirSourceFlags");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",2,"ImGuiInputReadMode");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",4,"float");
  arg1 = (ImGuiNavDirSourceFlags)lua_tonumber(L, 1);
  arg2 = (ImGuiInputReadMode)(int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = ImGui::GetNavInputAmount2d(arg1,arg2,arg3,arg4);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNavInputAmount2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  float arg3 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetNavInputAmount2d",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",1,"ImGuiNavDirSourceFlags");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",2,"ImGuiInputReadMode");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",3,"float");
  arg1 = (ImGuiNavDirSourceFlags)lua_tonumber(L, 1);
  arg2 = (ImGuiInputReadMode)(int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = ImGui::GetNavInputAmount2d(arg1,arg2,arg3);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNavInputAmount2d__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::GetNavInputAmount2d",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",1,"ImGuiNavDirSourceFlags");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetNavInputAmount2d",2,"ImGuiInputReadMode");
  arg1 = (ImGuiNavDirSourceFlags)lua_tonumber(L, 1);
  arg2 = (ImGuiInputReadMode)(int)lua_tonumber(L, 2);
  result = ImGui::GetNavInputAmount2d(arg1,arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNavInputAmount2d(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GetNavInputAmount2d__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GetNavInputAmount2d__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GetNavInputAmount2d__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetNavInputAmount2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags,ImGuiInputReadMode,float,float)\n"
    "    ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags,ImGuiInputReadMode,float)\n"
    "    ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags,ImGuiInputReadMode)\n");
  lua_error(L);return 0;
}


static int _wrap_CalcTypematicRepeatAmount(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("ImGui::CalcTypematicRepeatAmount",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::CalcTypematicRepeatAmount",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CalcTypematicRepeatAmount",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CalcTypematicRepeatAmount",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::CalcTypematicRepeatAmount",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)ImGui::CalcTypematicRepeatAmount(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivateItem(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::ActivateItem",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ActivateItem",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::ActivateItem(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNavID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiID arg3 ;
  
  SWIG_check_num_args("ImGui::SetNavID",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNavID",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNavID",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetNavID",3,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImGuiID)lua_tonumber(L, 3);
  ImGui::SetNavID(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetNavIDWithRectRel(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiID arg3 ;
  ImRect *arg4 = 0 ;
  
  SWIG_check_num_args("ImGui::SetNavIDWithRectRel",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNavIDWithRectRel",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNavIDWithRectRel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetNavIDWithRectRel",3,"ImGuiID");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::SetNavIDWithRectRel",4,"ImRect const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImGuiID)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SetNavIDWithRectRel",4,SWIGTYPE_p_ImRect);
  }
  
  ImGui::SetNavIDWithRectRel(arg1,arg2,arg3,(ImRect const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushFocusScope(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::PushFocusScope",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushFocusScope",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::PushFocusScope(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopFocusScope(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopFocusScope",0,0)
  ImGui::PopFocusScope();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetFocusScopeID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetFocusScopeID",0,0)
  result = (ImGuiID)ImGui::GetFocusScopeID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsActiveIdUsingNavDir(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDir arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsActiveIdUsingNavDir",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsActiveIdUsingNavDir",1,"ImGuiDir");
  arg1 = (ImGuiDir)lua_tonumber(L, 1);
  result = (bool)ImGui::IsActiveIdUsingNavDir(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsActiveIdUsingNavInput(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavInput arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsActiveIdUsingNavInput",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsActiveIdUsingNavInput",1,"ImGuiNavInput");
  arg1 = (ImGuiNavInput)lua_tonumber(L, 1);
  result = (bool)ImGui::IsActiveIdUsingNavInput(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsActiveIdUsingKey(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiKey arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsActiveIdUsingKey",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsActiveIdUsingKey",1,"ImGuiKey");
  arg1 = (ImGuiKey)lua_tonumber(L, 1);
  result = (bool)ImGui::IsActiveIdUsingKey(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragPastThreshold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDragPastThreshold",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDragPastThreshold",1,"ImGuiMouseButton");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsMouseDragPastThreshold",2,"float");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)ImGui::IsMouseDragPastThreshold(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragPastThreshold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiMouseButton arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsMouseDragPastThreshold",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDragPastThreshold",1,"ImGuiMouseButton");
  arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);
  result = (bool)ImGui::IsMouseDragPastThreshold(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsMouseDragPastThreshold(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsMouseDragPastThreshold__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsMouseDragPastThreshold__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsMouseDragPastThreshold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsMouseDragPastThreshold(ImGuiMouseButton,float)\n"
    "    ImGui::IsMouseDragPastThreshold(ImGuiMouseButton)\n");
  lua_error(L);return 0;
}


static int _wrap_IsKeyPressedMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiKey arg1 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyPressedMap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyPressedMap",1,"ImGuiKey");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::IsKeyPressedMap",2,"bool");
  arg1 = (ImGuiKey)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ImGui::IsKeyPressedMap(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyPressedMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiKey arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsKeyPressedMap",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyPressedMap",1,"ImGuiKey");
  arg1 = (ImGuiKey)lua_tonumber(L, 1);
  result = (bool)ImGui::IsKeyPressedMap(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsKeyPressedMap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_IsKeyPressedMap__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_IsKeyPressedMap__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsKeyPressedMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::IsKeyPressedMap(ImGuiKey,bool)\n"
    "    ImGui::IsKeyPressedMap(ImGuiKey)\n");
  lua_error(L);return 0;
}


static int _wrap_IsNavInputDown(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavInput arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsNavInputDown",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsNavInputDown",1,"ImGuiNavInput");
  arg1 = (ImGuiNavInput)lua_tonumber(L, 1);
  result = (bool)ImGui::IsNavInputDown(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNavInputTest(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiNavInput arg1 ;
  ImGuiInputReadMode arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::IsNavInputTest",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsNavInputTest",1,"ImGuiNavInput");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsNavInputTest",2,"ImGuiInputReadMode");
  arg1 = (ImGuiNavInput)lua_tonumber(L, 1);
  arg2 = (ImGuiInputReadMode)(int)lua_tonumber(L, 2);
  result = (bool)ImGui::IsNavInputTest(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMergedKeyModFlags(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiKeyModFlags result;
  
  SWIG_check_num_args("ImGui::GetMergedKeyModFlags",0,0)
  result = (ImGuiKeyModFlags)ImGui::GetMergedKeyModFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextInitialize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextInitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextInitialize",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextInitialize",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DockContextInitialize(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextShutdown(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextShutdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextShutdown",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextShutdown",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DockContextShutdown(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextClearNodes(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("ImGui::DockContextClearNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextClearNodes",1,"ImGuiContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockContextClearNodes",2,"ImGuiID");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::DockContextClearNodes",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextClearNodes",1,SWIGTYPE_p_ImGuiContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  ImGui::DockContextClearNodes(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextRebuildNodes(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextRebuildNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextRebuildNodes",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextRebuildNodes",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DockContextRebuildNodes(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextUpdateUndocking(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextUpdateUndocking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextUpdateUndocking",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextUpdateUndocking",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DockContextUpdateUndocking(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextUpdateDocking(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextUpdateDocking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextUpdateDocking",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextUpdateDocking",1,SWIGTYPE_p_ImGuiContext);
  }
  
  ImGui::DockContextUpdateDocking(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextGenNodeID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockContextGenNodeID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextGenNodeID",1,"ImGuiContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextGenNodeID",1,SWIGTYPE_p_ImGuiContext);
  }
  
  result = (ImGuiID)ImGui::DockContextGenNodeID(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextQueueDock(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *arg3 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *arg4 = (ImGuiWindow *) 0 ;
  ImGuiDir arg5 ;
  float arg6 ;
  bool arg7 ;
  
  SWIG_check_num_args("ImGui::DockContextQueueDock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextQueueDock",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DockContextQueueDock",2,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DockContextQueueDock",3,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DockContextQueueDock",4,"ImGuiWindow *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DockContextQueueDock",5,"ImGuiDir");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DockContextQueueDock",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ImGui::DockContextQueueDock",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextQueueDock",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("DockContextQueueDock",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockContextQueueDock",3,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("DockContextQueueDock",4,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg5 = (ImGuiDir)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  ImGui::DockContextQueueDock(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextQueueUndockWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextQueueUndockWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextQueueUndockWindow",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DockContextQueueUndockWindow",2,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextQueueUndockWindow",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("DockContextQueueUndockWindow",2,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::DockContextQueueUndockWindow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextQueueUndockNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  
  SWIG_check_num_args("ImGui::DockContextQueueUndockNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextQueueUndockNode",1,"ImGuiContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DockContextQueueUndockNode",2,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
    SWIG_fail_ptr("DockContextQueueUndockNode",1,SWIGTYPE_p_ImGuiContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockContextQueueUndockNode",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  ImGui::DockContextQueueUndockNode(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockContextCalcDropPosForDocking(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiDockNode *arg2 = (ImGuiDockNode *) 0 ;
  ImGuiWindow *arg3 = (ImGuiWindow *) 0 ;
  ImGuiDir arg4 ;
  bool arg5 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DockContextCalcDropPosForDocking",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",2,"ImGuiDockNode *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",3,"ImGuiWindow *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",4,"ImGuiDir");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",5,"bool");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DockContextCalcDropPosForDocking",6,"ImVec2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("DockContextCalcDropPosForDocking",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockContextCalcDropPosForDocking",2,SWIGTYPE_p_ImGuiDockNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("DockContextCalcDropPosForDocking",3,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg4 = (ImGuiDir)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockContextCalcDropPosForDocking",6,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::DockContextCalcDropPosForDocking(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockNodeBeginAmendTabBar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DockNodeBeginAmendTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockNodeBeginAmendTabBar",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockNodeBeginAmendTabBar",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)ImGui::DockNodeBeginAmendTabBar(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockNodeEndAmendTabBar(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::DockNodeEndAmendTabBar",0,0)
  ImGui::DockNodeEndAmendTabBar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockNodeGetRootNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGui::DockNodeGetRootNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockNodeGetRootNode",1,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockNodeGetRootNode",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (ImGuiDockNode *)ImGui::DockNodeGetRootNode(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockNodeGetDepth(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *arg1 = (ImGuiDockNode *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGui::DockNodeGetDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DockNodeGetDepth",1,"ImGuiDockNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("DockNodeGetDepth",1,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (int)ImGui::DockNodeGetDepth((ImGuiDockNode const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowDockNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetWindowDockNode",0,0)
  result = (ImGuiDockNode *)ImGui::GetWindowDockNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowAlwaysWantOwnTabBar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::GetWindowAlwaysWantOwnTabBar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetWindowAlwaysWantOwnTabBar",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetWindowAlwaysWantOwnTabBar",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool)ImGui::GetWindowAlwaysWantOwnTabBar(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDocked(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  SWIG_check_num_args("ImGui::BeginDocked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BeginDocked",1,"ImGuiWindow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginDocked",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BeginDocked",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("BeginDocked",2,SWIGTYPE_p_bool);
  }
  
  ImGui::BeginDocked(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDockableDragDropSource(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::BeginDockableDragDropSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BeginDockableDragDropSource",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BeginDockableDragDropSource",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::BeginDockableDragDropSource(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDockableDragDropTarget(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::BeginDockableDragDropTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BeginDockableDragDropTarget",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("BeginDockableDragDropTarget",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::BeginDockableDragDropTarget(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowDock(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  ImGuiCond arg3 ;
  
  SWIG_check_num_args("ImGui::SetWindowDock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowDock",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowDock",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowDock",3,"ImGuiCond");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowDock",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiCond)lua_tonumber(L, 3);
  ImGui::SetWindowDock(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderDockWindow(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGui::DockBuilderDockWindow",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DockBuilderDockWindow",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockBuilderDockWindow",2,"ImGuiID");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  ImGui::DockBuilderDockWindow((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderGetNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGui::DockBuilderGetNode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderGetNode",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiDockNode *)ImGui::DockBuilderGetNode(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderGetCentralNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDockNode *result = 0 ;
  
  SWIG_check_num_args("ImGui::DockBuilderGetCentralNode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderGetCentralNode",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiDockNode *)ImGui::DockBuilderGetCentralNode(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDockNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderAddNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDockNodeFlags arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockBuilderAddNode",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderAddNode",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockBuilderAddNode",2,"ImGuiDockNodeFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2);
  result = (ImGuiID)ImGui::DockBuilderAddNode(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderAddNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockBuilderAddNode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderAddNode",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiID)ImGui::DockBuilderAddNode(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderAddNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockBuilderAddNode",0,0)
  result = (ImGuiID)ImGui::DockBuilderAddNode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderAddNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_DockBuilderAddNode__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_DockBuilderAddNode__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DockBuilderAddNode__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DockBuilderAddNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DockBuilderAddNode(ImGuiID,ImGuiDockNodeFlags)\n"
    "    ImGui::DockBuilderAddNode(ImGuiID)\n"
    "    ImGui::DockBuilderAddNode()\n");
  lua_error(L);return 0;
}


static int _wrap_DockBuilderRemoveNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::DockBuilderRemoveNode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderRemoveNode",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::DockBuilderRemoveNode(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderRemoveNodeDockedWindows__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  bool arg2 ;
  
  SWIG_check_num_args("ImGui::DockBuilderRemoveNodeDockedWindows",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderRemoveNodeDockedWindows",1,"ImGuiID");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::DockBuilderRemoveNodeDockedWindows",2,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  ImGui::DockBuilderRemoveNodeDockedWindows(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderRemoveNodeDockedWindows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::DockBuilderRemoveNodeDockedWindows",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderRemoveNodeDockedWindows",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::DockBuilderRemoveNodeDockedWindows(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderRemoveNodeDockedWindows(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_DockBuilderRemoveNodeDockedWindows__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_DockBuilderRemoveNodeDockedWindows__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DockBuilderRemoveNodeDockedWindows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DockBuilderRemoveNodeDockedWindows(ImGuiID,bool)\n"
    "    ImGui::DockBuilderRemoveNodeDockedWindows(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_DockBuilderRemoveNodeChildNodes(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::DockBuilderRemoveNodeChildNodes",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderRemoveNodeChildNodes",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::DockBuilderRemoveNodeChildNodes(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderSetNodePos(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 arg2 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::DockBuilderSetNodePos",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderSetNodePos",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockBuilderSetNodePos",2,"ImVec2");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockBuilderSetNodePos",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  ImGui::DockBuilderSetNodePos(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderSetNodeSize(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 arg2 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::DockBuilderSetNodeSize",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderSetNodeSize",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockBuilderSetNodeSize",2,"ImVec2");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("DockBuilderSetNodeSize",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  ImGui::DockBuilderSetNodeSize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderSplitNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDir arg2 ;
  float arg3 ;
  ImGuiID *arg4 = (ImGuiID *) 0 ;
  ImGuiID *arg5 = (ImGuiID *) 0 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::DockBuilderSplitNode",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderSplitNode",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockBuilderSplitNode",2,"ImGuiDir");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DockBuilderSplitNode",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DockBuilderSplitNode",4,"ImGuiID *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DockBuilderSplitNode",5,"ImGuiID *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("DockBuilderSplitNode",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("DockBuilderSplitNode",5,SWIGTYPE_p_unsigned_int);
  }
  
  result = (ImGuiID)ImGui::DockBuilderSplitNode(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderCopyDockSpace(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiID arg2 ;
  ImVector< char const * > *arg3 = (ImVector< char const * > *) 0 ;
  
  SWIG_check_num_args("ImGui::DockBuilderCopyDockSpace",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderCopyDockSpace",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockBuilderCopyDockSpace",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DockBuilderCopyDockSpace",3,"ImVector< char const * > *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVectorT_char_const_p_t,0))){
    SWIG_fail_ptr("DockBuilderCopyDockSpace",3,SWIGTYPE_p_ImVectorT_char_const_p_t);
  }
  
  ImGui::DockBuilderCopyDockSpace(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderCopyNode(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiID arg2 ;
  ImVector< ImGuiID > *arg3 = (ImVector< ImGuiID > *) 0 ;
  
  SWIG_check_num_args("ImGui::DockBuilderCopyNode",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderCopyNode",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DockBuilderCopyNode",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DockBuilderCopyNode",3,"ImVector< ImGuiID > *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("DockBuilderCopyNode",3,SWIGTYPE_p_ImVectorT_unsigned_int_t);
  }
  
  ImGui::DockBuilderCopyNode(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderCopyWindowSettings(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::DockBuilderCopyWindowSettings",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DockBuilderCopyWindowSettings",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::DockBuilderCopyWindowSettings",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::DockBuilderCopyWindowSettings((char const *)arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DockBuilderFinish(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::DockBuilderFinish",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockBuilderFinish",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::DockBuilderFinish(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginDragDropTargetCustom(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginDragDropTargetCustom",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::BeginDragDropTargetCustom",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginDragDropTargetCustom",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("BeginDragDropTargetCustom",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (bool)ImGui::BeginDragDropTargetCustom((ImRect const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClearDragDrop(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::ClearDragDrop",0,0)
  ImGui::ClearDragDrop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsDragDropPayloadBeingAccepted(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("ImGui::IsDragDropPayloadBeingAccepted",0,0)
  result = (bool)ImGui::IsDragDropPayloadBeingAccepted();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetWindowClipRectBeforeSetChannel(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = 0 ;
  
  SWIG_check_num_args("ImGui::SetWindowClipRectBeforeSetChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetWindowClipRectBeforeSetChannel",1,"ImGuiWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowClipRectBeforeSetChannel",2,"ImRect const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("SetWindowClipRectBeforeSetChannel",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SetWindowClipRectBeforeSetChannel",2,SWIGTYPE_p_ImRect);
  }
  
  ImGui::SetWindowClipRectBeforeSetChannel(arg1,(ImRect const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginColumns__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiColumnsFlags arg3 ;
  
  SWIG_check_num_args("ImGui::BeginColumns",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginColumns",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginColumns",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginColumns",3,"ImGuiColumnsFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (ImGuiColumnsFlags)lua_tonumber(L, 3);
  ImGui::BeginColumns((char const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginColumns__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ImGui::BeginColumns",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginColumns",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginColumns",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  ImGui::BeginColumns((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginColumns(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeginColumns__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeginColumns__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginColumns'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::BeginColumns(char const *,int,ImGuiColumnsFlags)\n"
    "    ImGui::BeginColumns(char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_EndColumns(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::EndColumns",0,0)
  ImGui::EndColumns();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushColumnClipRect(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("ImGui::PushColumnClipRect",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushColumnClipRect",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  ImGui::PushColumnClipRect(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PushColumnsBackground(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PushColumnsBackground",0,0)
  ImGui::PushColumnsBackground();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PopColumnsBackground(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::PopColumnsBackground",0,0)
  ImGui::PopColumnsBackground();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnsID(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetColumnsID",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetColumnsID",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetColumnsID",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImGuiID)ImGui::GetColumnsID((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindOrCreateColumns(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  ImGuiColumns *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindOrCreateColumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FindOrCreateColumns",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::FindOrCreateColumns",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("FindOrCreateColumns",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (ImGuiColumns *)ImGui::FindOrCreateColumns(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiColumns,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnOffsetFromNorm(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnOffsetFromNorm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetColumnOffsetFromNorm",1,"ImGuiColumns const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetColumnOffsetFromNorm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("GetColumnOffsetFromNorm",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)ImGui::GetColumnOffsetFromNorm((ImGuiColumns const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetColumnNormFromOffset(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("ImGui::GetColumnNormFromOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetColumnNormFromOffset",1,"ImGuiColumns const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetColumnNormFromOffset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiColumns,0))){
    SWIG_fail_ptr("GetColumnNormFromOffset",1,SWIGTYPE_p_ImGuiColumns);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)ImGui::GetColumnNormFromOffset((ImGuiColumns const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeginTabBarEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabBarFlags arg3 ;
  ImGuiDockNode *arg4 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::BeginTabBarEx",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::BeginTabBarEx",1,"ImGuiTabBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginTabBarEx",2,"ImRect const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginTabBarEx",3,"ImGuiTabBarFlags");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::BeginTabBarEx",4,"ImGuiDockNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("BeginTabBarEx",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("BeginTabBarEx",2,SWIGTYPE_p_ImRect);
  }
  
  arg3 = (ImGuiTabBarFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("BeginTabBarEx",4,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)ImGui::BeginTabBarEx(arg1,(ImRect const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarFindTabByID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  ImGuiTabItem *result = 0 ;
  
  SWIG_check_num_args("ImGui::TabBarFindTabByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarFindTabByID",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TabBarFindTabByID",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarFindTabByID",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  result = (ImGuiTabItem *)ImGui::TabBarFindTabByID(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarFindMostRecentlySelectedTabForActiveWindow(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *result = 0 ;
  
  SWIG_check_num_args("ImGui::TabBarFindMostRecentlySelectedTabForActiveWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarFindMostRecentlySelectedTabForActiveWindow",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarFindMostRecentlySelectedTabForActiveWindow",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (ImGuiTabItem *)ImGui::TabBarFindMostRecentlySelectedTabForActiveWindow(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTabItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarAddTab(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItemFlags arg2 ;
  ImGuiWindow *arg3 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::TabBarAddTab",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarAddTab",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TabBarAddTab",2,"ImGuiTabItemFlags");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::TabBarAddTab",3,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarAddTab",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (ImGuiTabItemFlags)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("TabBarAddTab",3,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::TabBarAddTab(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarRemoveTab(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGui::TabBarRemoveTab",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarRemoveTab",1,"ImGuiTabBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TabBarRemoveTab",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarRemoveTab",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  ImGui::TabBarRemoveTab(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarCloseTab(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  
  SWIG_check_num_args("ImGui::TabBarCloseTab",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarCloseTab",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::TabBarCloseTab",2,"ImGuiTabItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarCloseTab",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("TabBarCloseTab",2,SWIGTYPE_p_ImGuiTabItem);
  }
  
  ImGui::TabBarCloseTab(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarQueueReorder(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ImGui::TabBarQueueReorder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarQueueReorder",1,"ImGuiTabBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::TabBarQueueReorder",2,"ImGuiTabItem const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TabBarQueueReorder",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarQueueReorder",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTabItem,0))){
    SWIG_fail_ptr("TabBarQueueReorder",2,SWIGTYPE_p_ImGuiTabItem);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ImGui::TabBarQueueReorder(arg1,(ImGuiTabItem const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabBarProcessReorder(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TabBarProcessReorder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabBarProcessReorder",1,"ImGuiTabBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabBarProcessReorder",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  result = (bool)ImGui::TabBarProcessReorder(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  ImGuiTabItemFlags arg4 ;
  ImGuiWindow *arg5 = (ImGuiWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TabItemEx",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabItemEx",1,"ImGuiTabBar *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TabItemEx",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::TabItemEx",3,"bool *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TabItemEx",4,"ImGuiTabItemFlags");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::TabItemEx",5,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTabBar,0))){
    SWIG_fail_ptr("TabItemEx",1,SWIGTYPE_p_ImGuiTabBar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("TabItemEx",3,SWIGTYPE_p_bool);
  }
  
  arg4 = (ImGuiTabItemFlags)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("TabItemEx",5,SWIGTYPE_p_ImGuiWindow);
  }
  
  result = (bool)ImGui::TabItemEx(arg1,(char const *)arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemCalcSize(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImVec2 result;
  
  SWIG_check_num_args("ImGui::TabItemCalcSize",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TabItemCalcSize",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::TabItemCalcSize",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ImGui::TabItemCalcSize((char const *)arg1,arg2);
  {
    ImVec2 * resultptr = new ImVec2((const ImVec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemBackground(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabItemFlags arg3 ;
  ImU32 arg4 ;
  
  SWIG_check_num_args("ImGui::TabItemBackground",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabItemBackground",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TabItemBackground",2,"ImRect const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TabItemBackground",3,"ImGuiTabItemFlags");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TabItemBackground",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("TabItemBackground",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TabItemBackground",2,SWIGTYPE_p_ImRect);
  }
  
  arg3 = (ImGuiTabItemFlags)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  ImGui::TabItemBackground(arg1,(ImRect const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TabItemLabelAndCloseButton(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabItemFlags arg3 ;
  ImVec2 arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiID arg6 ;
  ImGuiID arg7 ;
  bool arg8 ;
  bool *arg9 = (bool *) 0 ;
  bool *arg10 = (bool *) 0 ;
  ImVec2 *argp4 ;
  
  SWIG_check_num_args("ImGui::TabItemLabelAndCloseButton",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",2,"ImRect const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",3,"ImGuiTabItemFlags");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",4,"ImVec2");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",6,"ImGuiID");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",7,"ImGuiID");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",8,"bool");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",9,"bool *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("ImGui::TabItemLabelAndCloseButton",10,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("TabItemLabelAndCloseButton",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TabItemLabelAndCloseButton",2,SWIGTYPE_p_ImRect);
  }
  
  arg3 = (ImGuiTabItemFlags)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("TabItemLabelAndCloseButton",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  arg5 = (char *)lua_tostring(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImGuiID)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImGuiID)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("TabItemLabelAndCloseButton",9,SWIGTYPE_p_bool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("TabItemLabelAndCloseButton",10,SWIGTYPE_p_bool);
  }
  
  ImGui::TabItemLabelAndCloseButton(arg1,(ImRect const &)*arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderText",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderText",1,"ImVec2");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::RenderText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderText",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::RenderText",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderText",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  ImGui::RenderText(arg1,(char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderText",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderText",1,"ImVec2");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::RenderText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderText",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  ImGui::RenderText(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderText__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderText",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderText",1,"ImVec2");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::RenderText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderText",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::RenderText(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderText(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderText__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderText__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_RenderText__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderText(ImVec2,char const *,char const *,bool)\n"
    "    ImGui::RenderText(ImVec2,char const *,char const *)\n"
    "    ImGui::RenderText(ImVec2,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderTextWrapped(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderTextWrapped",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderTextWrapped",1,"ImVec2");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::RenderTextWrapped",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderTextWrapped",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderTextWrapped",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextWrapped",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ImGui::RenderTextWrapped(arg1,(char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClipped__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  ImVec2 *arg6 = 0 ;
  ImRect *arg7 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClipped",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderTextClipped",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClipped",2,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderTextClipped",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClipped",4,"char const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::RenderTextClipped",5,"ImVec2 const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::RenderTextClipped",6,"ImVec2 const &");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::RenderTextClipped",7,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderTextClipped",7,SWIGTYPE_p_ImRect);
  }
  
  ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5,(ImVec2 const &)*arg6,(ImRect const *)arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClipped__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  ImVec2 *arg6 = 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClipped",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderTextClipped",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClipped",2,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderTextClipped",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClipped",4,"char const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::RenderTextClipped",5,"ImVec2 const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::RenderTextClipped",6,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",6,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5,(ImVec2 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClipped__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClipped",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderTextClipped",1,"ImVec2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClipped",2,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::RenderTextClipped",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClipped",4,"char const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::RenderTextClipped",5,"ImVec2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",1,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClipped",5,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClipped(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_RenderTextClipped__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_RenderTextClipped__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_RenderTextClipped__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderTextClipped'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderTextClipped(ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *,ImVec2 const &,ImRect const *)\n"
    "    ImGui::RenderTextClipped(ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *,ImVec2 const &)\n"
    "    ImGui::RenderTextClipped(ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderTextClippedEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  ImVec2 *arg7 = 0 ;
  ImRect *arg8 = (ImRect *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClippedEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderTextClippedEx",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClippedEx",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderTextClippedEx",3,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClippedEx",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::RenderTextClippedEx",5,"char const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::RenderTextClippedEx",6,"ImVec2 const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::RenderTextClippedEx",7,"ImVec2 const &");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("ImGui::RenderTextClippedEx",8,"ImRect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderTextClippedEx",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",7,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderTextClippedEx",8,SWIGTYPE_p_ImRect);
  }
  
  ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6,(ImVec2 const &)*arg7,(ImRect const *)arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClippedEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  ImVec2 *arg7 = 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClippedEx",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderTextClippedEx",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClippedEx",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderTextClippedEx",3,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClippedEx",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::RenderTextClippedEx",5,"char const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::RenderTextClippedEx",6,"ImVec2 const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::RenderTextClippedEx",7,"ImVec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderTextClippedEx",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",7,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6,(ImVec2 const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClippedEx__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextClippedEx",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderTextClippedEx",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextClippedEx",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderTextClippedEx",3,"ImVec2 const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::RenderTextClippedEx",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::RenderTextClippedEx",5,"char const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::RenderTextClippedEx",6,"ImVec2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderTextClippedEx",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextClippedEx",6,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderTextClippedEx(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_RenderTextClippedEx__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_RenderTextClippedEx__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImRect, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_RenderTextClippedEx__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderTextClippedEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderTextClippedEx(ImDrawList *,ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *,ImVec2 const &,ImRect const *)\n"
    "    ImGui::RenderTextClippedEx(ImDrawList *,ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *,ImVec2 const &)\n"
    "    ImGui::RenderTextClippedEx(ImDrawList *,ImVec2 const &,ImVec2 const &,char const *,char const *,ImVec2 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderTextEllipsis(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  ImVec2 *arg8 = (ImVec2 *) 0 ;
  
  SWIG_check_num_args("ImGui::RenderTextEllipsis",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderTextEllipsis",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderTextEllipsis",2,"ImVec2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderTextEllipsis",3,"ImVec2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderTextEllipsis",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderTextEllipsis",5,"float");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::RenderTextEllipsis",6,"char const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::RenderTextEllipsis",7,"char const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("ImGui::RenderTextEllipsis",8,"ImVec2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderTextEllipsis",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextEllipsis",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextEllipsis",3,SWIGTYPE_p_ImVec2);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderTextEllipsis",8,SWIGTYPE_p_ImVec2);
  }
  
  ImGui::RenderTextEllipsis(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(ImVec2 const *)arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  bool arg4 ;
  float arg5 ;
  ImVec2 *argp1 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderFrame",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderFrame",1,"ImVec2");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderFrame",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderFrame",3,"ImU32");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::RenderFrame",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderFrame",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (float)lua_tonumber(L, 5);
  ImGui::RenderFrame(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  bool arg4 ;
  ImVec2 *argp1 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderFrame",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderFrame",1,"ImVec2");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderFrame",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderFrame",3,"ImU32");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ImGui::RenderFrame",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  ImGui::RenderFrame(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrame__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImVec2 *argp1 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderFrame",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderFrame",1,"ImVec2");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderFrame",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderFrame",3,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrame",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  ImGui::RenderFrame(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrame(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderFrame__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_RenderFrame__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderFrame__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderFrame(ImVec2,ImVec2,ImU32,bool,float)\n"
    "    ImGui::RenderFrame(ImVec2,ImVec2,ImU32,bool)\n"
    "    ImGui::RenderFrame(ImVec2,ImVec2,ImU32)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderFrameBorder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImVec2 *argp1 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderFrameBorder",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderFrameBorder",1,"ImVec2");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderFrameBorder",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderFrameBorder",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrameBorder",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrameBorder",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  ImGui::RenderFrameBorder(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrameBorder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImVec2 *argp1 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderFrameBorder",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderFrameBorder",1,"ImVec2");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderFrameBorder",2,"ImVec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrameBorder",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderFrameBorder",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  ImGui::RenderFrameBorder(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderFrameBorder(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RenderFrameBorder__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderFrameBorder__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderFrameBorder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderFrameBorder(ImVec2,ImVec2,float)\n"
    "    ImGui::RenderFrameBorder(ImVec2,ImVec2)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  float arg7 ;
  int arg8 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  ImVec2 *argp6 ;
  
  SWIG_check_num_args("ImGui::RenderColorRectWithAlphaCheckerboard",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",3,"ImVec2");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",6,"ImVec2");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",6,SWIGTYPE_p_ImVec2);
  }
  arg6 = *argp6;
  
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  float arg7 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  ImVec2 *argp6 ;
  
  SWIG_check_num_args("ImGui::RenderColorRectWithAlphaCheckerboard",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",3,"ImVec2");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",6,"ImVec2");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",6,SWIGTYPE_p_ImVec2);
  }
  arg6 = *argp6;
  
  arg7 = (float)lua_tonumber(L, 7);
  ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  ImVec2 *argp6 ;
  
  SWIG_check_num_args("ImGui::RenderColorRectWithAlphaCheckerboard",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",3,"ImVec2");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::RenderColorRectWithAlphaCheckerboard",6,"ImVec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderColorRectWithAlphaCheckerboard",6,SWIGTYPE_p_ImVec2);
  }
  arg6 = *argp6;
  
  ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderColorRectWithAlphaCheckerboard(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderColorRectWithAlphaCheckerboard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList *,ImVec2,ImVec2,ImU32,float,ImVec2,float,int)\n"
    "    ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList *,ImVec2,ImVec2,ImU32,float,ImVec2,float)\n"
    "    ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList *,ImVec2,ImVec2,ImU32,float,ImVec2)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderNavHighlight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiNavHighlightFlags arg3 ;
  
  SWIG_check_num_args("ImGui::RenderNavHighlight",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderNavHighlight",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::RenderNavHighlight",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderNavHighlight",3,"ImGuiNavHighlightFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderNavHighlight",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiNavHighlightFlags)lua_tonumber(L, 3);
  ImGui::RenderNavHighlight((ImRect const &)*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderNavHighlight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  
  SWIG_check_num_args("ImGui::RenderNavHighlight",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderNavHighlight",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::RenderNavHighlight",2,"ImGuiID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderNavHighlight",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  ImGui::RenderNavHighlight((ImRect const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderNavHighlight(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderNavHighlight__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderNavHighlight__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderNavHighlight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderNavHighlight(ImRect const &,ImGuiID,ImGuiNavHighlightFlags)\n"
    "    ImGui::RenderNavHighlight(ImRect const &,ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_FindRenderedTextEnd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindRenderedTextEnd",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::FindRenderedTextEnd",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::FindRenderedTextEnd",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)ImGui::FindRenderedTextEnd((char const *)arg1,(char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindRenderedTextEnd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ImGui::FindRenderedTextEnd",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::FindRenderedTextEnd",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ImGui::FindRenderedTextEnd((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindRenderedTextEnd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_FindRenderedTextEnd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FindRenderedTextEnd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FindRenderedTextEnd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::FindRenderedTextEnd(char const *,char const *)\n"
    "    ImGui::FindRenderedTextEnd(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LogRenderedText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::LogRenderedText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::LogRenderedText",1,"ImVec2 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LogRenderedText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::LogRenderedText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("LogRenderedText",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  ImGui::LogRenderedText((ImVec2 const *)arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogRenderedText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::LogRenderedText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::LogRenderedText",1,"ImVec2 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LogRenderedText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("LogRenderedText",1,SWIGTYPE_p_ImVec2);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::LogRenderedText((ImVec2 const *)arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogRenderedText(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LogRenderedText__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_LogRenderedText__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LogRenderedText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::LogRenderedText(ImVec2 const *,char const *,char const *)\n"
    "    ImGui::LogRenderedText(ImVec2 const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderArrow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImGuiDir arg4 ;
  float arg5 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderArrow",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderArrow",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderArrow",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderArrow",3,"ImU32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderArrow",4,"ImGuiDir");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderArrow",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderArrow",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrow",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (ImGuiDir)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ImGui::RenderArrow(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImGuiDir arg4 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderArrow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderArrow",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderArrow",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderArrow",3,"ImU32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderArrow",4,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderArrow",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrow",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (ImGuiDir)lua_tonumber(L, 4);
  ImGui::RenderArrow(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderBullet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderBullet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderBullet",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderBullet",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderBullet",3,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderBullet",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderBullet",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  ImGui::RenderBullet(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderCheckMark(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  float arg4 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderCheckMark",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderCheckMark",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderCheckMark",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderCheckMark",3,"ImU32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderCheckMark",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderCheckMark",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderCheckMark",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ImGui::RenderCheckMark(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderMouseCursor(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImGuiMouseCursor arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderMouseCursor",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderMouseCursor",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderMouseCursor",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderMouseCursor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderMouseCursor",4,"ImGuiMouseCursor");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderMouseCursor",5,"ImU32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::RenderMouseCursor",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::RenderMouseCursor",7,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderMouseCursor",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderMouseCursor",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (ImGuiMouseCursor)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  ImGui::RenderMouseCursor(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrowPointingAt(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImGuiDir arg4 ;
  ImU32 arg5 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  
  SWIG_check_num_args("ImGui::RenderArrowPointingAt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderArrowPointingAt",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderArrowPointingAt",2,"ImVec2");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderArrowPointingAt",3,"ImVec2");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderArrowPointingAt",4,"ImGuiDir");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderArrowPointingAt",5,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderArrowPointingAt",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrowPointingAt",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrowPointingAt",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  arg4 = (ImGuiDir)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (ImU32)lua_tonumber(L, 5);
  ImGui::RenderArrowPointingAt(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrowDockMenu(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImU32 arg4 ;
  ImVec2 *argp2 ;
  
  SWIG_check_num_args("ImGui::RenderArrowDockMenu",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderArrowDockMenu",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderArrowDockMenu",2,"ImVec2");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderArrowDockMenu",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderArrowDockMenu",4,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderArrowDockMenu",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrowDockMenu",2,SWIGTYPE_p_ImVec2);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  ImGui::RenderArrowDockMenu(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderRectFilledRangeH(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImU32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("ImGui::RenderRectFilledRangeH",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",2,"ImRect const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",3,"ImU32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::RenderRectFilledRangeH",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderRectFilledRangeH",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderRectFilledRangeH",2,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (ImU32)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ImGui::RenderRectFilledRangeH(arg1,(ImRect const &)*arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderRectFilledWithHole(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect arg2 ;
  ImRect arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImRect *argp2 ;
  ImRect *argp3 ;
  
  SWIG_check_num_args("ImGui::RenderRectFilledWithHole",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderRectFilledWithHole",1,"ImDrawList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::RenderRectFilledWithHole",2,"ImRect");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::RenderRectFilledWithHole",3,"ImRect");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::RenderRectFilledWithHole",4,"ImU32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::RenderRectFilledWithHole",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("RenderRectFilledWithHole",1,SWIGTYPE_p_ImDrawList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderRectFilledWithHole",2,SWIGTYPE_p_ImRect);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("RenderRectFilledWithHole",3,SWIGTYPE_p_ImRect);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (ImU32)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ImGui::RenderRectFilledWithHole(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImGuiDir arg2 ;
  float arg3 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderArrow",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderArrow",1,"ImVec2");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::RenderArrow",2,"ImGuiDir");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RenderArrow",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrow",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  ImGui::RenderArrow(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrow__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImGuiDir arg2 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderArrow",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderArrow",1,"ImVec2");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::RenderArrow",2,"ImGuiDir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderArrow",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  ImGui::RenderArrow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderArrow(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderArrow__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderArrow__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RenderArrow__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderArrow__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderArrow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderArrow(ImDrawList *,ImVec2,ImU32,ImGuiDir,float)\n"
    "    ImGui::RenderArrow(ImDrawList *,ImVec2,ImU32,ImGuiDir)\n"
    "    ImGui::RenderArrow(ImVec2,ImGuiDir,float)\n"
    "    ImGui::RenderArrow(ImVec2,ImGuiDir)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderBullet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImVec2 arg1 ;
  ImVec2 *argp1 ;
  
  SWIG_check_num_args("ImGui::RenderBullet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::RenderBullet",1,"ImVec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("RenderBullet",1,SWIGTYPE_p_ImVec2);
  }
  arg1 = *argp1;
  
  ImGui::RenderBullet(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderBullet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RenderBullet__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderBullet__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderBullet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::RenderBullet(ImDrawList *,ImVec2,ImU32)\n"
    "    ImGui::RenderBullet(ImVec2)\n");
  lua_error(L);return 0;
}


static int _wrap_TextEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiTextFlags arg3 ;
  
  SWIG_check_num_args("ImGui::TextEx",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextEx",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextEx",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TextEx",3,"ImGuiTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (ImGuiTextFlags)lua_tonumber(L, 3);
  ImGui::TextEx((char const *)arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::TextEx",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextEx",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextEx",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  ImGui::TextEx((char const *)arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextEx__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("ImGui::TextEx",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextEx",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  ImGui::TextEx((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextEx(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TextEx__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextEx__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TextEx__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TextEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TextEx(char const *,char const *,ImGuiTextFlags)\n"
    "    ImGui::TextEx(char const *,char const *)\n"
    "    ImGui::TextEx(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ButtonEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiButtonFlags arg3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ButtonEx",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ButtonEx",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ButtonEx",2,"ImVec2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ButtonEx",3,"ImGuiButtonFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ButtonEx",2,SWIGTYPE_p_ImVec2);
  }
  
  arg3 = (ImGuiButtonFlags)lua_tonumber(L, 3);
  result = (bool)ImGui::ButtonEx((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ButtonEx",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ButtonEx",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ButtonEx",2,"ImVec2 const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ButtonEx",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::ButtonEx((char const *)arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonEx__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ButtonEx",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ButtonEx",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ImGui::ButtonEx((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonEx(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_ButtonEx__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButtonEx__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButtonEx__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButtonEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ButtonEx(char const *,ImVec2 const &,ImGuiButtonFlags)\n"
    "    ImGui::ButtonEx(char const *,ImVec2 const &)\n"
    "    ImGui::ButtonEx(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CloseButton(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CloseButton",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::CloseButton",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::CloseButton",2,"ImVec2 const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("CloseButton",2,SWIGTYPE_p_ImVec2);
  }
  
  result = (bool)ImGui::CloseButton(arg1,(ImVec2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollapseButton(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDockNode *arg3 = (ImGuiDockNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::CollapseButton",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::CollapseButton",1,"ImGuiID");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::CollapseButton",2,"ImVec2 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::CollapseButton",3,"ImGuiDockNode *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("CollapseButton",2,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImGuiDockNode,0))){
    SWIG_fail_ptr("CollapseButton",3,SWIGTYPE_p_ImGuiDockNode);
  }
  
  result = (bool)ImGui::CollapseButton(arg1,(ImVec2 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrowButtonEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  ImVec2 arg3 ;
  ImGuiButtonFlags arg4 ;
  ImVec2 *argp3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ArrowButtonEx",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ArrowButtonEx",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ArrowButtonEx",2,"ImGuiDir");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ArrowButtonEx",3,"ImVec2");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::ArrowButtonEx",4,"ImGuiButtonFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ArrowButtonEx",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  arg4 = (ImGuiButtonFlags)lua_tonumber(L, 4);
  result = (bool)ImGui::ArrowButtonEx((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrowButtonEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  ImVec2 arg3 ;
  ImVec2 *argp3 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ArrowButtonEx",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ArrowButtonEx",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ArrowButtonEx",2,"ImGuiDir");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ArrowButtonEx",3,"ImVec2");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (ImGuiDir)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ArrowButtonEx",3,SWIGTYPE_p_ImVec2);
  }
  arg3 = *argp3;
  
  result = (bool)ImGui::ArrowButtonEx((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrowButtonEx(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ArrowButtonEx__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ArrowButtonEx__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ArrowButtonEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ArrowButtonEx(char const *,ImGuiDir,ImVec2,ImGuiButtonFlags)\n"
    "    ImGui::ArrowButtonEx(char const *,ImGuiDir,ImVec2)\n");
  lua_error(L);return 0;
}


static int _wrap_Scrollbar(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiAxis arg1 ;
  
  SWIG_check_num_args("ImGui::Scrollbar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Scrollbar",1,"ImGuiAxis");
  arg1 = (ImGuiAxis)(int)lua_tonumber(L, 1);
  ImGui::Scrollbar(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollbarEx(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  ImDrawCornerFlags arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ScrollbarEx",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ScrollbarEx",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ScrollbarEx",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ScrollbarEx",3,"ImGuiAxis");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ScrollbarEx",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ScrollbarEx",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::ScrollbarEx",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::ScrollbarEx",7,"ImDrawCornerFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ScrollbarEx",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiAxis)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ScrollbarEx",4,SWIGTYPE_p_float);
  }
  
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (ImDrawCornerFlags)lua_tonumber(L, 7);
  result = (bool)ImGui::ScrollbarEx((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageButtonEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  ImVec4 *arg8 = 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ImageButtonEx",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ImageButtonEx",1,"ImGuiID");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ImageButtonEx",2,"ImTextureID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButtonEx",3,"ImVec2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButtonEx",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ImageButtonEx",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ImageButtonEx",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::ImageButtonEx",7,"ImVec4 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::ImageButtonEx",8,"ImVec4 const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2=(ImTextureID)SWIG_MustGetPtr(L,2,0,0,2,"ImageButtonEx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButtonEx",3,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButtonEx",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButtonEx",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ImageButtonEx",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImageButtonEx",7,SWIGTYPE_p_ImVec4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec4,0))){
    SWIG_fail_ptr("ImageButtonEx",8,SWIGTYPE_p_ImVec4);
  }
  
  result = (bool)ImGui::ImageButtonEx(arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec4 const &)*arg7,(ImVec4 const &)*arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowScrollbarRect(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiAxis arg2 ;
  ImRect result;
  
  SWIG_check_num_args("ImGui::GetWindowScrollbarRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetWindowScrollbarRect",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetWindowScrollbarRect",2,"ImGuiAxis");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetWindowScrollbarRect",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiAxis)(int)lua_tonumber(L, 2);
  result = ImGui::GetWindowScrollbarRect(arg1,arg2);
  {
    ImRect * resultptr = new ImRect((const ImRect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImRect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowScrollbarID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiAxis arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetWindowScrollbarID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetWindowScrollbarID",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetWindowScrollbarID",2,"ImGuiAxis");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetWindowScrollbarID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (ImGuiAxis)(int)lua_tonumber(L, 2);
  result = (ImGuiID)ImGui::GetWindowScrollbarID(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWindowResizeID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  SWIG_check_num_args("ImGui::GetWindowResizeID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetWindowResizeID",1,"ImGuiWindow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetWindowResizeID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GetWindowResizeID",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ImGuiID)ImGui::GetWindowResizeID(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SeparatorEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiSeparatorFlags arg1 ;
  
  SWIG_check_num_args("ImGui::SeparatorEx",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SeparatorEx",1,"ImGuiSeparatorFlags");
  arg1 = (ImGuiSeparatorFlags)lua_tonumber(L, 1);
  ImGui::SeparatorEx(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonBehavior__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  ImGuiButtonFlags arg5 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ButtonBehavior",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ButtonBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ButtonBehavior",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ButtonBehavior",3,"bool *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ButtonBehavior",4,"bool *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ButtonBehavior",5,"ImGuiButtonFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ButtonBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ButtonBehavior",3,SWIGTYPE_p_bool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ButtonBehavior",4,SWIGTYPE_p_bool);
  }
  
  arg5 = (ImGuiButtonFlags)lua_tonumber(L, 5);
  result = (bool)ImGui::ButtonBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonBehavior__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::ButtonBehavior",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ButtonBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ButtonBehavior",2,"ImGuiID");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ButtonBehavior",3,"bool *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ButtonBehavior",4,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("ButtonBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ButtonBehavior",3,SWIGTYPE_p_bool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ButtonBehavior",4,SWIGTYPE_p_bool);
  }
  
  result = (bool)ImGui::ButtonBehavior((ImRect const &)*arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButtonBehavior(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ButtonBehavior__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButtonBehavior__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButtonBehavior'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::ButtonBehavior(ImRect const &,ImGuiID,bool *,bool *,ImGuiButtonFlags)\n"
    "    ImGui::ButtonBehavior(ImRect const &,ImGuiID,bool *,bool *)\n");
  lua_error(L);return 0;
}


static int _wrap_DragBehavior(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DragBehavior",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DragBehavior",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragBehavior",2,"ImGuiDataType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragBehavior",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragBehavior",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragBehavior",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragBehavior",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragBehavior",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::DragBehavior",8,"ImGuiSliderFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiDataType)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragBehavior");
  arg4 = (float)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragBehavior");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragBehavior");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);
  result = (bool)ImGui::DragBehavior(arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderBehavior(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  ImRect *arg9 = (ImRect *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SliderBehavior",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SliderBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderBehavior",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderBehavior",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderBehavior",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderBehavior",5,"void const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderBehavior",6,"void const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::SliderBehavior",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SliderBehavior",8,"ImGuiSliderFlags");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("ImGui::SliderBehavior",9,"ImRect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SliderBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderBehavior");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderBehavior");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderBehavior");
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SliderBehavior",9,SWIGTYPE_p_ImRect);
  }
  
  result = (bool)ImGui::SliderBehavior((ImRect const &)*arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitterBehavior__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SplitterBehavior",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SplitterBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SplitterBehavior",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SplitterBehavior",3,"ImGuiAxis");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SplitterBehavior",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SplitterBehavior",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SplitterBehavior",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SplitterBehavior",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SplitterBehavior",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::SplitterBehavior",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SplitterBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiAxis)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",5,SWIGTYPE_p_float);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitterBehavior__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SplitterBehavior",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SplitterBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SplitterBehavior",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SplitterBehavior",3,"ImGuiAxis");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SplitterBehavior",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SplitterBehavior",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SplitterBehavior",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SplitterBehavior",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SplitterBehavior",8,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SplitterBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiAxis)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",5,SWIGTYPE_p_float);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitterBehavior__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  SWIG_check_num_args("ImGui::SplitterBehavior",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SplitterBehavior",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SplitterBehavior",2,"ImGuiID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SplitterBehavior",3,"ImGuiAxis");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SplitterBehavior",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SplitterBehavior",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SplitterBehavior",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SplitterBehavior",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("SplitterBehavior",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (ImGuiAxis)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitterBehavior",5,SWIGTYPE_p_float);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitterBehavior(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SplitterBehavior__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_SplitterBehavior__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_SplitterBehavior__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SplitterBehavior'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::SplitterBehavior(ImRect const &,ImGuiID,ImGuiAxis,float *,float *,float,float,float,float)\n"
    "    ImGui::SplitterBehavior(ImRect const &,ImGuiID,ImGuiAxis,float *,float *,float,float,float)\n"
    "    ImGui::SplitterBehavior(ImRect const &,ImGuiID,ImGuiAxis,float *,float *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeNodeBehavior__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeBehavior",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TreeNodeBehavior",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeBehavior",2,"ImGuiTreeNodeFlags");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeBehavior",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::TreeNodeBehavior",4,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)ImGui::TreeNodeBehavior(arg1,arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeBehavior__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeBehavior",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TreeNodeBehavior",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeBehavior",2,"ImGuiTreeNodeFlags");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeBehavior",3,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ImGui::TreeNodeBehavior(arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeBehavior(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_TreeNodeBehavior__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_TreeNodeBehavior__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeBehavior'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TreeNodeBehavior(ImGuiID,ImGuiTreeNodeFlags,char const *,char const *)\n"
    "    ImGui::TreeNodeBehavior(ImGuiID,ImGuiTreeNodeFlags,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeNodeBehaviorIsOpen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeBehaviorIsOpen",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TreeNodeBehaviorIsOpen",1,"ImGuiID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeBehaviorIsOpen",2,"ImGuiTreeNodeFlags");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
  result = (bool)ImGui::TreeNodeBehaviorIsOpen(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeBehaviorIsOpen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TreeNodeBehaviorIsOpen",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TreeNodeBehaviorIsOpen",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (bool)ImGui::TreeNodeBehaviorIsOpen(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeNodeBehaviorIsOpen(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_TreeNodeBehaviorIsOpen__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TreeNodeBehaviorIsOpen__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeBehaviorIsOpen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TreeNodeBehaviorIsOpen(ImGuiID,ImGuiTreeNodeFlags)\n"
    "    ImGui::TreeNodeBehaviorIsOpen(ImGuiID)\n");
  lua_error(L);return 0;
}


static int _wrap_TreePushOverrideID(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  
  SWIG_check_num_args("ImGui::TreePushOverrideID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TreePushOverrideID",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  ImGui::TreePushOverrideID(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeGetInfo(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataType arg1 ;
  ImGuiDataTypeInfo *result = 0 ;
  
  SWIG_check_num_args("ImGui::DataTypeGetInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DataTypeGetInfo",1,"ImGuiDataType");
  arg1 = (ImGuiDataType)lua_tonumber(L, 1);
  result = (ImGuiDataTypeInfo *)ImGui::DataTypeGetInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiDataTypeInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeFormatString(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGui::DataTypeFormatString",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DataTypeFormatString",1,"char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DataTypeFormatString",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DataTypeFormatString",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DataTypeFormatString",4,"void const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::DataTypeFormatString",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"DataTypeFormatString");
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)ImGui::DataTypeFormatString(arg1,arg2,arg3,(void const *)arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeApplyOp(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataType arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("ImGui::DataTypeApplyOp",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DataTypeApplyOp",1,"ImGuiDataType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DataTypeApplyOp",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DataTypeApplyOp",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DataTypeApplyOp",4,"void const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DataTypeApplyOp",5,"void const *");
  arg1 = (ImGuiDataType)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DataTypeApplyOp");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"DataTypeApplyOp");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DataTypeApplyOp");
  ImGui::DataTypeApplyOp(arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeApplyOpFromText(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DataTypeApplyOpFromText",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DataTypeApplyOpFromText",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::DataTypeApplyOpFromText",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DataTypeApplyOpFromText",3,"ImGuiDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DataTypeApplyOpFromText",4,"void *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::DataTypeApplyOpFromText",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"DataTypeApplyOpFromText");
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)ImGui::DataTypeApplyOpFromText((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeCompare(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataType arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("ImGui::DataTypeCompare",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DataTypeCompare",1,"ImGuiDataType");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DataTypeCompare",2,"void const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DataTypeCompare",3,"void const *");
  arg1 = (ImGuiDataType)lua_tonumber(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DataTypeCompare");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DataTypeCompare");
  result = (int)ImGui::DataTypeCompare(arg1,(void const *)arg2,(void const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataTypeClamp(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiDataType arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::DataTypeClamp",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DataTypeClamp",1,"ImGuiDataType");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DataTypeClamp",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DataTypeClamp",3,"void const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DataTypeClamp",4,"void const *");
  arg1 = (ImGuiDataType)lua_tonumber(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DataTypeClamp");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DataTypeClamp");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"DataTypeClamp");
  result = (bool)ImGui::DataTypeClamp(arg1,arg2,(void const *)arg3,(void const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextEx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  ImGuiInputTextCallback arg7 = (ImGuiInputTextCallback) 0 ;
  void *arg8 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextEx",8,8)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextEx",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextEx",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextEx",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextEx",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::InputTextEx",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputTextEx",6,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextEx",7,"ImGuiInputTextCallback");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("ImGui::InputTextEx",8,"void *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextEx",5,SWIGTYPE_p_ImVec2);
  }
  
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextEx",7,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"InputTextEx");
  result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextEx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  ImGuiInputTextCallback arg7 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextEx",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextEx",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextEx",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextEx",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextEx",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::InputTextEx",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputTextEx",6,"ImGuiInputTextFlags");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextEx",7,"ImGuiInputTextCallback");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextEx",5,SWIGTYPE_p_ImVec2);
  }
  
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
    SWIG_fail_ptr("InputTextEx",7,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int);
  }
  
  result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextEx__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::InputTextEx",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextEx",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextEx",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextEx",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextEx",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::InputTextEx",5,"ImVec2 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputTextEx",6,"ImGuiInputTextFlags");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("InputTextEx",5,SWIGTYPE_p_ImVec2);
  }
  
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputTextEx(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_InputTextEx__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_InputTextEx__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, 0, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_InputTextEx__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputTextEx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::InputTextEx(char const *,char const *,char *,int,ImVec2 const &,ImGuiInputTextFlags,ImGuiInputTextCallback,void *)\n"
    "    ImGui::InputTextEx(char const *,char const *,char *,int,ImVec2 const &,ImGuiInputTextFlags,ImGuiInputTextCallback)\n"
    "    ImGui::InputTextEx(char const *,char const *,char *,int,ImVec2 const &,ImGuiInputTextFlags)\n");
  lua_error(L);return 0;
}


static int _wrap_TempInputText(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TempInputText",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TempInputText",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TempInputText",2,"ImGuiID");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TempInputText",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGui::TempInputText",4,"char *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::TempInputText",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::TempInputText",6,"ImGuiInputTextFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TempInputText",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);
  result = (bool)ImGui::TempInputText((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempInputScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TempInputScalar",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TempInputScalar",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TempInputScalar",2,"ImGuiID");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TempInputScalar",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TempInputScalar",4,"ImGuiDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::TempInputScalar",5,"void *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::TempInputScalar",6,"char const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::TempInputScalar",7,"void const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("ImGui::TempInputScalar",8,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TempInputScalar",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiDataType)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"TempInputScalar");
  arg6 = (char *)lua_tostring(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"TempInputScalar");
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"TempInputScalar");
  result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,(void const *)arg7,(void const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempInputScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TempInputScalar",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TempInputScalar",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TempInputScalar",2,"ImGuiID");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TempInputScalar",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TempInputScalar",4,"ImGuiDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::TempInputScalar",5,"void *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::TempInputScalar",6,"char const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::TempInputScalar",7,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TempInputScalar",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiDataType)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"TempInputScalar");
  arg6 = (char *)lua_tostring(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"TempInputScalar");
  result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,(void const *)arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempInputScalar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TempInputScalar",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TempInputScalar",1,"ImRect const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TempInputScalar",2,"ImGuiID");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TempInputScalar",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TempInputScalar",4,"ImGuiDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::TempInputScalar",5,"void *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::TempInputScalar",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImRect,0))){
    SWIG_fail_ptr("TempInputScalar",1,SWIGTYPE_p_ImRect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (ImGuiID)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (ImGuiDataType)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"TempInputScalar");
  arg6 = (char *)lua_tostring(L, 6);
  result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempInputScalar(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_TempInputScalar__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_TempInputScalar__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImRect, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = SWIG_lua_isnilstring(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, 0, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_TempInputScalar__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TempInputScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::TempInputScalar(ImRect const &,ImGuiID,char const *,ImGuiDataType,void *,char const *,void const *,void const *)\n"
    "    ImGui::TempInputScalar(ImRect const &,ImGuiID,char const *,ImGuiDataType,void *,char const *,void const *)\n"
    "    ImGui::TempInputScalar(ImRect const &,ImGuiID,char const *,ImGuiDataType,void *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TempInputIsActive(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  bool result;
  
  SWIG_check_num_args("ImGui::TempInputIsActive",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TempInputIsActive",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (bool)ImGui::TempInputIsActive(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetInputTextState(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiID arg1 ;
  ImGuiInputTextState *result = 0 ;
  
  SWIG_check_num_args("ImGui::GetInputTextState",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetInputTextState",1,"ImGuiID");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImGuiID)lua_tonumber(L, 1);
  result = (ImGuiInputTextState *)ImGui::GetInputTextState(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiInputTextState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorTooltip(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  ImGuiColorEditFlags arg3 ;
  
  SWIG_check_num_args("ImGui::ColorTooltip",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorTooltip",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorTooltip",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorTooltip",3,"ImGuiColorEditFlags");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorTooltip",2,SWIGTYPE_p_float);
  }
  
  arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);
  ImGui::ColorTooltip((char const *)arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorEditOptionsPopup(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  ImGuiColorEditFlags arg2 ;
  
  SWIG_check_num_args("ImGui::ColorEditOptionsPopup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ColorEditOptionsPopup",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorEditOptionsPopup",2,"ImGuiColorEditFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorEditOptionsPopup",1,SWIGTYPE_p_float);
  }
  
  arg2 = (ImGuiColorEditFlags)lua_tonumber(L, 2);
  ImGui::ColorEditOptionsPopup((float const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColorPickerOptionsPopup(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  ImGuiColorEditFlags arg2 ;
  
  SWIG_check_num_args("ImGui::ColorPickerOptionsPopup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ColorPickerOptionsPopup",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorPickerOptionsPopup",2,"ImGuiColorEditFlags");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ColorPickerOptionsPopup",1,SWIGTYPE_p_float);
  }
  
  arg2 = (ImGuiColorEditFlags)lua_tonumber(L, 2);
  ImGui::ColorPickerOptionsPopup((float const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlotEx(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiPlotType arg1 ;
  char *arg2 = (char *) 0 ;
  float (*arg3)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  float arg9 ;
  ImVec2 arg10 ;
  ImVec2 *argp10 ;
  int result;
  
  SWIG_check_num_args("ImGui::PlotEx",10,10)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PlotEx",1,"ImGuiPlotType");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::PlotEx",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotEx",3,"float (*)(void *,int)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::PlotEx",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotEx",6,"int");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::PlotEx",7,"char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotEx",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ImGui::PlotEx",9,"float");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("ImGui::PlotEx",10,"ImVec2");
  arg1 = (ImGuiPlotType)(int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int__float,0))){
    SWIG_fail_ptr("PlotEx",3,SWIGTYPE_p_f_p_void_int__float);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"PlotEx");
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (char *)lua_tostring(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("PlotEx",10,SWIGTYPE_p_ImVec2);
  }
  arg10 = *argp10;
  
  result = (int)ImGui::PlotEx(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShadeVertsLinearColorGradientKeepAlpha(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  ImVec2 *argp4 ;
  ImVec2 *argp5 ;
  
  SWIG_check_num_args("ImGui::ShadeVertsLinearColorGradientKeepAlpha",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",4,"ImVec2");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",5,"ImVec2");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",6,"ImU32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::ShadeVertsLinearColorGradientKeepAlpha",7,"ImU32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ShadeVertsLinearColorGradientKeepAlpha",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearColorGradientKeepAlpha",4,SWIGTYPE_p_ImVec2);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearColorGradientKeepAlpha",5,SWIGTYPE_p_ImVec2);
  }
  arg5 = *argp5;
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (ImU32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (ImU32)lua_tonumber(L, 7);
  ImGui::ShadeVertsLinearColorGradientKeepAlpha(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShadeVertsLinearUV(lua_State* L) {
  int SWIG_arg = 0;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  bool arg8 ;
  
  SWIG_check_num_args("ImGui::ShadeVertsLinearUV",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",1,"ImDrawList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",4,"ImVec2 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",5,"ImVec2 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",6,"ImVec2 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",7,"ImVec2 const &");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("ImGui::ShadeVertsLinearUV",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
    SWIG_fail_ptr("ShadeVertsLinearUV",1,SWIGTYPE_p_ImDrawList);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearUV",4,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearUV",5,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearUV",6,SWIGTYPE_p_ImVec2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
    SWIG_fail_ptr("ShadeVertsLinearUV",7,SWIGTYPE_p_ImVec2);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  ImGui::ShadeVertsLinearUV(arg1,arg2,arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GcCompactTransientWindowBuffers(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::GcCompactTransientWindowBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GcCompactTransientWindowBuffers",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GcCompactTransientWindowBuffers",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::GcCompactTransientWindowBuffers(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GcAwakeTransientWindowBuffers(lua_State* L) {
  int SWIG_arg = 0;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  SWIG_check_num_args("ImGui::GcAwakeTransientWindowBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GcAwakeTransientWindowBuffers",1,"ImGuiWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindow,0))){
    SWIG_fail_ptr("GcAwakeTransientWindowBuffers",1,SWIGTYPE_p_ImGuiWindow);
  }
  
  ImGui::GcAwakeTransientWindowBuffers(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebugDrawItemRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ImU32 arg1 ;
  
  SWIG_check_num_args("ImGui::DebugDrawItemRect",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DebugDrawItemRect",1,"ImU32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (ImU32)lua_tonumber(L, 1);
  ImGui::DebugDrawItemRect(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebugDrawItemRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::DebugDrawItemRect",0,0)
  ImGui::DebugDrawItemRect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebugDrawItemRect(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_DebugDrawItemRect__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_DebugDrawItemRect__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebugDrawItemRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImGui::DebugDrawItemRect(ImU32)\n"
    "    ImGui::DebugDrawItemRect()\n");
  lua_error(L);return 0;
}


static int _wrap_DebugStartItemPicker(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("ImGui::DebugStartItemPicker",0,0)
  ImGui::DebugStartItemPicker();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildWithStbTruetype(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  SWIG_check_num_args("ImFontAtlasBuildWithStbTruetype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildWithStbTruetype",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildWithStbTruetype",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  result = (bool)ImFontAtlasBuildWithStbTruetype(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildInit(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlasBuildInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildInit",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildInit",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  ImFontAtlasBuildInit(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildSetupFont(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImFontConfig *arg3 = (ImFontConfig *) 0 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("ImFontAtlasBuildSetupFont",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildSetupFont",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasBuildSetupFont",2,"ImFont *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlasBuildSetupFont",3,"ImFontConfig *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlasBuildSetupFont",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlasBuildSetupFont",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildSetupFont",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
    SWIG_fail_ptr("ImFontAtlasBuildSetupFont",2,SWIGTYPE_p_ImFont);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImFontConfig,0))){
    SWIG_fail_ptr("ImFontAtlasBuildSetupFont",3,SWIGTYPE_p_ImFontConfig);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  ImFontAtlasBuildSetupFont(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildPackCustomRects(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ImFontAtlasBuildPackCustomRects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildPackCustomRects",1,"ImFontAtlas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasBuildPackCustomRects",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildPackCustomRects",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlasBuildPackCustomRects");
  ImFontAtlasBuildPackCustomRects(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildFinish(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  SWIG_check_num_args("ImFontAtlasBuildFinish",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildFinish",1,"ImFontAtlas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildFinish",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  ImFontAtlasBuildFinish(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildRender1bppRectFromString(lua_State* L) {
  int SWIG_arg = 0;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  char arg7 ;
  unsigned char arg8 ;
  
  SWIG_check_num_args("ImFontAtlasBuildRender1bppRectFromString",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",1,"ImFontAtlas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",6,"char const *");
  if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",7,"char");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ImFontAtlasBuildRender1bppRectFromString",8,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
    SWIG_fail_ptr("ImFontAtlasBuildRender1bppRectFromString",1,SWIGTYPE_p_ImFontAtlas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  arg7 = (lua_tostring(L, 7))[0];
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (unsigned char)lua_tonumber(L, 8);
  ImFontAtlasBuildRender1bppRectFromString(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildMultiplyCalcLookupTable(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("ImFontAtlasBuildMultiplyCalcLookupTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildMultiplyCalcLookupTable",1,"unsigned char [256]");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasBuildMultiplyCalcLookupTable",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlasBuildMultiplyCalcLookupTable",1,SWIGTYPE_p_unsigned_char);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  ImFontAtlasBuildMultiplyCalcLookupTable(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImFontAtlasBuildMultiplyRectAlpha8(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  SWIG_check_num_args("ImFontAtlasBuildMultiplyRectAlpha8",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",1,"unsigned char const [256]");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ImFontAtlasBuildMultiplyRectAlpha8",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlasBuildMultiplyRectAlpha8",1,SWIGTYPE_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ImFontAtlasBuildMultiplyRectAlpha8",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  ImFontAtlasBuildMultiplyRectAlpha8((unsigned char const (*))arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  Bool *result = 0 ;
  
  SWIG_check_num_args("Bool::Bool",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Bool::Bool",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (Bool *)new Bool(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Bool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Bool *result = 0 ;
  
  SWIG_check_num_args("Bool::Bool",0,0)
  result = (Bool *)new Bool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Bool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bool(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Bool__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Bool__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Bool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Bool::Bool(bool)\n"
    "    Bool::Bool()\n");
  lua_error(L);return 0;
}


static int _wrap_Bool_getPtr(lua_State* L) {
  int SWIG_arg = 0;
  Bool *arg1 = (Bool *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("Bool::getPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Bool::getPtr",1,"Bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Bool,0))){
    SWIG_fail_ptr("Bool_getPtr",1,SWIGTYPE_p_Bool);
  }
  
  result = (bool *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bool_getValue(lua_State* L) {
  int SWIG_arg = 0;
  Bool *arg1 = (Bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("Bool::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Bool::getValue",1,"Bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Bool,0))){
    SWIG_fail_ptr("Bool_getValue",1,SWIGTYPE_p_Bool);
  }
  
  result = (bool)(arg1)->getValue();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bool_setValue(lua_State* L) {
  int SWIG_arg = 0;
  Bool *arg1 = (Bool *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Bool::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Bool::setValue",1,"Bool *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Bool::setValue",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Bool,0))){
    SWIG_fail_ptr("Bool_setValue",1,SWIGTYPE_p_Bool);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bool_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Bool *arg1 = (Bool *) 0 ;
  
  SWIG_check_num_args("Bool::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Bool::destroy",1,"Bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Bool,0))){
    SWIG_fail_ptr("Bool_destroy",1,SWIGTYPE_p_Bool);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Bool(void *obj) {
Bool *arg1 = (Bool *) obj;
delete arg1;
}
static int _proxy__wrap_new_Bool(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Bool);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Bool_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Bool_methods[]= {
    { "getPtr", _wrap_Bool_getPtr},
    { "getValue", _wrap_Bool_getValue},
    { "setValue", _wrap_Bool_setValue},
    { "destroy", _wrap_Bool_destroy},
    {0,0}
};
static swig_lua_method swig_Bool_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Bool_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Bool_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Bool_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Bool_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Bool_Sf_SwigStatic = {
    "Bool",
    swig_Bool_Sf_SwigStatic_methods,
    swig_Bool_Sf_SwigStatic_attributes,
    swig_Bool_Sf_SwigStatic_constants,
    swig_Bool_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Bool_bases[] = {0};
static const char *swig_Bool_base_names[] = {0};
static swig_lua_class _wrap_class_Bool = { "Bool", "Bool", &SWIGTYPE_p_Bool,_proxy__wrap_new_Bool, swig_delete_Bool, swig_Bool_methods, swig_Bool_attributes, &swig_Bool_Sf_SwigStatic, swig_Bool_meta, swig_Bool_bases, swig_Bool_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ImGuiTextBuffer_EmptyString", _wrap_ImGuiTextBuffer_EmptyString_get, _wrap_ImGuiTextBuffer_EmptyString_set },
    { "GImGui", _wrap_GImGui_get, _wrap_GImGui_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_VERSION", "1.80 WIP")},
    {SWIG_LUA_CONSTTAB_INT("IMGUI_VERSION_NUM", 17905)},
    {SWIG_LUA_CONSTTAB_INT("IMGUI_HAS_VIEWPORT", 1)},
    {SWIG_LUA_CONSTTAB_INT("IMGUI_HAS_DOCK", 1)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_None", ImGuiWindowFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoTitleBar", ImGuiWindowFlags_NoTitleBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoResize", ImGuiWindowFlags_NoResize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoMove", ImGuiWindowFlags_NoMove)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoScrollbar", ImGuiWindowFlags_NoScrollbar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoScrollWithMouse", ImGuiWindowFlags_NoScrollWithMouse)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoCollapse", ImGuiWindowFlags_NoCollapse)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_AlwaysAutoResize", ImGuiWindowFlags_AlwaysAutoResize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoBackground", ImGuiWindowFlags_NoBackground)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoSavedSettings", ImGuiWindowFlags_NoSavedSettings)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoMouseInputs", ImGuiWindowFlags_NoMouseInputs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_MenuBar", ImGuiWindowFlags_MenuBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_HorizontalScrollbar", ImGuiWindowFlags_HorizontalScrollbar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoFocusOnAppearing", ImGuiWindowFlags_NoFocusOnAppearing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoBringToFrontOnFocus", ImGuiWindowFlags_NoBringToFrontOnFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_AlwaysVerticalScrollbar", ImGuiWindowFlags_AlwaysVerticalScrollbar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_AlwaysHorizontalScrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_AlwaysUseWindowPadding", ImGuiWindowFlags_AlwaysUseWindowPadding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoNavInputs", ImGuiWindowFlags_NoNavInputs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoNavFocus", ImGuiWindowFlags_NoNavFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_UnsavedDocument", ImGuiWindowFlags_UnsavedDocument)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoDocking", ImGuiWindowFlags_NoDocking)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoNav", ImGuiWindowFlags_NoNav)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoDecoration", ImGuiWindowFlags_NoDecoration)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NoInputs", ImGuiWindowFlags_NoInputs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_NavFlattened", ImGuiWindowFlags_NavFlattened)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_ChildWindow", ImGuiWindowFlags_ChildWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_Tooltip", ImGuiWindowFlags_Tooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_Popup", ImGuiWindowFlags_Popup)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_Modal", ImGuiWindowFlags_Modal)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_ChildMenu", ImGuiWindowFlags_ChildMenu)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiWindowFlags_DockNodeHost", ImGuiWindowFlags_DockNodeHost)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_None", ImGuiInputTextFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CharsDecimal", ImGuiInputTextFlags_CharsDecimal)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CharsHexadecimal", ImGuiInputTextFlags_CharsHexadecimal)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CharsUppercase", ImGuiInputTextFlags_CharsUppercase)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CharsNoBlank", ImGuiInputTextFlags_CharsNoBlank)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_AutoSelectAll", ImGuiInputTextFlags_AutoSelectAll)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_EnterReturnsTrue", ImGuiInputTextFlags_EnterReturnsTrue)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackCompletion", ImGuiInputTextFlags_CallbackCompletion)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackHistory", ImGuiInputTextFlags_CallbackHistory)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackAlways", ImGuiInputTextFlags_CallbackAlways)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackCharFilter", ImGuiInputTextFlags_CallbackCharFilter)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_AllowTabInput", ImGuiInputTextFlags_AllowTabInput)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CtrlEnterForNewLine", ImGuiInputTextFlags_CtrlEnterForNewLine)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_NoHorizontalScroll", ImGuiInputTextFlags_NoHorizontalScroll)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_AlwaysInsertMode", ImGuiInputTextFlags_AlwaysInsertMode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_ReadOnly", ImGuiInputTextFlags_ReadOnly)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_Password", ImGuiInputTextFlags_Password)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_NoUndoRedo", ImGuiInputTextFlags_NoUndoRedo)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CharsScientific", ImGuiInputTextFlags_CharsScientific)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackResize", ImGuiInputTextFlags_CallbackResize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_CallbackEdit", ImGuiInputTextFlags_CallbackEdit)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_Multiline", ImGuiInputTextFlags_Multiline)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputTextFlags_NoMarkEdited", ImGuiInputTextFlags_NoMarkEdited)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_None", ImGuiTreeNodeFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_Selected", ImGuiTreeNodeFlags_Selected)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_Framed", ImGuiTreeNodeFlags_Framed)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_AllowItemOverlap", ImGuiTreeNodeFlags_AllowItemOverlap)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_NoTreePushOnOpen", ImGuiTreeNodeFlags_NoTreePushOnOpen)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_NoAutoOpenOnLog", ImGuiTreeNodeFlags_NoAutoOpenOnLog)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_DefaultOpen", ImGuiTreeNodeFlags_DefaultOpen)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_OpenOnArrow", ImGuiTreeNodeFlags_OpenOnArrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_Leaf", ImGuiTreeNodeFlags_Leaf)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_Bullet", ImGuiTreeNodeFlags_Bullet)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_FramePadding", ImGuiTreeNodeFlags_FramePadding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_SpanAvailWidth", ImGuiTreeNodeFlags_SpanAvailWidth)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_SpanFullWidth", ImGuiTreeNodeFlags_SpanFullWidth)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_NavLeftJumpsBackHere", ImGuiTreeNodeFlags_NavLeftJumpsBackHere)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_CollapsingHeader", ImGuiTreeNodeFlags_CollapsingHeader)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_None", ImGuiPopupFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_MouseButtonLeft", ImGuiPopupFlags_MouseButtonLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_MouseButtonRight", ImGuiPopupFlags_MouseButtonRight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_MouseButtonMiddle", ImGuiPopupFlags_MouseButtonMiddle)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_MouseButtonMask_", ImGuiPopupFlags_MouseButtonMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_MouseButtonDefault_", ImGuiPopupFlags_MouseButtonDefault_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_NoOpenOverExistingPopup", ImGuiPopupFlags_NoOpenOverExistingPopup)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_NoOpenOverItems", ImGuiPopupFlags_NoOpenOverItems)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_AnyPopupId", ImGuiPopupFlags_AnyPopupId)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_AnyPopupLevel", ImGuiPopupFlags_AnyPopupLevel)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupFlags_AnyPopup", ImGuiPopupFlags_AnyPopup)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_None", ImGuiSelectableFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_DontClosePopups", ImGuiSelectableFlags_DontClosePopups)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_SpanAllColumns", ImGuiSelectableFlags_SpanAllColumns)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_AllowDoubleClick", ImGuiSelectableFlags_AllowDoubleClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_Disabled", ImGuiSelectableFlags_Disabled)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_AllowItemOverlap", ImGuiSelectableFlags_AllowItemOverlap)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_None", ImGuiComboFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_PopupAlignLeft", ImGuiComboFlags_PopupAlignLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_HeightSmall", ImGuiComboFlags_HeightSmall)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_HeightRegular", ImGuiComboFlags_HeightRegular)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_HeightLarge", ImGuiComboFlags_HeightLarge)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_HeightLargest", ImGuiComboFlags_HeightLargest)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_NoArrowButton", ImGuiComboFlags_NoArrowButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_NoPreview", ImGuiComboFlags_NoPreview)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiComboFlags_HeightMask_", ImGuiComboFlags_HeightMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_None", ImGuiTabBarFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_Reorderable", ImGuiTabBarFlags_Reorderable)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_AutoSelectNewTabs", ImGuiTabBarFlags_AutoSelectNewTabs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_TabListPopupButton", ImGuiTabBarFlags_TabListPopupButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_NoCloseWithMiddleMouseButton", ImGuiTabBarFlags_NoCloseWithMiddleMouseButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_NoTabListScrollingButtons", ImGuiTabBarFlags_NoTabListScrollingButtons)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_NoTooltip", ImGuiTabBarFlags_NoTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_FittingPolicyResizeDown", ImGuiTabBarFlags_FittingPolicyResizeDown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_FittingPolicyScroll", ImGuiTabBarFlags_FittingPolicyScroll)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_FittingPolicyMask_", ImGuiTabBarFlags_FittingPolicyMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_FittingPolicyDefault_", ImGuiTabBarFlags_FittingPolicyDefault_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_None", ImGuiTabItemFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_UnsavedDocument", ImGuiTabItemFlags_UnsavedDocument)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_SetSelected", ImGuiTabItemFlags_SetSelected)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_NoCloseWithMiddleMouseButton", ImGuiTabItemFlags_NoCloseWithMiddleMouseButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_NoPushId", ImGuiTabItemFlags_NoPushId)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_NoTooltip", ImGuiTabItemFlags_NoTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_NoReorder", ImGuiTabItemFlags_NoReorder)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_Leading", ImGuiTabItemFlags_Leading)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_Trailing", ImGuiTabItemFlags_Trailing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiFocusedFlags_None", ImGuiFocusedFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiFocusedFlags_ChildWindows", ImGuiFocusedFlags_ChildWindows)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiFocusedFlags_RootWindow", ImGuiFocusedFlags_RootWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiFocusedFlags_AnyWindow", ImGuiFocusedFlags_AnyWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiFocusedFlags_RootAndChildWindows", ImGuiFocusedFlags_RootAndChildWindows)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_None", ImGuiHoveredFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_ChildWindows", ImGuiHoveredFlags_ChildWindows)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_RootWindow", ImGuiHoveredFlags_RootWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_AnyWindow", ImGuiHoveredFlags_AnyWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_AllowWhenBlockedByPopup", ImGuiHoveredFlags_AllowWhenBlockedByPopup)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_AllowWhenBlockedByActiveItem", ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_AllowWhenOverlapped", ImGuiHoveredFlags_AllowWhenOverlapped)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_AllowWhenDisabled", ImGuiHoveredFlags_AllowWhenDisabled)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_RectOnly", ImGuiHoveredFlags_RectOnly)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiHoveredFlags_RootAndChildWindows", ImGuiHoveredFlags_RootAndChildWindows)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_None", ImGuiDockNodeFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_KeepAliveOnly", ImGuiDockNodeFlags_KeepAliveOnly)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDockingInCentralNode", ImGuiDockNodeFlags_NoDockingInCentralNode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_PassthruCentralNode", ImGuiDockNodeFlags_PassthruCentralNode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoSplit", ImGuiDockNodeFlags_NoSplit)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoResize", ImGuiDockNodeFlags_NoResize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_AutoHideTabBar", ImGuiDockNodeFlags_AutoHideTabBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_None", ImGuiDragDropFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceNoPreviewTooltip", ImGuiDragDropFlags_SourceNoPreviewTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceNoDisableHover", ImGuiDragDropFlags_SourceNoDisableHover)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceNoHoldToOpenOthers", ImGuiDragDropFlags_SourceNoHoldToOpenOthers)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceAllowNullID", ImGuiDragDropFlags_SourceAllowNullID)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceExtern", ImGuiDragDropFlags_SourceExtern)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_SourceAutoExpirePayload", ImGuiDragDropFlags_SourceAutoExpirePayload)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_AcceptBeforeDelivery", ImGuiDragDropFlags_AcceptBeforeDelivery)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_AcceptNoDrawDefaultRect", ImGuiDragDropFlags_AcceptNoDrawDefaultRect)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_AcceptNoPreviewTooltip", ImGuiDragDropFlags_AcceptNoPreviewTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDragDropFlags_AcceptPeekOnly", ImGuiDragDropFlags_AcceptPeekOnly)},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_PAYLOAD_TYPE_COLOR_3F", "_COL3F")},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_PAYLOAD_TYPE_COLOR_4F", "_COL4F")},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_S8", ImGuiDataType_S8)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_U8", ImGuiDataType_U8)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_S16", ImGuiDataType_S16)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_U16", ImGuiDataType_U16)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_S32", ImGuiDataType_S32)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_U32", ImGuiDataType_U32)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_S64", ImGuiDataType_S64)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_U64", ImGuiDataType_U64)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_Float", ImGuiDataType_Float)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_Double", ImGuiDataType_Double)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_COUNT", ImGuiDataType_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_None", ImGuiDir_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_Left", ImGuiDir_Left)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_Right", ImGuiDir_Right)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_Up", ImGuiDir_Up)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_Down", ImGuiDir_Down)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDir_COUNT", ImGuiDir_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Tab", ImGuiKey_Tab)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_LeftArrow", ImGuiKey_LeftArrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_RightArrow", ImGuiKey_RightArrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_UpArrow", ImGuiKey_UpArrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_DownArrow", ImGuiKey_DownArrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_PageUp", ImGuiKey_PageUp)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_PageDown", ImGuiKey_PageDown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Home", ImGuiKey_Home)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_End", ImGuiKey_End)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Insert", ImGuiKey_Insert)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Delete", ImGuiKey_Delete)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Backspace", ImGuiKey_Backspace)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Space", ImGuiKey_Space)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Enter", ImGuiKey_Enter)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Escape", ImGuiKey_Escape)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_KeyPadEnter", ImGuiKey_KeyPadEnter)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_A", ImGuiKey_A)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_C", ImGuiKey_C)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_V", ImGuiKey_V)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_X", ImGuiKey_X)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Y", ImGuiKey_Y)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_Z", ImGuiKey_Z)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKey_COUNT", ImGuiKey_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKeyModFlags_None", ImGuiKeyModFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKeyModFlags_Ctrl", ImGuiKeyModFlags_Ctrl)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKeyModFlags_Shift", ImGuiKeyModFlags_Shift)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKeyModFlags_Alt", ImGuiKeyModFlags_Alt)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiKeyModFlags_Super", ImGuiKeyModFlags_Super)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_Activate", ImGuiNavInput_Activate)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_Cancel", ImGuiNavInput_Cancel)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_Input", ImGuiNavInput_Input)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_Menu", ImGuiNavInput_Menu)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_DpadLeft", ImGuiNavInput_DpadLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_DpadRight", ImGuiNavInput_DpadRight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_DpadUp", ImGuiNavInput_DpadUp)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_DpadDown", ImGuiNavInput_DpadDown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_LStickLeft", ImGuiNavInput_LStickLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_LStickRight", ImGuiNavInput_LStickRight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_LStickUp", ImGuiNavInput_LStickUp)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_LStickDown", ImGuiNavInput_LStickDown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_FocusPrev", ImGuiNavInput_FocusPrev)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_FocusNext", ImGuiNavInput_FocusNext)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_TweakSlow", ImGuiNavInput_TweakSlow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_TweakFast", ImGuiNavInput_TweakFast)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_KeyMenu_", ImGuiNavInput_KeyMenu_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_KeyLeft_", ImGuiNavInput_KeyLeft_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_KeyRight_", ImGuiNavInput_KeyRight_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_KeyUp_", ImGuiNavInput_KeyUp_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_KeyDown_", ImGuiNavInput_KeyDown_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_COUNT", ImGuiNavInput_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavInput_InternalStart_", ImGuiNavInput_InternalStart_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_None", ImGuiConfigFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NavEnableKeyboard", ImGuiConfigFlags_NavEnableKeyboard)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NavEnableGamepad", ImGuiConfigFlags_NavEnableGamepad)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NavEnableSetMousePos", ImGuiConfigFlags_NavEnableSetMousePos)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NavNoCaptureKeyboard", ImGuiConfigFlags_NavNoCaptureKeyboard)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NoMouse", ImGuiConfigFlags_NoMouse)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_NoMouseCursorChange", ImGuiConfigFlags_NoMouseCursorChange)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_DockingEnable", ImGuiConfigFlags_DockingEnable)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_ViewportsEnable", ImGuiConfigFlags_ViewportsEnable)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_DpiEnableScaleViewports", ImGuiConfigFlags_DpiEnableScaleViewports)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_DpiEnableScaleFonts", ImGuiConfigFlags_DpiEnableScaleFonts)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_IsSRGB", ImGuiConfigFlags_IsSRGB)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiConfigFlags_IsTouchScreen", ImGuiConfigFlags_IsTouchScreen)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_None", ImGuiBackendFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_HasGamepad", ImGuiBackendFlags_HasGamepad)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_HasMouseCursors", ImGuiBackendFlags_HasMouseCursors)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_HasSetMousePos", ImGuiBackendFlags_HasSetMousePos)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_RendererHasVtxOffset", ImGuiBackendFlags_RendererHasVtxOffset)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_PlatformHasViewports", ImGuiBackendFlags_PlatformHasViewports)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_HasMouseHoveredViewport", ImGuiBackendFlags_HasMouseHoveredViewport)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiBackendFlags_RendererHasViewports", ImGuiBackendFlags_RendererHasViewports)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Text", ImGuiCol_Text)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TextDisabled", ImGuiCol_TextDisabled)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_WindowBg", ImGuiCol_WindowBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ChildBg", ImGuiCol_ChildBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_PopupBg", ImGuiCol_PopupBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Border", ImGuiCol_Border)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_BorderShadow", ImGuiCol_BorderShadow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_FrameBg", ImGuiCol_FrameBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_FrameBgHovered", ImGuiCol_FrameBgHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_FrameBgActive", ImGuiCol_FrameBgActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TitleBg", ImGuiCol_TitleBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TitleBgActive", ImGuiCol_TitleBgActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TitleBgCollapsed", ImGuiCol_TitleBgCollapsed)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_MenuBarBg", ImGuiCol_MenuBarBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ScrollbarBg", ImGuiCol_ScrollbarBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ScrollbarGrab", ImGuiCol_ScrollbarGrab)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ScrollbarGrabHovered", ImGuiCol_ScrollbarGrabHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ScrollbarGrabActive", ImGuiCol_ScrollbarGrabActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_CheckMark", ImGuiCol_CheckMark)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_SliderGrab", ImGuiCol_SliderGrab)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_SliderGrabActive", ImGuiCol_SliderGrabActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Button", ImGuiCol_Button)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ButtonHovered", ImGuiCol_ButtonHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ButtonActive", ImGuiCol_ButtonActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Header", ImGuiCol_Header)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_HeaderHovered", ImGuiCol_HeaderHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_HeaderActive", ImGuiCol_HeaderActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Separator", ImGuiCol_Separator)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_SeparatorHovered", ImGuiCol_SeparatorHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_SeparatorActive", ImGuiCol_SeparatorActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ResizeGrip", ImGuiCol_ResizeGrip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ResizeGripHovered", ImGuiCol_ResizeGripHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ResizeGripActive", ImGuiCol_ResizeGripActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_Tab", ImGuiCol_Tab)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TabHovered", ImGuiCol_TabHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TabActive", ImGuiCol_TabActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TabUnfocused", ImGuiCol_TabUnfocused)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TabUnfocusedActive", ImGuiCol_TabUnfocusedActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_DockingPreview", ImGuiCol_DockingPreview)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_DockingEmptyBg", ImGuiCol_DockingEmptyBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_PlotLines", ImGuiCol_PlotLines)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_PlotLinesHovered", ImGuiCol_PlotLinesHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_PlotHistogram", ImGuiCol_PlotHistogram)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_PlotHistogramHovered", ImGuiCol_PlotHistogramHovered)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_TextSelectedBg", ImGuiCol_TextSelectedBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_DragDropTarget", ImGuiCol_DragDropTarget)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_NavHighlight", ImGuiCol_NavHighlight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_NavWindowingHighlight", ImGuiCol_NavWindowingHighlight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_NavWindowingDimBg", ImGuiCol_NavWindowingDimBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ModalWindowDimBg", ImGuiCol_ModalWindowDimBg)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_COUNT", ImGuiCol_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCol_ModalWindowDarkening", ImGuiCol_ModalWindowDarkening)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_Alpha", ImGuiStyleVar_Alpha)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_WindowPadding", ImGuiStyleVar_WindowPadding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_WindowRounding", ImGuiStyleVar_WindowRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_WindowBorderSize", ImGuiStyleVar_WindowBorderSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_WindowMinSize", ImGuiStyleVar_WindowMinSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_WindowTitleAlign", ImGuiStyleVar_WindowTitleAlign)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ChildRounding", ImGuiStyleVar_ChildRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ChildBorderSize", ImGuiStyleVar_ChildBorderSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_PopupRounding", ImGuiStyleVar_PopupRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_PopupBorderSize", ImGuiStyleVar_PopupBorderSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_FramePadding", ImGuiStyleVar_FramePadding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_FrameRounding", ImGuiStyleVar_FrameRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_FrameBorderSize", ImGuiStyleVar_FrameBorderSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ItemSpacing", ImGuiStyleVar_ItemSpacing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ItemInnerSpacing", ImGuiStyleVar_ItemInnerSpacing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_IndentSpacing", ImGuiStyleVar_IndentSpacing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ScrollbarSize", ImGuiStyleVar_ScrollbarSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ScrollbarRounding", ImGuiStyleVar_ScrollbarRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_GrabMinSize", ImGuiStyleVar_GrabMinSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_GrabRounding", ImGuiStyleVar_GrabRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_TabRounding", ImGuiStyleVar_TabRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_ButtonTextAlign", ImGuiStyleVar_ButtonTextAlign)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_SelectableTextAlign", ImGuiStyleVar_SelectableTextAlign)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiStyleVar_COUNT", ImGuiStyleVar_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_None", ImGuiButtonFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_MouseButtonLeft", ImGuiButtonFlags_MouseButtonLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_MouseButtonRight", ImGuiButtonFlags_MouseButtonRight)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_MouseButtonMiddle", ImGuiButtonFlags_MouseButtonMiddle)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_MouseButtonMask_", ImGuiButtonFlags_MouseButtonMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_MouseButtonDefault_", ImGuiButtonFlags_MouseButtonDefault_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_None", ImGuiColorEditFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoAlpha", ImGuiColorEditFlags_NoAlpha)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoPicker", ImGuiColorEditFlags_NoPicker)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoOptions", ImGuiColorEditFlags_NoOptions)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoSmallPreview", ImGuiColorEditFlags_NoSmallPreview)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoInputs", ImGuiColorEditFlags_NoInputs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoTooltip", ImGuiColorEditFlags_NoTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoLabel", ImGuiColorEditFlags_NoLabel)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoSidePreview", ImGuiColorEditFlags_NoSidePreview)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoDragDrop", ImGuiColorEditFlags_NoDragDrop)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_NoBorder", ImGuiColorEditFlags_NoBorder)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_AlphaBar", ImGuiColorEditFlags_AlphaBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_AlphaPreview", ImGuiColorEditFlags_AlphaPreview)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_AlphaPreviewHalf", ImGuiColorEditFlags_AlphaPreviewHalf)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_HDR", ImGuiColorEditFlags_HDR)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_DisplayRGB", ImGuiColorEditFlags_DisplayRGB)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_DisplayHSV", ImGuiColorEditFlags_DisplayHSV)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_DisplayHex", ImGuiColorEditFlags_DisplayHex)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_Uint8", ImGuiColorEditFlags_Uint8)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_Float", ImGuiColorEditFlags_Float)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_PickerHueBar", ImGuiColorEditFlags_PickerHueBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_PickerHueWheel", ImGuiColorEditFlags_PickerHueWheel)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_InputRGB", ImGuiColorEditFlags_InputRGB)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_InputHSV", ImGuiColorEditFlags_InputHSV)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags__OptionsDefault", ImGuiColorEditFlags__OptionsDefault)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags__DisplayMask", ImGuiColorEditFlags__DisplayMask)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags__DataTypeMask", ImGuiColorEditFlags__DataTypeMask)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags__PickerMask", ImGuiColorEditFlags__PickerMask)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags__InputMask", ImGuiColorEditFlags__InputMask)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_RGB", ImGuiColorEditFlags_RGB)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_HSV", ImGuiColorEditFlags_HSV)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColorEditFlags_HEX", ImGuiColorEditFlags_HEX)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_None", ImGuiSliderFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_AlwaysClamp", ImGuiSliderFlags_AlwaysClamp)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_Logarithmic", ImGuiSliderFlags_Logarithmic)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_NoRoundToFormat", ImGuiSliderFlags_NoRoundToFormat)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_NoInput", ImGuiSliderFlags_NoInput)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_InvalidMask_", ImGuiSliderFlags_InvalidMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_ClampOnInput", ImGuiSliderFlags_ClampOnInput)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseButton_Left", ImGuiMouseButton_Left)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseButton_Right", ImGuiMouseButton_Right)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseButton_Middle", ImGuiMouseButton_Middle)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseButton_COUNT", ImGuiMouseButton_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_None", ImGuiMouseCursor_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_Arrow", ImGuiMouseCursor_Arrow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_TextInput", ImGuiMouseCursor_TextInput)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_ResizeAll", ImGuiMouseCursor_ResizeAll)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_ResizeNS", ImGuiMouseCursor_ResizeNS)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_ResizeEW", ImGuiMouseCursor_ResizeEW)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_ResizeNESW", ImGuiMouseCursor_ResizeNESW)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_ResizeNWSE", ImGuiMouseCursor_ResizeNWSE)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_Hand", ImGuiMouseCursor_Hand)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_NotAllowed", ImGuiMouseCursor_NotAllowed)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiMouseCursor_COUNT", ImGuiMouseCursor_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCond_None", ImGuiCond_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCond_Always", ImGuiCond_Always)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCond_Once", ImGuiCond_Once)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCond_FirstUseEver", ImGuiCond_FirstUseEver)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiCond_Appearing", ImGuiCond_Appearing)},
    {SWIG_LUA_CONSTTAB_INT("IM_UNICODE_CODEPOINT_INVALID", 0xFFFD)},
    {SWIG_LUA_CONSTTAB_INT("IM_UNICODE_CODEPOINT_MAX", 0xFFFF)},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_R_SHIFT", 0)},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_G_SHIFT", 8)},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_B_SHIFT", 16)},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_A_SHIFT", 24)},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_A_MASK", 0xFF000000)},
    {SWIG_LUA_CONSTTAB_INT("IM_DRAWLIST_TEX_LINES_WIDTH_MAX", (63))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_None", ImDrawCornerFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_TopLeft", ImDrawCornerFlags_TopLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_TopRight", ImDrawCornerFlags_TopRight)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_BotLeft", ImDrawCornerFlags_BotLeft)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_BotRight", ImDrawCornerFlags_BotRight)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_Top", ImDrawCornerFlags_Top)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_Bot", ImDrawCornerFlags_Bot)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_Left", ImDrawCornerFlags_Left)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_Right", ImDrawCornerFlags_Right)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawCornerFlags_All", ImDrawCornerFlags_All)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_None", ImDrawListFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedLines", ImDrawListFlags_AntiAliasedLines)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedLinesUseTex", ImDrawListFlags_AntiAliasedLinesUseTex)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedFill", ImDrawListFlags_AntiAliasedFill)},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AllowVtxOffset", ImDrawListFlags_AllowVtxOffset)},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_None", ImFontAtlasFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoPowerOfTwoHeight", ImFontAtlasFlags_NoPowerOfTwoHeight)},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoMouseCursors", ImFontAtlasFlags_NoMouseCursors)},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoBakedLines", ImFontAtlasFlags_NoBakedLines)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_None", ImGuiViewportFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoDecoration", ImGuiViewportFlags_NoDecoration)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoTaskBarIcon", ImGuiViewportFlags_NoTaskBarIcon)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoFocusOnAppearing", ImGuiViewportFlags_NoFocusOnAppearing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoFocusOnClick", ImGuiViewportFlags_NoFocusOnClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoInputs", ImGuiViewportFlags_NoInputs)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoRendererClear", ImGuiViewportFlags_NoRendererClear)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_TopMost", ImGuiViewportFlags_TopMost)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_Minimized", ImGuiViewportFlags_Minimized)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_NoAutoMerge", ImGuiViewportFlags_NoAutoMerge)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiViewportFlags_CanHostOtherWindows", ImGuiViewportFlags_CanHostOtherWindows)},
    {SWIG_LUA_CONSTTAB_FLOAT("STB_TEXTEDIT_GETWIDTH_NEWLINE", (-1.0))},
    {SWIG_LUA_CONSTTAB_INT("STB_TEXTEDIT_UNDOSTATECOUNT", 99)},
    {SWIG_LUA_CONSTTAB_INT("STB_TEXTEDIT_UNDOCHARCOUNT", 999)},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_PAYLOAD_TYPE_WINDOW", "_IMWINDOW")},
    {SWIG_LUA_CONSTTAB_FLOAT("IM_PI", 3.14159265358979323846)},
    {SWIG_LUA_CONSTTAB_STRING("IM_NEWLINE", "\n")},
    {SWIG_LUA_CONSTTAB_INT("IM_TABSIZE", (4))},
    {SWIG_LUA_CONSTTAB_INT("IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN", 12)},
    {SWIG_LUA_CONSTTAB_INT("IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX", 512)},
    {SWIG_LUA_CONSTTAB_INT("IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER", 1)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_None", ImGuiItemFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_NoTabStop", ImGuiItemFlags_NoTabStop)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_ButtonRepeat", ImGuiItemFlags_ButtonRepeat)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_Disabled", ImGuiItemFlags_Disabled)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_NoNav", ImGuiItemFlags_NoNav)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_NoNavDefaultFocus", ImGuiItemFlags_NoNavDefaultFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_SelectableDontClosePopup", ImGuiItemFlags_SelectableDontClosePopup)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_MixedValue", ImGuiItemFlags_MixedValue)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_ReadOnly", ImGuiItemFlags_ReadOnly)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemFlags_Default_", ImGuiItemFlags_Default_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_None", ImGuiItemStatusFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_HoveredRect", ImGuiItemStatusFlags_HoveredRect)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_HasDisplayRect", ImGuiItemStatusFlags_HasDisplayRect)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_Edited", ImGuiItemStatusFlags_Edited)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_ToggledSelection", ImGuiItemStatusFlags_ToggledSelection)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_ToggledOpen", ImGuiItemStatusFlags_ToggledOpen)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_HasDeactivated", ImGuiItemStatusFlags_HasDeactivated)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiItemStatusFlags_Deactivated", ImGuiItemStatusFlags_Deactivated)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnClick", ImGuiButtonFlags_PressedOnClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnClickRelease", ImGuiButtonFlags_PressedOnClickRelease)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnClickReleaseAnywhere", ImGuiButtonFlags_PressedOnClickReleaseAnywhere)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnRelease", ImGuiButtonFlags_PressedOnRelease)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnDoubleClick", ImGuiButtonFlags_PressedOnDoubleClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnDragDropHold", ImGuiButtonFlags_PressedOnDragDropHold)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_Repeat", ImGuiButtonFlags_Repeat)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_FlattenChildren", ImGuiButtonFlags_FlattenChildren)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_AllowItemOverlap", ImGuiButtonFlags_AllowItemOverlap)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_DontClosePopups", ImGuiButtonFlags_DontClosePopups)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_Disabled", ImGuiButtonFlags_Disabled)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_AlignTextBaseLine", ImGuiButtonFlags_AlignTextBaseLine)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_NoKeyModifiers", ImGuiButtonFlags_NoKeyModifiers)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_NoHoldingActiveId", ImGuiButtonFlags_NoHoldingActiveId)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_NoNavFocus", ImGuiButtonFlags_NoNavFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_NoHoveredOnFocus", ImGuiButtonFlags_NoHoveredOnFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnMask_", ImGuiButtonFlags_PressedOnMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiButtonFlags_PressedOnDefault_", ImGuiButtonFlags_PressedOnDefault_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_Vertical", ImGuiSliderFlags_Vertical)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSliderFlags_ReadOnly", ImGuiSliderFlags_ReadOnly)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_NoHoldingActiveID", ImGuiSelectableFlags_NoHoldingActiveID)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_SelectOnClick", ImGuiSelectableFlags_SelectOnClick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_SelectOnRelease", ImGuiSelectableFlags_SelectOnRelease)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_SpanAvailWidth", ImGuiSelectableFlags_SpanAvailWidth)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_DrawHoveredWhenHeld", ImGuiSelectableFlags_DrawHoveredWhenHeld)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_SetNavIdOnHover", ImGuiSelectableFlags_SetNavIdOnHover)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSelectableFlags_NoPadWithHalfSpacing", ImGuiSelectableFlags_NoPadWithHalfSpacing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTreeNodeFlags_ClipLabelForTrailingButton", ImGuiTreeNodeFlags_ClipLabelForTrailingButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSeparatorFlags_None", ImGuiSeparatorFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSeparatorFlags_Horizontal", ImGuiSeparatorFlags_Horizontal)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSeparatorFlags_Vertical", ImGuiSeparatorFlags_Vertical)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiSeparatorFlags_SpanAllColumns", ImGuiSeparatorFlags_SpanAllColumns)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTextFlags_None", ImGuiTextFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTextFlags_NoWidthForLargeClippedText", ImGuiTextFlags_NoWidthForLargeClippedText)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTooltipFlags_None", ImGuiTooltipFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTooltipFlags_OverridePreviousTooltip", ImGuiTooltipFlags_OverridePreviousTooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLayoutType_Horizontal", ImGuiLayoutType_Horizontal)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLayoutType_Vertical", ImGuiLayoutType_Vertical)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLogType_None", ImGuiLogType_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLogType_TTY", ImGuiLogType_TTY)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLogType_File", ImGuiLogType_File)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLogType_Buffer", ImGuiLogType_Buffer)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiLogType_Clipboard", ImGuiLogType_Clipboard)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiAxis_None", ImGuiAxis_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiAxis_X", ImGuiAxis_X)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiAxis_Y", ImGuiAxis_Y)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPlotType_Lines", ImGuiPlotType_Lines)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPlotType_Histogram", ImGuiPlotType_Histogram)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_None", ImGuiInputSource_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_Mouse", ImGuiInputSource_Mouse)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_Nav", ImGuiInputSource_Nav)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_NavKeyboard", ImGuiInputSource_NavKeyboard)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_NavGamepad", ImGuiInputSource_NavGamepad)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputSource_COUNT", ImGuiInputSource_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_Down", ImGuiInputReadMode_Down)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_Pressed", ImGuiInputReadMode_Pressed)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_Released", ImGuiInputReadMode_Released)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_Repeat", ImGuiInputReadMode_Repeat)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_RepeatSlow", ImGuiInputReadMode_RepeatSlow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiInputReadMode_RepeatFast", ImGuiInputReadMode_RepeatFast)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavHighlightFlags_None", ImGuiNavHighlightFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavHighlightFlags_TypeDefault", ImGuiNavHighlightFlags_TypeDefault)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavHighlightFlags_TypeThin", ImGuiNavHighlightFlags_TypeThin)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavHighlightFlags_AlwaysDraw", ImGuiNavHighlightFlags_AlwaysDraw)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavHighlightFlags_NoRounding", ImGuiNavHighlightFlags_NoRounding)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavDirSourceFlags_None", ImGuiNavDirSourceFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavDirSourceFlags_Keyboard", ImGuiNavDirSourceFlags_Keyboard)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavDirSourceFlags_PadDPad", ImGuiNavDirSourceFlags_PadDPad)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavDirSourceFlags_PadLStick", ImGuiNavDirSourceFlags_PadLStick)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_None", ImGuiNavMoveFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_LoopX", ImGuiNavMoveFlags_LoopX)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_LoopY", ImGuiNavMoveFlags_LoopY)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_WrapX", ImGuiNavMoveFlags_WrapX)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_WrapY", ImGuiNavMoveFlags_WrapY)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_AllowCurrentNavId", ImGuiNavMoveFlags_AllowCurrentNavId)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_AlsoScoreVisibleSet", ImGuiNavMoveFlags_AlsoScoreVisibleSet)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavMoveFlags_ScrollToEdge", ImGuiNavMoveFlags_ScrollToEdge)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavForward_None", ImGuiNavForward_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavForward_ForwardQueued", ImGuiNavForward_ForwardQueued)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavForward_ForwardActive", ImGuiNavForward_ForwardActive)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavLayer_Main", ImGuiNavLayer_Main)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavLayer_Menu", ImGuiNavLayer_Menu)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNavLayer_COUNT", ImGuiNavLayer_COUNT)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupPositionPolicy_Default", ImGuiPopupPositionPolicy_Default)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupPositionPolicy_ComboBox", ImGuiPopupPositionPolicy_ComboBox)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiPopupPositionPolicy_Tooltip", ImGuiPopupPositionPolicy_Tooltip)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_String", ImGuiDataType_String)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_Pointer", ImGuiDataType_Pointer)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataType_ID", ImGuiDataType_ID)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_None", ImGuiNextWindowDataFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasPos", ImGuiNextWindowDataFlags_HasPos)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasSize", ImGuiNextWindowDataFlags_HasSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasContentSize", ImGuiNextWindowDataFlags_HasContentSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasCollapsed", ImGuiNextWindowDataFlags_HasCollapsed)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasSizeConstraint", ImGuiNextWindowDataFlags_HasSizeConstraint)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasFocus", ImGuiNextWindowDataFlags_HasFocus)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasBgAlpha", ImGuiNextWindowDataFlags_HasBgAlpha)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasScroll", ImGuiNextWindowDataFlags_HasScroll)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasViewport", ImGuiNextWindowDataFlags_HasViewport)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasDock", ImGuiNextWindowDataFlags_HasDock)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextWindowDataFlags_HasWindowClass", ImGuiNextWindowDataFlags_HasWindowClass)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextItemDataFlags_None", ImGuiNextItemDataFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextItemDataFlags_HasWidth", ImGuiNextItemDataFlags_HasWidth)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiNextItemDataFlags_HasOpen", ImGuiNextItemDataFlags_HasOpen)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_None", ImGuiColumnsFlags_None)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_NoBorder", ImGuiColumnsFlags_NoBorder)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_NoResize", ImGuiColumnsFlags_NoResize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_NoPreserveWidths", ImGuiColumnsFlags_NoPreserveWidths)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_NoForceWithinWindow", ImGuiColumnsFlags_NoForceWithinWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiColumnsFlags_GrowParentContentsSize", ImGuiColumnsFlags_GrowParentContentsSize)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_DockSpace", ImGuiDockNodeFlags_DockSpace)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_CentralNode", ImGuiDockNodeFlags_CentralNode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoTabBar", ImGuiDockNodeFlags_NoTabBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_HiddenTabBar", ImGuiDockNodeFlags_HiddenTabBar)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoWindowMenuButton", ImGuiDockNodeFlags_NoWindowMenuButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoCloseButton", ImGuiDockNodeFlags_NoCloseButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDocking", ImGuiDockNodeFlags_NoDocking)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDockingSplitMe", ImGuiDockNodeFlags_NoDockingSplitMe)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDockingSplitOther", ImGuiDockNodeFlags_NoDockingSplitOther)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDockingOverMe", ImGuiDockNodeFlags_NoDockingOverMe)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoDockingOverOther", ImGuiDockNodeFlags_NoDockingOverOther)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoResizeX", ImGuiDockNodeFlags_NoResizeX)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoResizeY", ImGuiDockNodeFlags_NoResizeY)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_SharedFlagsInheritMask_", ImGuiDockNodeFlags_SharedFlagsInheritMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_NoResizeFlagsMask_", ImGuiDockNodeFlags_NoResizeFlagsMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_LocalFlagsMask_", ImGuiDockNodeFlags_LocalFlagsMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_LocalFlagsTransferMask_", ImGuiDockNodeFlags_LocalFlagsTransferMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeFlags_SavedFlagsMask_", ImGuiDockNodeFlags_SavedFlagsMask_)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataAuthority_Auto", ImGuiDataAuthority_Auto)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataAuthority_DockNode", ImGuiDataAuthority_DockNode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDataAuthority_Window", ImGuiDataAuthority_Window)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeState_Unknown", ImGuiDockNodeState_Unknown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow", ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing", ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiDockNodeState_HostWindowVisible", ImGuiDockNodeState_HostWindowVisible)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_NewFramePre", ImGuiContextHookType_NewFramePre)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_NewFramePost", ImGuiContextHookType_NewFramePost)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_EndFramePre", ImGuiContextHookType_EndFramePre)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_EndFramePost", ImGuiContextHookType_EndFramePost)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_RenderPre", ImGuiContextHookType_RenderPre)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_RenderPost", ImGuiContextHookType_RenderPost)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiContextHookType_Shutdown", ImGuiContextHookType_Shutdown)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_DockNode", ImGuiTabBarFlags_DockNode)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_IsFocused", ImGuiTabBarFlags_IsFocused)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabBarFlags_SaveSettings", ImGuiTabBarFlags_SaveSettings)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_NoCloseButton", ImGuiTabItemFlags_NoCloseButton)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_Button", ImGuiTabItemFlags_Button)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_Unsorted", ImGuiTabItemFlags_Unsorted)},
    {SWIG_LUA_CONSTTAB_INT("ImGuiTabItemFlags_Preview", ImGuiTabItemFlags_Preview)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "CreateContext", _wrap_CreateContext},
    { "DestroyContext", _wrap_DestroyContext},
    { "GetCurrentContext", _wrap_GetCurrentContext},
    { "SetCurrentContext", _wrap_SetCurrentContext},
    { "GetIO", _wrap_GetIO},
    { "GetStyle", _wrap_GetStyle},
    { "NewFrame", _wrap_NewFrame},
    { "EndFrame", _wrap_EndFrame},
    { "Render", _wrap_Render},
    { "GetDrawData", _wrap_GetDrawData},
    { "ShowDemoWindow", _wrap_ShowDemoWindow},
    { "ShowAboutWindow", _wrap_ShowAboutWindow},
    { "ShowMetricsWindow", _wrap_ShowMetricsWindow},
    { "ShowStyleEditor", _wrap_ShowStyleEditor},
    { "ShowStyleSelector", _wrap_ShowStyleSelector},
    { "ShowFontSelector", _wrap_ShowFontSelector},
    { "ShowUserGuide", _wrap_ShowUserGuide},
    { "GetVersion", _wrap_GetVersion},
    { "StyleColorsDark", _wrap_StyleColorsDark},
    { "StyleColorsClassic", _wrap_StyleColorsClassic},
    { "StyleColorsLight", _wrap_StyleColorsLight},
    { "Begin", _wrap_Begin},
    { "End", _wrap_End},
    { "BeginChild", _wrap_BeginChild},
    { "EndChild", _wrap_EndChild},
    { "IsWindowAppearing", _wrap_IsWindowAppearing},
    { "IsWindowCollapsed", _wrap_IsWindowCollapsed},
    { "IsWindowFocused", _wrap_IsWindowFocused},
    { "IsWindowHovered", _wrap_IsWindowHovered},
    { "GetWindowDrawList", _wrap_GetWindowDrawList},
    { "GetWindowDpiScale", _wrap_GetWindowDpiScale},
    { "GetWindowViewport", _wrap_GetWindowViewport},
    { "GetWindowPos", _wrap_GetWindowPos},
    { "GetWindowSize", _wrap_GetWindowSize},
    { "GetWindowWidth", _wrap_GetWindowWidth},
    { "GetWindowHeight", _wrap_GetWindowHeight},
    { "SetNextWindowPos", _wrap_SetNextWindowPos},
    { "SetNextWindowSize", _wrap_SetNextWindowSize},
    { "SetNextWindowSizeConstraints", _wrap_SetNextWindowSizeConstraints},
    { "SetNextWindowContentSize", _wrap_SetNextWindowContentSize},
    { "SetNextWindowCollapsed", _wrap_SetNextWindowCollapsed},
    { "SetNextWindowFocus", _wrap_SetNextWindowFocus},
    { "SetNextWindowBgAlpha", _wrap_SetNextWindowBgAlpha},
    { "SetNextWindowViewport", _wrap_SetNextWindowViewport},
    { "SetWindowFontScale", _wrap_SetWindowFontScale},
    { "SetWindowFocus", _wrap_SetWindowFocus},
    { "GetContentRegionMax", _wrap_GetContentRegionMax},
    { "GetContentRegionAvail", _wrap_GetContentRegionAvail},
    { "GetWindowContentRegionMin", _wrap_GetWindowContentRegionMin},
    { "GetWindowContentRegionMax", _wrap_GetWindowContentRegionMax},
    { "GetWindowContentRegionWidth", _wrap_GetWindowContentRegionWidth},
    { "GetScrollX", _wrap_GetScrollX},
    { "GetScrollY", _wrap_GetScrollY},
    { "GetScrollMaxX", _wrap_GetScrollMaxX},
    { "GetScrollMaxY", _wrap_GetScrollMaxY},
    { "SetScrollHereX", _wrap_SetScrollHereX},
    { "SetScrollHereY", _wrap_SetScrollHereY},
    { "PushFont", _wrap_PushFont},
    { "PopFont", _wrap_PopFont},
    { "PushStyleColor", _wrap_PushStyleColor},
    { "PopStyleColor", _wrap_PopStyleColor},
    { "PushStyleVar", _wrap_PushStyleVar},
    { "PopStyleVar", _wrap_PopStyleVar},
    { "GetStyleColorVec4", _wrap_GetStyleColorVec4},
    { "GetFont", _wrap_GetFont},
    { "GetFontSize", _wrap_GetFontSize},
    { "GetFontTexUvWhitePixel", _wrap_GetFontTexUvWhitePixel},
    { "GetColorU32", _wrap_GetColorU32},
    { "PushItemWidth", _wrap_PushItemWidth},
    { "PopItemWidth", _wrap_PopItemWidth},
    { "SetNextItemWidth", _wrap_SetNextItemWidth},
    { "CalcItemWidth", _wrap_CalcItemWidth},
    { "PushTextWrapPos", _wrap_PushTextWrapPos},
    { "PopTextWrapPos", _wrap_PopTextWrapPos},
    { "PushAllowKeyboardFocus", _wrap_PushAllowKeyboardFocus},
    { "PopAllowKeyboardFocus", _wrap_PopAllowKeyboardFocus},
    { "PushButtonRepeat", _wrap_PushButtonRepeat},
    { "PopButtonRepeat", _wrap_PopButtonRepeat},
    { "Separator", _wrap_Separator},
    { "SameLine", _wrap_SameLine},
    { "NewLine", _wrap_NewLine},
    { "Spacing", _wrap_Spacing},
    { "Dummy", _wrap_Dummy},
    { "Indent", _wrap_Indent},
    { "Unindent", _wrap_Unindent},
    { "BeginGroup", _wrap_BeginGroup},
    { "EndGroup", _wrap_EndGroup},
    { "GetCursorPos", _wrap_GetCursorPos},
    { "GetCursorPosX", _wrap_GetCursorPosX},
    { "GetCursorPosY", _wrap_GetCursorPosY},
    { "SetCursorPos", _wrap_SetCursorPos},
    { "SetCursorPosX", _wrap_SetCursorPosX},
    { "SetCursorPosY", _wrap_SetCursorPosY},
    { "GetCursorStartPos", _wrap_GetCursorStartPos},
    { "GetCursorScreenPos", _wrap_GetCursorScreenPos},
    { "SetCursorScreenPos", _wrap_SetCursorScreenPos},
    { "AlignTextToFramePadding", _wrap_AlignTextToFramePadding},
    { "GetTextLineHeight", _wrap_GetTextLineHeight},
    { "GetTextLineHeightWithSpacing", _wrap_GetTextLineHeightWithSpacing},
    { "GetFrameHeight", _wrap_GetFrameHeight},
    { "GetFrameHeightWithSpacing", _wrap_GetFrameHeightWithSpacing},
    { "PushID", _wrap_PushID},
    { "PopID", _wrap_PopID},
    { "GetID", _wrap_GetID},
    { "TextUnformatted", _wrap_TextUnformatted},
    { "Text", _wrap_Text},
    { "TextV", _wrap_TextV},
    { "TextColored", _wrap_TextColored},
    { "TextColoredV", _wrap_TextColoredV},
    { "TextDisabled", _wrap_TextDisabled},
    { "TextDisabledV", _wrap_TextDisabledV},
    { "TextWrapped", _wrap_TextWrapped},
    { "TextWrappedV", _wrap_TextWrappedV},
    { "LabelText", _wrap_LabelText},
    { "LabelTextV", _wrap_LabelTextV},
    { "BulletText", _wrap_BulletText},
    { "BulletTextV", _wrap_BulletTextV},
    { "Button", _wrap_Button},
    { "SmallButton", _wrap_SmallButton},
    { "InvisibleButton", _wrap_InvisibleButton},
    { "ArrowButton", _wrap_ArrowButton},
    { "Image", _wrap_Image},
    { "ImageButton", _wrap_ImageButton},
    { "Checkbox", _wrap_Checkbox},
    { "CheckboxFlags", _wrap_CheckboxFlags},
    { "RadioButton", _wrap_RadioButton},
    { "ProgressBar", _wrap_ProgressBar},
    { "Bullet", _wrap_Bullet},
    { "BeginCombo", _wrap_BeginCombo},
    { "EndCombo", _wrap_EndCombo},
    { "Combo", _wrap_Combo},
    { "DragFloatRange2", _wrap_DragFloatRange2},
    { "DragInt", _wrap_DragInt},
    { "DragInt2", _wrap_DragInt2},
    { "DragInt3", _wrap_DragInt3},
    { "DragInt4", _wrap_DragInt4},
    { "DragIntRange2", _wrap_DragIntRange2},
    { "SliderAngle", _wrap_SliderAngle},
    { "SliderInt", _wrap_SliderInt},
    { "SliderInt2", _wrap_SliderInt2},
    { "SliderInt3", _wrap_SliderInt3},
    { "SliderInt4", _wrap_SliderInt4},
    { "VSliderFloat", _wrap_VSliderFloat},
    { "VSliderInt", _wrap_VSliderInt},
    { "VSliderScalar", _wrap_VSliderScalar},
    { "InputText", _wrap_InputText},
    { "InputTextMultiline", _wrap_InputTextMultiline},
    { "InputTextWithHint", _wrap_InputTextWithHint},
    { "InputFloat", _wrap_InputFloat},
    { "InputFloat2", _wrap_InputFloat2},
    { "InputFloat3", _wrap_InputFloat3},
    { "InputFloat4", _wrap_InputFloat4},
    { "InputInt", _wrap_InputInt},
    { "InputInt2", _wrap_InputInt2},
    { "InputInt3", _wrap_InputInt3},
    { "InputInt4", _wrap_InputInt4},
    { "InputDouble", _wrap_InputDouble},
    { "InputScalar", _wrap_InputScalar},
    { "InputScalarN", _wrap_InputScalarN},
    { "ColorEdit3", _wrap_ColorEdit3},
    { "ColorEdit4", _wrap_ColorEdit4},
    { "ColorPicker3", _wrap_ColorPicker3},
    { "ColorPicker4", _wrap_ColorPicker4},
    { "ColorButton", _wrap_ColorButton},
    { "SetColorEditOptions", _wrap_SetColorEditOptions},
    { "TreeNode", _wrap_TreeNode},
    { "TreeNodeV", _wrap_TreeNodeV},
    { "TreeNodeEx", _wrap_TreeNodeEx},
    { "TreeNodeExV", _wrap_TreeNodeExV},
    { "TreePush", _wrap_TreePush},
    { "TreePop", _wrap_TreePop},
    { "GetTreeNodeToLabelSpacing", _wrap_GetTreeNodeToLabelSpacing},
    { "CollapsingHeader", _wrap_CollapsingHeader},
    { "SetNextItemOpen", _wrap_SetNextItemOpen},
    { "Selectable", _wrap_Selectable},
    { "ListBox", _wrap_ListBox},
    { "ListBoxHeader", _wrap_ListBoxHeader},
    { "ListBoxFooter", _wrap_ListBoxFooter},
    { "PlotLines", _wrap_PlotLines},
    { "PlotHistogram", _wrap_PlotHistogram},
    { "Value", _wrap_Value},
    { "BeginMenuBar", _wrap_BeginMenuBar},
    { "EndMenuBar", _wrap_EndMenuBar},
    { "BeginMainMenuBar", _wrap_BeginMainMenuBar},
    { "EndMainMenuBar", _wrap_EndMainMenuBar},
    { "BeginMenu", _wrap_BeginMenu},
    { "EndMenu", _wrap_EndMenu},
    { "MenuItem", _wrap_MenuItem},
    { "BeginTooltip", _wrap_BeginTooltip},
    { "EndTooltip", _wrap_EndTooltip},
    { "SetTooltip", _wrap_SetTooltip},
    { "SetTooltipV", _wrap_SetTooltipV},
    { "BeginPopup", _wrap_BeginPopup},
    { "BeginPopupModal", _wrap_BeginPopupModal},
    { "EndPopup", _wrap_EndPopup},
    { "OpenPopup", _wrap_OpenPopup},
    { "OpenPopupOnItemClick", _wrap_OpenPopupOnItemClick},
    { "CloseCurrentPopup", _wrap_CloseCurrentPopup},
    { "BeginPopupContextItem", _wrap_BeginPopupContextItem},
    { "BeginPopupContextVoid", _wrap_BeginPopupContextVoid},
    { "Columns", _wrap_Columns},
    { "NextColumn", _wrap_NextColumn},
    { "GetColumnIndex", _wrap_GetColumnIndex},
    { "GetColumnWidth", _wrap_GetColumnWidth},
    { "SetColumnWidth", _wrap_SetColumnWidth},
    { "GetColumnOffset", _wrap_GetColumnOffset},
    { "SetColumnOffset", _wrap_SetColumnOffset},
    { "GetColumnsCount", _wrap_GetColumnsCount},
    { "BeginTabBar", _wrap_BeginTabBar},
    { "EndTabBar", _wrap_EndTabBar},
    { "BeginTabItem", _wrap_BeginTabItem},
    { "EndTabItem", _wrap_EndTabItem},
    { "TabItemButton", _wrap_TabItemButton},
    { "SetTabItemClosed", _wrap_SetTabItemClosed},
    { "DockSpace", _wrap_DockSpace},
    { "DockSpaceOverViewport", _wrap_DockSpaceOverViewport},
    { "SetNextWindowDockID", _wrap_SetNextWindowDockID},
    { "SetNextWindowClass", _wrap_SetNextWindowClass},
    { "GetWindowDockID", _wrap_GetWindowDockID},
    { "IsWindowDocked", _wrap_IsWindowDocked},
    { "LogToTTY", _wrap_LogToTTY},
    { "LogToFile", _wrap_LogToFile},
    { "LogToClipboard", _wrap_LogToClipboard},
    { "LogFinish", _wrap_LogFinish},
    { "LogButtons", _wrap_LogButtons},
    { "LogText", _wrap_LogText},
    { "BeginDragDropSource", _wrap_BeginDragDropSource},
    { "SetDragDropPayload", _wrap_SetDragDropPayload},
    { "EndDragDropSource", _wrap_EndDragDropSource},
    { "BeginDragDropTarget", _wrap_BeginDragDropTarget},
    { "AcceptDragDropPayload", _wrap_AcceptDragDropPayload},
    { "EndDragDropTarget", _wrap_EndDragDropTarget},
    { "GetDragDropPayload", _wrap_GetDragDropPayload},
    { "PushClipRect", _wrap_PushClipRect},
    { "PopClipRect", _wrap_PopClipRect},
    { "SetItemDefaultFocus", _wrap_SetItemDefaultFocus},
    { "SetKeyboardFocusHere", _wrap_SetKeyboardFocusHere},
    { "IsItemHovered", _wrap_IsItemHovered},
    { "IsItemActive", _wrap_IsItemActive},
    { "IsItemFocused", _wrap_IsItemFocused},
    { "IsItemClicked", _wrap_IsItemClicked},
    { "IsItemVisible", _wrap_IsItemVisible},
    { "IsItemEdited", _wrap_IsItemEdited},
    { "IsItemActivated", _wrap_IsItemActivated},
    { "IsItemDeactivated", _wrap_IsItemDeactivated},
    { "IsItemDeactivatedAfterEdit", _wrap_IsItemDeactivatedAfterEdit},
    { "IsItemToggledOpen", _wrap_IsItemToggledOpen},
    { "IsAnyItemHovered", _wrap_IsAnyItemHovered},
    { "IsAnyItemActive", _wrap_IsAnyItemActive},
    { "IsAnyItemFocused", _wrap_IsAnyItemFocused},
    { "GetItemRectMin", _wrap_GetItemRectMin},
    { "GetItemRectMax", _wrap_GetItemRectMax},
    { "GetItemRectSize", _wrap_GetItemRectSize},
    { "SetItemAllowOverlap", _wrap_SetItemAllowOverlap},
    { "IsRectVisible", _wrap_IsRectVisible},
    { "GetTime", _wrap_GetTime},
    { "GetFrameCount", _wrap_GetFrameCount},
    { "GetBackgroundDrawList", _wrap_GetBackgroundDrawList},
    { "GetDrawListSharedData", _wrap_GetDrawListSharedData},
    { "GetStyleColorName", _wrap_GetStyleColorName},
    { "SetStateStorage", _wrap_SetStateStorage},
    { "GetStateStorage", _wrap_GetStateStorage},
    { "CalcListClipping", _wrap_CalcListClipping},
    { "BeginChildFrame", _wrap_BeginChildFrame},
    { "EndChildFrame", _wrap_EndChildFrame},
    { "CalcTextSize", _wrap_CalcTextSize},
    { "ColorConvertU32ToFloat4", _wrap_ColorConvertU32ToFloat4},
    { "ColorConvertFloat4ToU32", _wrap_ColorConvertFloat4ToU32},
    { "ColorConvertRGBtoHSV", _wrap_ColorConvertRGBtoHSV},
    { "ColorConvertHSVtoRGB", _wrap_ColorConvertHSVtoRGB},
    { "GetKeyIndex", _wrap_GetKeyIndex},
    { "IsKeyDown", _wrap_IsKeyDown},
    { "IsKeyPressed", _wrap_IsKeyPressed},
    { "IsKeyReleased", _wrap_IsKeyReleased},
    { "GetKeyPressedAmount", _wrap_GetKeyPressedAmount},
    { "CaptureKeyboardFromApp", _wrap_CaptureKeyboardFromApp},
    { "IsMouseDown", _wrap_IsMouseDown},
    { "IsMouseClicked", _wrap_IsMouseClicked},
    { "IsMouseReleased", _wrap_IsMouseReleased},
    { "IsMouseDoubleClicked", _wrap_IsMouseDoubleClicked},
    { "IsMouseHoveringRect", _wrap_IsMouseHoveringRect},
    { "IsMousePosValid", _wrap_IsMousePosValid},
    { "IsAnyMouseDown", _wrap_IsAnyMouseDown},
    { "GetMousePos", _wrap_GetMousePos},
    { "GetMousePosOnOpeningCurrentPopup", _wrap_GetMousePosOnOpeningCurrentPopup},
    { "IsMouseDragging", _wrap_IsMouseDragging},
    { "GetMouseDragDelta", _wrap_GetMouseDragDelta},
    { "ResetMouseDragDelta", _wrap_ResetMouseDragDelta},
    { "GetMouseCursor", _wrap_GetMouseCursor},
    { "SetMouseCursor", _wrap_SetMouseCursor},
    { "CaptureMouseFromApp", _wrap_CaptureMouseFromApp},
    { "GetClipboardText", _wrap_GetClipboardText},
    { "SetClipboardText", _wrap_SetClipboardText},
    { "LoadIniSettingsFromDisk", _wrap_LoadIniSettingsFromDisk},
    { "LoadIniSettingsFromMemory", _wrap_LoadIniSettingsFromMemory},
    { "SaveIniSettingsToDisk", _wrap_SaveIniSettingsToDisk},
    { "SaveIniSettingsToMemory", _wrap_SaveIniSettingsToMemory},
    { "DebugCheckVersionAndDataLayout", _wrap_DebugCheckVersionAndDataLayout},
    { "SetAllocatorFunctions", _wrap_SetAllocatorFunctions},
    { "MemAlloc", _wrap_MemAlloc},
    { "MemFree", _wrap_MemFree},
    { "GetPlatformIO", _wrap_GetPlatformIO},
    { "GetMainViewport", _wrap_GetMainViewport},
    { "UpdatePlatformWindows", _wrap_UpdatePlatformWindows},
    { "RenderPlatformWindowsDefault", _wrap_RenderPlatformWindowsDefault},
    { "DestroyPlatformWindows", _wrap_DestroyPlatformWindows},
    { "FindViewportByID", _wrap_FindViewportByID},
    { "FindViewportByPlatformHandle", _wrap_FindViewportByPlatformHandle},
    { "OpenPopupContextItem", _wrap_OpenPopupContextItem},
    { "DragScalar", _wrap_DragScalar},
    { "DragScalarN", _wrap_DragScalarN},
    { "DragFloat", _wrap_DragFloat},
    { "DragFloat2", _wrap_DragFloat2},
    { "DragFloat3", _wrap_DragFloat3},
    { "DragFloat4", _wrap_DragFloat4},
    { "SliderScalar", _wrap_SliderScalar},
    { "SliderScalarN", _wrap_SliderScalarN},
    { "SliderFloat", _wrap_SliderFloat},
    { "SliderFloat2", _wrap_SliderFloat2},
    { "SliderFloat3", _wrap_SliderFloat3},
    { "SliderFloat4", _wrap_SliderFloat4},
    { "BeginPopupContextWindow", _wrap_BeginPopupContextWindow},
    { "TreeAdvanceToLabelPos", _wrap_TreeAdvanceToLabelPos},
    { "SetNextTreeNodeOpen", _wrap_SetNextTreeNodeOpen},
    { "GetContentRegionAvailWidth", _wrap_GetContentRegionAvailWidth},
    { "GetOverlayDrawList", _wrap_GetOverlayDrawList},
    { "SetScrollHere", _wrap_SetScrollHere},
    { "IsItemDeactivatedAfterChange", _wrap_IsItemDeactivatedAfterChange},
    { "ImColor_HSV", _wrap_ImColor_HSV},
    { "ImHashData", _wrap_ImHashData},
    { "ImHashStr", _wrap_ImHashStr},
    { "ImHash", _wrap_ImHash},
    { "ImAlphaBlendColors", _wrap_ImAlphaBlendColors},
    { "ImIsPowerOfTwo", _wrap_ImIsPowerOfTwo},
    { "ImUpperPowerOfTwo", _wrap_ImUpperPowerOfTwo},
    { "ImStricmp", _wrap_ImStricmp},
    { "ImStrnicmp", _wrap_ImStrnicmp},
    { "ImStrncpy", _wrap_ImStrncpy},
    { "ImStrdup", _wrap_ImStrdup},
    { "ImStrdupcpy", _wrap_ImStrdupcpy},
    { "ImStrchrRange", _wrap_ImStrchrRange},
    { "ImStrlenW", _wrap_ImStrlenW},
    { "ImStreolRange", _wrap_ImStreolRange},
    { "ImStrbolW", _wrap_ImStrbolW},
    { "ImStristr", _wrap_ImStristr},
    { "ImStrTrimBlanks", _wrap_ImStrTrimBlanks},
    { "ImStrSkipBlank", _wrap_ImStrSkipBlank},
    { "ImFormatString", _wrap_ImFormatString},
    { "ImFormatStringV", _wrap_ImFormatStringV},
    { "ImParseFormatFindStart", _wrap_ImParseFormatFindStart},
    { "ImParseFormatFindEnd", _wrap_ImParseFormatFindEnd},
    { "ImParseFormatTrimDecorations", _wrap_ImParseFormatTrimDecorations},
    { "ImParseFormatPrecision", _wrap_ImParseFormatPrecision},
    { "ImCharIsBlankA", _wrap_ImCharIsBlankA},
    { "ImCharIsBlankW", _wrap_ImCharIsBlankW},
    { "ImTextStrToUtf8", _wrap_ImTextStrToUtf8},
    { "ImTextCharFromUtf8", _wrap_ImTextCharFromUtf8},
    { "ImTextStrFromUtf8", _wrap_ImTextStrFromUtf8},
    { "ImTextCountCharsFromUtf8", _wrap_ImTextCountCharsFromUtf8},
    { "ImTextCountUtf8BytesFromChar", _wrap_ImTextCountUtf8BytesFromChar},
    { "ImTextCountUtf8BytesFromStr", _wrap_ImTextCountUtf8BytesFromStr},
    { "ImFileOpen", _wrap_ImFileOpen},
    { "ImFileClose", _wrap_ImFileClose},
    { "ImFileGetSize", _wrap_ImFileGetSize},
    { "ImFileRead", _wrap_ImFileRead},
    { "ImFileWrite", _wrap_ImFileWrite},
    { "ImFileLoadToMemory", _wrap_ImFileLoadToMemory},
    { "ImPow", _wrap_ImPow},
    { "ImLog", _wrap_ImLog},
    { "ImAbs", _wrap_ImAbs},
    { "ImSign", _wrap_ImSign},
    { "ImMin", _wrap_ImMin},
    { "ImMax", _wrap_ImMax},
    { "ImClamp", _wrap_ImClamp},
    { "ImLerp", _wrap_ImLerp},
    { "ImSaturate", _wrap_ImSaturate},
    { "ImLengthSqr", _wrap_ImLengthSqr},
    { "ImInvLength", _wrap_ImInvLength},
    { "ImFloor", _wrap_ImFloor},
    { "ImModPositive", _wrap_ImModPositive},
    { "ImDot", _wrap_ImDot},
    { "ImRotate", _wrap_ImRotate},
    { "ImLinearSweep", _wrap_ImLinearSweep},
    { "ImMul", _wrap_ImMul},
    { "ImBezierCalc", _wrap_ImBezierCalc},
    { "ImBezierClosestPoint", _wrap_ImBezierClosestPoint},
    { "ImBezierClosestPointCasteljau", _wrap_ImBezierClosestPointCasteljau},
    { "ImLineClosestPoint", _wrap_ImLineClosestPoint},
    { "ImTriangleContainsPoint", _wrap_ImTriangleContainsPoint},
    { "ImTriangleClosestPoint", _wrap_ImTriangleClosestPoint},
    { "ImTriangleBarycentricCoords", _wrap_ImTriangleBarycentricCoords},
    { "ImTriangleArea", _wrap_ImTriangleArea},
    { "ImGetDirQuadrantFromDelta", _wrap_ImGetDirQuadrantFromDelta},
    { "ImBitArrayTestBit", _wrap_ImBitArrayTestBit},
    { "ImBitArrayClearBit", _wrap_ImBitArrayClearBit},
    { "ImBitArraySetBit", _wrap_ImBitArraySetBit},
    { "ImBitArraySetBitRange", _wrap_ImBitArraySetBitRange},
    { "GetCurrentWindowRead", _wrap_GetCurrentWindowRead},
    { "GetCurrentWindow", _wrap_GetCurrentWindow},
    { "FindWindowByID", _wrap_FindWindowByID},
    { "FindWindowByName", _wrap_FindWindowByName},
    { "UpdateWindowParentAndRootLinks", _wrap_UpdateWindowParentAndRootLinks},
    { "CalcWindowExpectedSize", _wrap_CalcWindowExpectedSize},
    { "IsWindowChildOf", _wrap_IsWindowChildOf},
    { "IsWindowNavFocusable", _wrap_IsWindowNavFocusable},
    { "GetWindowAllowedExtentRect", _wrap_GetWindowAllowedExtentRect},
    { "SetWindowPos", _wrap_SetWindowPos},
    { "SetWindowSize", _wrap_SetWindowSize},
    { "SetWindowCollapsed", _wrap_SetWindowCollapsed},
    { "SetWindowHitTestHole", _wrap_SetWindowHitTestHole},
    { "FocusWindow", _wrap_FocusWindow},
    { "FocusTopMostWindowUnderOne", _wrap_FocusTopMostWindowUnderOne},
    { "BringWindowToFocusFront", _wrap_BringWindowToFocusFront},
    { "BringWindowToDisplayFront", _wrap_BringWindowToDisplayFront},
    { "BringWindowToDisplayBack", _wrap_BringWindowToDisplayBack},
    { "SetCurrentFont", _wrap_SetCurrentFont},
    { "GetDefaultFont", _wrap_GetDefaultFont},
    { "GetForegroundDrawList", _wrap_GetForegroundDrawList},
    { "Initialize", _wrap_Initialize},
    { "Shutdown", _wrap_Shutdown},
    { "UpdateHoveredWindowAndCaptureFlags", _wrap_UpdateHoveredWindowAndCaptureFlags},
    { "StartMouseMovingWindow", _wrap_StartMouseMovingWindow},
    { "StartMouseMovingWindowOrNode", _wrap_StartMouseMovingWindowOrNode},
    { "UpdateMouseMovingWindowNewFrame", _wrap_UpdateMouseMovingWindowNewFrame},
    { "UpdateMouseMovingWindowEndFrame", _wrap_UpdateMouseMovingWindowEndFrame},
    { "AddContextHook", _wrap_AddContextHook},
    { "CallContextHooks", _wrap_CallContextHooks},
    { "TranslateWindowsInViewport", _wrap_TranslateWindowsInViewport},
    { "ScaleWindowsInViewport", _wrap_ScaleWindowsInViewport},
    { "DestroyPlatformWindow", _wrap_DestroyPlatformWindow},
    { "ShowViewportThumbnails", _wrap_ShowViewportThumbnails},
    { "MarkIniSettingsDirty", _wrap_MarkIniSettingsDirty},
    { "ClearIniSettings", _wrap_ClearIniSettings},
    { "CreateNewWindowSettings", _wrap_CreateNewWindowSettings},
    { "FindWindowSettings", _wrap_FindWindowSettings},
    { "FindOrCreateWindowSettings", _wrap_FindOrCreateWindowSettings},
    { "FindSettingsHandler", _wrap_FindSettingsHandler},
    { "SetNextWindowScroll", _wrap_SetNextWindowScroll},
    { "SetScrollX", _wrap_SetScrollX},
    { "SetScrollY", _wrap_SetScrollY},
    { "SetScrollFromPosX", _wrap_SetScrollFromPosX},
    { "SetScrollFromPosY", _wrap_SetScrollFromPosY},
    { "ScrollToBringRectIntoView", _wrap_ScrollToBringRectIntoView},
    { "GetItemID", _wrap_GetItemID},
    { "GetItemStatusFlags", _wrap_GetItemStatusFlags},
    { "GetActiveID", _wrap_GetActiveID},
    { "GetFocusID", _wrap_GetFocusID},
    { "SetActiveID", _wrap_SetActiveID},
    { "SetFocusID", _wrap_SetFocusID},
    { "ClearActiveID", _wrap_ClearActiveID},
    { "GetHoveredID", _wrap_GetHoveredID},
    { "SetHoveredID", _wrap_SetHoveredID},
    { "KeepAliveID", _wrap_KeepAliveID},
    { "MarkItemEdited", _wrap_MarkItemEdited},
    { "PushOverrideID", _wrap_PushOverrideID},
    { "GetIDWithSeed", _wrap_GetIDWithSeed},
    { "ItemSize", _wrap_ItemSize},
    { "ItemAdd", _wrap_ItemAdd},
    { "ItemHoverable", _wrap_ItemHoverable},
    { "IsClippedEx", _wrap_IsClippedEx},
    { "SetLastItemData", _wrap_SetLastItemData},
    { "FocusableItemRegister", _wrap_FocusableItemRegister},
    { "FocusableItemUnregister", _wrap_FocusableItemUnregister},
    { "CalcItemSize", _wrap_CalcItemSize},
    { "CalcWrapWidthForPos", _wrap_CalcWrapWidthForPos},
    { "PushMultiItemsWidths", _wrap_PushMultiItemsWidths},
    { "PushItemFlag", _wrap_PushItemFlag},
    { "PopItemFlag", _wrap_PopItemFlag},
    { "IsItemToggledSelection", _wrap_IsItemToggledSelection},
    { "GetContentRegionMaxAbs", _wrap_GetContentRegionMaxAbs},
    { "ShrinkWidths", _wrap_ShrinkWidths},
    { "LogBegin", _wrap_LogBegin},
    { "LogToBuffer", _wrap_LogToBuffer},
    { "BeginChildEx", _wrap_BeginChildEx},
    { "OpenPopupEx", _wrap_OpenPopupEx},
    { "ClosePopupToLevel", _wrap_ClosePopupToLevel},
    { "ClosePopupsOverWindow", _wrap_ClosePopupsOverWindow},
    { "IsPopupOpen", _wrap_IsPopupOpen},
    { "BeginPopupEx", _wrap_BeginPopupEx},
    { "BeginTooltipEx", _wrap_BeginTooltipEx},
    { "GetTopMostPopupModal", _wrap_GetTopMostPopupModal},
    { "FindBestWindowPosForPopup", _wrap_FindBestWindowPosForPopup},
    { "FindBestWindowPosForPopupEx", _wrap_FindBestWindowPosForPopupEx},
    { "NavInitWindow", _wrap_NavInitWindow},
    { "NavMoveRequestButNoResultYet", _wrap_NavMoveRequestButNoResultYet},
    { "NavMoveRequestCancel", _wrap_NavMoveRequestCancel},
    { "NavMoveRequestForward", _wrap_NavMoveRequestForward},
    { "NavMoveRequestTryWrapping", _wrap_NavMoveRequestTryWrapping},
    { "GetNavInputAmount", _wrap_GetNavInputAmount},
    { "GetNavInputAmount2d", _wrap_GetNavInputAmount2d},
    { "CalcTypematicRepeatAmount", _wrap_CalcTypematicRepeatAmount},
    { "ActivateItem", _wrap_ActivateItem},
    { "SetNavID", _wrap_SetNavID},
    { "SetNavIDWithRectRel", _wrap_SetNavIDWithRectRel},
    { "PushFocusScope", _wrap_PushFocusScope},
    { "PopFocusScope", _wrap_PopFocusScope},
    { "GetFocusScopeID", _wrap_GetFocusScopeID},
    { "IsActiveIdUsingNavDir", _wrap_IsActiveIdUsingNavDir},
    { "IsActiveIdUsingNavInput", _wrap_IsActiveIdUsingNavInput},
    { "IsActiveIdUsingKey", _wrap_IsActiveIdUsingKey},
    { "IsMouseDragPastThreshold", _wrap_IsMouseDragPastThreshold},
    { "IsKeyPressedMap", _wrap_IsKeyPressedMap},
    { "IsNavInputDown", _wrap_IsNavInputDown},
    { "IsNavInputTest", _wrap_IsNavInputTest},
    { "GetMergedKeyModFlags", _wrap_GetMergedKeyModFlags},
    { "DockContextInitialize", _wrap_DockContextInitialize},
    { "DockContextShutdown", _wrap_DockContextShutdown},
    { "DockContextClearNodes", _wrap_DockContextClearNodes},
    { "DockContextRebuildNodes", _wrap_DockContextRebuildNodes},
    { "DockContextUpdateUndocking", _wrap_DockContextUpdateUndocking},
    { "DockContextUpdateDocking", _wrap_DockContextUpdateDocking},
    { "DockContextGenNodeID", _wrap_DockContextGenNodeID},
    { "DockContextQueueDock", _wrap_DockContextQueueDock},
    { "DockContextQueueUndockWindow", _wrap_DockContextQueueUndockWindow},
    { "DockContextQueueUndockNode", _wrap_DockContextQueueUndockNode},
    { "DockContextCalcDropPosForDocking", _wrap_DockContextCalcDropPosForDocking},
    { "DockNodeBeginAmendTabBar", _wrap_DockNodeBeginAmendTabBar},
    { "DockNodeEndAmendTabBar", _wrap_DockNodeEndAmendTabBar},
    { "DockNodeGetRootNode", _wrap_DockNodeGetRootNode},
    { "DockNodeGetDepth", _wrap_DockNodeGetDepth},
    { "GetWindowDockNode", _wrap_GetWindowDockNode},
    { "GetWindowAlwaysWantOwnTabBar", _wrap_GetWindowAlwaysWantOwnTabBar},
    { "BeginDocked", _wrap_BeginDocked},
    { "BeginDockableDragDropSource", _wrap_BeginDockableDragDropSource},
    { "BeginDockableDragDropTarget", _wrap_BeginDockableDragDropTarget},
    { "SetWindowDock", _wrap_SetWindowDock},
    { "DockBuilderDockWindow", _wrap_DockBuilderDockWindow},
    { "DockBuilderGetNode", _wrap_DockBuilderGetNode},
    { "DockBuilderGetCentralNode", _wrap_DockBuilderGetCentralNode},
    { "DockBuilderAddNode", _wrap_DockBuilderAddNode},
    { "DockBuilderRemoveNode", _wrap_DockBuilderRemoveNode},
    { "DockBuilderRemoveNodeDockedWindows", _wrap_DockBuilderRemoveNodeDockedWindows},
    { "DockBuilderRemoveNodeChildNodes", _wrap_DockBuilderRemoveNodeChildNodes},
    { "DockBuilderSetNodePos", _wrap_DockBuilderSetNodePos},
    { "DockBuilderSetNodeSize", _wrap_DockBuilderSetNodeSize},
    { "DockBuilderSplitNode", _wrap_DockBuilderSplitNode},
    { "DockBuilderCopyDockSpace", _wrap_DockBuilderCopyDockSpace},
    { "DockBuilderCopyNode", _wrap_DockBuilderCopyNode},
    { "DockBuilderCopyWindowSettings", _wrap_DockBuilderCopyWindowSettings},
    { "DockBuilderFinish", _wrap_DockBuilderFinish},
    { "BeginDragDropTargetCustom", _wrap_BeginDragDropTargetCustom},
    { "ClearDragDrop", _wrap_ClearDragDrop},
    { "IsDragDropPayloadBeingAccepted", _wrap_IsDragDropPayloadBeingAccepted},
    { "SetWindowClipRectBeforeSetChannel", _wrap_SetWindowClipRectBeforeSetChannel},
    { "BeginColumns", _wrap_BeginColumns},
    { "EndColumns", _wrap_EndColumns},
    { "PushColumnClipRect", _wrap_PushColumnClipRect},
    { "PushColumnsBackground", _wrap_PushColumnsBackground},
    { "PopColumnsBackground", _wrap_PopColumnsBackground},
    { "GetColumnsID", _wrap_GetColumnsID},
    { "FindOrCreateColumns", _wrap_FindOrCreateColumns},
    { "GetColumnOffsetFromNorm", _wrap_GetColumnOffsetFromNorm},
    { "GetColumnNormFromOffset", _wrap_GetColumnNormFromOffset},
    { "BeginTabBarEx", _wrap_BeginTabBarEx},
    { "TabBarFindTabByID", _wrap_TabBarFindTabByID},
    { "TabBarFindMostRecentlySelectedTabForActiveWindow", _wrap_TabBarFindMostRecentlySelectedTabForActiveWindow},
    { "TabBarAddTab", _wrap_TabBarAddTab},
    { "TabBarRemoveTab", _wrap_TabBarRemoveTab},
    { "TabBarCloseTab", _wrap_TabBarCloseTab},
    { "TabBarQueueReorder", _wrap_TabBarQueueReorder},
    { "TabBarProcessReorder", _wrap_TabBarProcessReorder},
    { "TabItemEx", _wrap_TabItemEx},
    { "TabItemCalcSize", _wrap_TabItemCalcSize},
    { "TabItemBackground", _wrap_TabItemBackground},
    { "TabItemLabelAndCloseButton", _wrap_TabItemLabelAndCloseButton},
    { "RenderText", _wrap_RenderText},
    { "RenderTextWrapped", _wrap_RenderTextWrapped},
    { "RenderTextClipped", _wrap_RenderTextClipped},
    { "RenderTextClippedEx", _wrap_RenderTextClippedEx},
    { "RenderTextEllipsis", _wrap_RenderTextEllipsis},
    { "RenderFrame", _wrap_RenderFrame},
    { "RenderFrameBorder", _wrap_RenderFrameBorder},
    { "RenderColorRectWithAlphaCheckerboard", _wrap_RenderColorRectWithAlphaCheckerboard},
    { "RenderNavHighlight", _wrap_RenderNavHighlight},
    { "FindRenderedTextEnd", _wrap_FindRenderedTextEnd},
    { "LogRenderedText", _wrap_LogRenderedText},
    { "RenderCheckMark", _wrap_RenderCheckMark},
    { "RenderMouseCursor", _wrap_RenderMouseCursor},
    { "RenderArrowPointingAt", _wrap_RenderArrowPointingAt},
    { "RenderArrowDockMenu", _wrap_RenderArrowDockMenu},
    { "RenderRectFilledRangeH", _wrap_RenderRectFilledRangeH},
    { "RenderRectFilledWithHole", _wrap_RenderRectFilledWithHole},
    { "RenderArrow", _wrap_RenderArrow},
    { "RenderBullet", _wrap_RenderBullet},
    { "TextEx", _wrap_TextEx},
    { "ButtonEx", _wrap_ButtonEx},
    { "CloseButton", _wrap_CloseButton},
    { "CollapseButton", _wrap_CollapseButton},
    { "ArrowButtonEx", _wrap_ArrowButtonEx},
    { "Scrollbar", _wrap_Scrollbar},
    { "ScrollbarEx", _wrap_ScrollbarEx},
    { "ImageButtonEx", _wrap_ImageButtonEx},
    { "GetWindowScrollbarRect", _wrap_GetWindowScrollbarRect},
    { "GetWindowScrollbarID", _wrap_GetWindowScrollbarID},
    { "GetWindowResizeID", _wrap_GetWindowResizeID},
    { "SeparatorEx", _wrap_SeparatorEx},
    { "ButtonBehavior", _wrap_ButtonBehavior},
    { "DragBehavior", _wrap_DragBehavior},
    { "SliderBehavior", _wrap_SliderBehavior},
    { "SplitterBehavior", _wrap_SplitterBehavior},
    { "TreeNodeBehavior", _wrap_TreeNodeBehavior},
    { "TreeNodeBehaviorIsOpen", _wrap_TreeNodeBehaviorIsOpen},
    { "TreePushOverrideID", _wrap_TreePushOverrideID},
    { "DataTypeGetInfo", _wrap_DataTypeGetInfo},
    { "DataTypeFormatString", _wrap_DataTypeFormatString},
    { "DataTypeApplyOp", _wrap_DataTypeApplyOp},
    { "DataTypeApplyOpFromText", _wrap_DataTypeApplyOpFromText},
    { "DataTypeCompare", _wrap_DataTypeCompare},
    { "DataTypeClamp", _wrap_DataTypeClamp},
    { "InputTextEx", _wrap_InputTextEx},
    { "TempInputText", _wrap_TempInputText},
    { "TempInputScalar", _wrap_TempInputScalar},
    { "TempInputIsActive", _wrap_TempInputIsActive},
    { "GetInputTextState", _wrap_GetInputTextState},
    { "ColorTooltip", _wrap_ColorTooltip},
    { "ColorEditOptionsPopup", _wrap_ColorEditOptionsPopup},
    { "ColorPickerOptionsPopup", _wrap_ColorPickerOptionsPopup},
    { "PlotEx", _wrap_PlotEx},
    { "ShadeVertsLinearColorGradientKeepAlpha", _wrap_ShadeVertsLinearColorGradientKeepAlpha},
    { "ShadeVertsLinearUV", _wrap_ShadeVertsLinearUV},
    { "GcCompactTransientWindowBuffers", _wrap_GcCompactTransientWindowBuffers},
    { "GcAwakeTransientWindowBuffers", _wrap_GcAwakeTransientWindowBuffers},
    { "DebugDrawItemRect", _wrap_DebugDrawItemRect},
    { "DebugStartItemPicker", _wrap_DebugStartItemPicker},
    { "ImFontAtlasBuildWithStbTruetype", _wrap_ImFontAtlasBuildWithStbTruetype},
    { "ImFontAtlasBuildInit", _wrap_ImFontAtlasBuildInit},
    { "ImFontAtlasBuildSetupFont", _wrap_ImFontAtlasBuildSetupFont},
    { "ImFontAtlasBuildPackCustomRects", _wrap_ImFontAtlasBuildPackCustomRects},
    { "ImFontAtlasBuildFinish", _wrap_ImFontAtlasBuildFinish},
    { "ImFontAtlasBuildRender1bppRectFromString", _wrap_ImFontAtlasBuildRender1bppRectFromString},
    { "ImFontAtlasBuildMultiplyCalcLookupTable", _wrap_ImFontAtlasBuildMultiplyCalcLookupTable},
    { "ImFontAtlasBuildMultiplyRectAlpha8", _wrap_ImFontAtlasBuildMultiplyRectAlpha8},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_ImVec2,
&_wrap_class_ImVec4,
&_wrap_class_ImNewWrapper,
&_wrap_class_ImGuiStyle,
&_wrap_class_ImGuiIO,
&_wrap_class_ImGuiInputTextCallbackData,
&_wrap_class_ImGuiSizeCallbackData,
&_wrap_class_ImGuiWindowClass,
&_wrap_class_ImGuiPayload,
&_wrap_class_ImGuiOnceUponAFrame,
&_wrap_class_ImGuiTextFilter,
&_wrap_class_ImGuiTextBuffer,
&_wrap_class_ImGuiStorage,
&_wrap_class_ImGuiListClipper,
&_wrap_class_ImColor,
&_wrap_class_ImDrawCmd,
&_wrap_class_ImDrawVert,
&_wrap_class_ImDrawChannel,
&_wrap_class_ImDrawListSplitter,
&_wrap_class_ImDrawList,
&_wrap_class_ImDrawData,
&_wrap_class_ImFontConfig,
&_wrap_class_ImFontGlyph,
&_wrap_class_ImFontGlyphRangesBuilder,
&_wrap_class_ImFontAtlasCustomRect,
&_wrap_class_ImFontAtlas,
&_wrap_class_ImFont,
&_wrap_class_ImGuiPlatformIO,
&_wrap_class_ImGuiPlatformMonitor,
&_wrap_class_ImGuiViewport,
&_wrap_class_ImVec1,
&_wrap_class_ImVec2ih,
&_wrap_class_ImRect,
&_wrap_class_ImBitVector,
&_wrap_class_ImDrawListSharedData,
&_wrap_class_ImDrawDataBuilder,
&_wrap_class_ImGuiDataTypeTempStorage,
&_wrap_class_ImGuiDataTypeInfo,
&_wrap_class_ImGuiColorMod,
&_wrap_class_ImGuiStyleMod,
&_wrap_class_ImGuiGroupData,
&_wrap_class_ImGuiMenuColumns,
&_wrap_class_ImGuiInputTextState,
&_wrap_class_ImGuiPopupData,
&_wrap_class_ImGuiNavMoveResult,
&_wrap_class_ImGuiNextWindowData,
&_wrap_class_ImGuiNextItemData,
&_wrap_class_ImGuiShrinkWidthItem,
&_wrap_class_ImGuiPtrOrIndex,
&_wrap_class_ImGuiColumnData,
&_wrap_class_ImGuiColumns,
&_wrap_class_ImGuiDockNode,
&_wrap_class_ImGuiDockContext,
&_wrap_class_ImGuiViewportP,
&_wrap_class_ImGuiWindowSettings,
&_wrap_class_ImGuiSettingsHandler,
&_wrap_class_ImGuiContextHook,
&_wrap_class_ImGuiContext,
&_wrap_class_ImGuiWindowTempData,
&_wrap_class_ImGuiWindow,
&_wrap_class_ImGuiLastItemDataBackup,
&_wrap_class_ImGuiTabItem,
&_wrap_class_ImGuiTabBar,
&_wrap_class_Bool,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "imgui",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ImGuiViewportPTo_p_ImGuiViewport(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ImGuiViewport *)  ((ImGuiViewportP *) x));
}
static swig_type_info _swigt__p_Bool = {"_p_Bool", "Bool *", 0, 0, (void*)&_wrap_class_Bool, 0};
static swig_type_info _swigt__p_CustomRect = {"_p_CustomRect", "CustomRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *|ImFileHandle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GlyphRangesBuilder = {"_p_GlyphRangesBuilder", "GlyphRangesBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImBitVector = {"_p_ImBitVector", "ImBitVector *", 0, 0, (void*)&_wrap_class_ImBitVector, 0};
static swig_type_info _swigt__p_ImChunkStreamT_ImGuiWindowSettings_t = {"_p_ImChunkStreamT_ImGuiWindowSettings_t", "ImChunkStream< ImGuiWindowSettings > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImColor = {"_p_ImColor", "ImColor *", 0, 0, (void*)&_wrap_class_ImColor, 0};
static swig_type_info _swigt__p_ImDrawChannel = {"_p_ImDrawChannel", "ImDrawChannel *", 0, 0, (void*)&_wrap_class_ImDrawChannel, 0};
static swig_type_info _swigt__p_ImDrawCmd = {"_p_ImDrawCmd", "ImDrawCmd *", 0, 0, (void*)&_wrap_class_ImDrawCmd, 0};
static swig_type_info _swigt__p_ImDrawData = {"_p_ImDrawData", "ImDrawData *", 0, 0, (void*)&_wrap_class_ImDrawData, 0};
static swig_type_info _swigt__p_ImDrawDataBuilder = {"_p_ImDrawDataBuilder", "ImDrawDataBuilder *", 0, 0, (void*)&_wrap_class_ImDrawDataBuilder, 0};
static swig_type_info _swigt__p_ImDrawList = {"_p_ImDrawList", "ImDrawList *", 0, 0, (void*)&_wrap_class_ImDrawList, 0};
static swig_type_info _swigt__p_ImDrawListSharedData = {"_p_ImDrawListSharedData", "ImDrawListSharedData *", 0, 0, (void*)&_wrap_class_ImDrawListSharedData, 0};
static swig_type_info _swigt__p_ImDrawListSplitter = {"_p_ImDrawListSplitter", "ImDrawListSplitter *", 0, 0, (void*)&_wrap_class_ImDrawListSplitter, 0};
static swig_type_info _swigt__p_ImDrawVert = {"_p_ImDrawVert", "ImDrawVert *", 0, 0, (void*)&_wrap_class_ImDrawVert, 0};
static swig_type_info _swigt__p_ImFont = {"_p_ImFont", "ImFont *", 0, 0, (void*)&_wrap_class_ImFont, 0};
static swig_type_info _swigt__p_ImFontAtlas = {"_p_ImFontAtlas", "ImFontAtlas *", 0, 0, (void*)&_wrap_class_ImFontAtlas, 0};
static swig_type_info _swigt__p_ImFontAtlasCustomRect = {"_p_ImFontAtlasCustomRect", "ImFontAtlasCustomRect *", 0, 0, (void*)&_wrap_class_ImFontAtlasCustomRect, 0};
static swig_type_info _swigt__p_ImFontConfig = {"_p_ImFontConfig", "ImFontConfig *", 0, 0, (void*)&_wrap_class_ImFontConfig, 0};
static swig_type_info _swigt__p_ImFontGlyph = {"_p_ImFontGlyph", "ImFontGlyph *", 0, 0, (void*)&_wrap_class_ImFontGlyph, 0};
static swig_type_info _swigt__p_ImFontGlyphRangesBuilder = {"_p_ImFontGlyphRangesBuilder", "ImFontGlyphRangesBuilder *", 0, 0, (void*)&_wrap_class_ImFontGlyphRangesBuilder, 0};
static swig_type_info _swigt__p_ImGuiColorMod = {"_p_ImGuiColorMod", "ImGuiColorMod *", 0, 0, (void*)&_wrap_class_ImGuiColorMod, 0};
static swig_type_info _swigt__p_ImGuiColumnData = {"_p_ImGuiColumnData", "ImGuiColumnData *", 0, 0, (void*)&_wrap_class_ImGuiColumnData, 0};
static swig_type_info _swigt__p_ImGuiColumns = {"_p_ImGuiColumns", "ImGuiColumns *", 0, 0, (void*)&_wrap_class_ImGuiColumns, 0};
static swig_type_info _swigt__p_ImGuiContext = {"_p_ImGuiContext", "ImGuiContext *", 0, 0, (void*)&_wrap_class_ImGuiContext, 0};
static swig_type_info _swigt__p_ImGuiContextHook = {"_p_ImGuiContextHook", "ImGuiContextHook *", 0, 0, (void*)&_wrap_class_ImGuiContextHook, 0};
static swig_type_info _swigt__p_ImGuiDataTypeInfo = {"_p_ImGuiDataTypeInfo", "ImGuiDataTypeInfo *", 0, 0, (void*)&_wrap_class_ImGuiDataTypeInfo, 0};
static swig_type_info _swigt__p_ImGuiDataTypeTempStorage = {"_p_ImGuiDataTypeTempStorage", "ImGuiDataTypeTempStorage *", 0, 0, (void*)&_wrap_class_ImGuiDataTypeTempStorage, 0};
static swig_type_info _swigt__p_ImGuiDockContext = {"_p_ImGuiDockContext", "ImGuiDockContext *", 0, 0, (void*)&_wrap_class_ImGuiDockContext, 0};
static swig_type_info _swigt__p_ImGuiDockNode = {"_p_ImGuiDockNode", "ImGuiDockNode *", 0, 0, (void*)&_wrap_class_ImGuiDockNode, 0};
static swig_type_info _swigt__p_ImGuiGroupData = {"_p_ImGuiGroupData", "ImGuiGroupData *", 0, 0, (void*)&_wrap_class_ImGuiGroupData, 0};
static swig_type_info _swigt__p_ImGuiIO = {"_p_ImGuiIO", "ImGuiIO *", 0, 0, (void*)&_wrap_class_ImGuiIO, 0};
static swig_type_info _swigt__p_ImGuiInputTextCallbackData = {"_p_ImGuiInputTextCallbackData", "ImGuiInputTextCallbackData *|ImGuiTextEditCallbackData *", 0, 0, (void*)&_wrap_class_ImGuiInputTextCallbackData, 0};
static swig_type_info _swigt__p_ImGuiInputTextState = {"_p_ImGuiInputTextState", "ImGuiInputTextState *", 0, 0, (void*)&_wrap_class_ImGuiInputTextState, 0};
static swig_type_info _swigt__p_ImGuiLastItemDataBackup = {"_p_ImGuiLastItemDataBackup", "ImGuiLastItemDataBackup *", 0, 0, (void*)&_wrap_class_ImGuiLastItemDataBackup, 0};
static swig_type_info _swigt__p_ImGuiListClipper = {"_p_ImGuiListClipper", "ImGuiListClipper *", 0, 0, (void*)&_wrap_class_ImGuiListClipper, 0};
static swig_type_info _swigt__p_ImGuiMenuColumns = {"_p_ImGuiMenuColumns", "ImGuiMenuColumns *", 0, 0, (void*)&_wrap_class_ImGuiMenuColumns, 0};
static swig_type_info _swigt__p_ImGuiNavMoveResult = {"_p_ImGuiNavMoveResult", "ImGuiNavMoveResult *", 0, 0, (void*)&_wrap_class_ImGuiNavMoveResult, 0};
static swig_type_info _swigt__p_ImGuiNextItemData = {"_p_ImGuiNextItemData", "ImGuiNextItemData *", 0, 0, (void*)&_wrap_class_ImGuiNextItemData, 0};
static swig_type_info _swigt__p_ImGuiNextWindowData = {"_p_ImGuiNextWindowData", "ImGuiNextWindowData *", 0, 0, (void*)&_wrap_class_ImGuiNextWindowData, 0};
static swig_type_info _swigt__p_ImGuiOnceUponAFrame = {"_p_ImGuiOnceUponAFrame", "ImGuiOnceUponAFrame *", 0, 0, (void*)&_wrap_class_ImGuiOnceUponAFrame, 0};
static swig_type_info _swigt__p_ImGuiPayload = {"_p_ImGuiPayload", "ImGuiPayload *", 0, 0, (void*)&_wrap_class_ImGuiPayload, 0};
static swig_type_info _swigt__p_ImGuiPlatformIO = {"_p_ImGuiPlatformIO", "ImGuiPlatformIO *", 0, 0, (void*)&_wrap_class_ImGuiPlatformIO, 0};
static swig_type_info _swigt__p_ImGuiPlatformMonitor = {"_p_ImGuiPlatformMonitor", "ImGuiPlatformMonitor *", 0, 0, (void*)&_wrap_class_ImGuiPlatformMonitor, 0};
static swig_type_info _swigt__p_ImGuiPopupData = {"_p_ImGuiPopupData", "ImGuiPopupData *", 0, 0, (void*)&_wrap_class_ImGuiPopupData, 0};
static swig_type_info _swigt__p_ImGuiPtrOrIndex = {"_p_ImGuiPtrOrIndex", "ImGuiPtrOrIndex *", 0, 0, (void*)&_wrap_class_ImGuiPtrOrIndex, 0};
static swig_type_info _swigt__p_ImGuiSettingsHandler = {"_p_ImGuiSettingsHandler", "ImGuiSettingsHandler *", 0, 0, (void*)&_wrap_class_ImGuiSettingsHandler, 0};
static swig_type_info _swigt__p_ImGuiShrinkWidthItem = {"_p_ImGuiShrinkWidthItem", "ImGuiShrinkWidthItem *", 0, 0, (void*)&_wrap_class_ImGuiShrinkWidthItem, 0};
static swig_type_info _swigt__p_ImGuiSizeCallbackData = {"_p_ImGuiSizeCallbackData", "ImGuiSizeCallbackData *", 0, 0, (void*)&_wrap_class_ImGuiSizeCallbackData, 0};
static swig_type_info _swigt__p_ImGuiStorage = {"_p_ImGuiStorage", "ImGuiStorage *", 0, 0, (void*)&_wrap_class_ImGuiStorage, 0};
static swig_type_info _swigt__p_ImGuiStyle = {"_p_ImGuiStyle", "ImGuiStyle *", 0, 0, (void*)&_wrap_class_ImGuiStyle, 0};
static swig_type_info _swigt__p_ImGuiStyleMod = {"_p_ImGuiStyleMod", "ImGuiStyleMod *", 0, 0, (void*)&_wrap_class_ImGuiStyleMod, 0};
static swig_type_info _swigt__p_ImGuiTabBar = {"_p_ImGuiTabBar", "ImGuiTabBar *", 0, 0, (void*)&_wrap_class_ImGuiTabBar, 0};
static swig_type_info _swigt__p_ImGuiTabItem = {"_p_ImGuiTabItem", "ImGuiTabItem *", 0, 0, (void*)&_wrap_class_ImGuiTabItem, 0};
static swig_type_info _swigt__p_ImGuiTextBuffer = {"_p_ImGuiTextBuffer", "ImGuiTextBuffer *", 0, 0, (void*)&_wrap_class_ImGuiTextBuffer, 0};
static swig_type_info _swigt__p_ImGuiTextFilter = {"_p_ImGuiTextFilter", "ImGuiTextFilter *", 0, 0, (void*)&_wrap_class_ImGuiTextFilter, 0};
static swig_type_info _swigt__p_ImGuiViewport = {"_p_ImGuiViewport", "ImGuiViewport *", 0, 0, (void*)&_wrap_class_ImGuiViewport, 0};
static swig_type_info _swigt__p_ImGuiViewportP = {"_p_ImGuiViewportP", "ImGuiViewportP *", 0, 0, (void*)&_wrap_class_ImGuiViewportP, 0};
static swig_type_info _swigt__p_ImGuiWindow = {"_p_ImGuiWindow", "ImGuiWindow *", 0, 0, (void*)&_wrap_class_ImGuiWindow, 0};
static swig_type_info _swigt__p_ImGuiWindowClass = {"_p_ImGuiWindowClass", "ImGuiWindowClass *", 0, 0, (void*)&_wrap_class_ImGuiWindowClass, 0};
static swig_type_info _swigt__p_ImGuiWindowSettings = {"_p_ImGuiWindowSettings", "ImGuiWindowSettings *", 0, 0, (void*)&_wrap_class_ImGuiWindowSettings, 0};
static swig_type_info _swigt__p_ImGuiWindowTempData = {"_p_ImGuiWindowTempData", "ImGuiWindowTempData *", 0, 0, (void*)&_wrap_class_ImGuiWindowTempData, 0};
static swig_type_info _swigt__p_ImNewWrapper = {"_p_ImNewWrapper", "ImNewWrapper *", 0, 0, (void*)&_wrap_class_ImNewWrapper, 0};
static swig_type_info _swigt__p_ImPoolT_ImGuiTabBar_t = {"_p_ImPoolT_ImGuiTabBar_t", "ImPool< ImGuiTabBar > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImRect = {"_p_ImRect", "ImRect *", 0, 0, (void*)&_wrap_class_ImRect, 0};
static swig_type_info _swigt__p_ImStb__STB_TexteditState = {"_p_ImStb__STB_TexteditState", "ImStb::STB_TexteditState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVec1 = {"_p_ImVec1", "ImVec1 *", 0, 0, (void*)&_wrap_class_ImVec1, 0};
static swig_type_info _swigt__p_ImVec2 = {"_p_ImVec2", "ImVec2 *", 0, 0, (void*)&_wrap_class_ImVec2, 0};
static swig_type_info _swigt__p_ImVec2ih = {"_p_ImVec2ih", "ImVec2ih *", 0, 0, (void*)&_wrap_class_ImVec2ih, 0};
static swig_type_info _swigt__p_ImVec4 = {"_p_ImVec4", "ImVec4 *", 0, 0, (void*)&_wrap_class_ImVec4, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawChannel_t = {"_p_ImVectorT_ImDrawChannel_t", "ImVector< ImDrawChannel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawCmd_t = {"_p_ImVectorT_ImDrawCmd_t", "ImVector< ImDrawCmd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawList_p_t = {"_p_ImVectorT_ImDrawList_p_t", "ImVector< ImDrawList * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawVert_t = {"_p_ImVectorT_ImDrawVert_t", "ImVector< ImDrawVert > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontAtlasCustomRect_t = {"_p_ImVectorT_ImFontAtlasCustomRect_t", "ImVector< ImFontAtlasCustomRect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontConfig_t = {"_p_ImVectorT_ImFontConfig_t", "ImVector< ImFontConfig > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontGlyph_t = {"_p_ImVectorT_ImFontGlyph_t", "ImVector< ImFontGlyph > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFont_p_t = {"_p_ImVectorT_ImFont_p_t", "ImVector< ImFont * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiColorMod_t = {"_p_ImVectorT_ImGuiColorMod_t", "ImVector< ImGuiColorMod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiColumnData_t = {"_p_ImVectorT_ImGuiColumnData_t", "ImVector< ImGuiColumnData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiColumns_t = {"_p_ImVectorT_ImGuiColumns_t", "ImVector< ImGuiColumns > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiContextHook_t = {"_p_ImVectorT_ImGuiContextHook_t", "ImVector< ImGuiContextHook > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiDockNodeSettings_t = {"_p_ImVectorT_ImGuiDockNodeSettings_t", "ImVector< ImGuiDockNodeSettings > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiDockRequest_t = {"_p_ImVectorT_ImGuiDockRequest_t", "ImVector< ImGuiDockRequest > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiGroupData_t = {"_p_ImVectorT_ImGuiGroupData_t", "ImVector< ImGuiGroupData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiPlatformMonitor_t = {"_p_ImVectorT_ImGuiPlatformMonitor_t", "ImVector< ImGuiPlatformMonitor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiPopupData_t = {"_p_ImVectorT_ImGuiPopupData_t", "ImVector< ImGuiPopupData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiPtrOrIndex_t = {"_p_ImVectorT_ImGuiPtrOrIndex_t", "ImVector< ImGuiPtrOrIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiSettingsHandler_t = {"_p_ImVectorT_ImGuiSettingsHandler_t", "ImVector< ImGuiSettingsHandler > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiShrinkWidthItem_t = {"_p_ImVectorT_ImGuiShrinkWidthItem_t", "ImVector< ImGuiShrinkWidthItem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t = {"_p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t", "ImVector< ImGuiStorage::ImGuiStoragePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiStyleMod_t = {"_p_ImVectorT_ImGuiStyleMod_t", "ImVector< ImGuiStyleMod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiTabItem_t = {"_p_ImVectorT_ImGuiTabItem_t", "ImVector< ImGuiTabItem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t = {"_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t", "ImVector< ImGuiTextFilter::ImGuiTextRange > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiViewportP_p_t = {"_p_ImVectorT_ImGuiViewportP_p_t", "ImVector< ImGuiViewportP * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiViewport_p_t = {"_p_ImVectorT_ImGuiViewport_p_t", "ImVector< ImGuiViewport * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiWindow_p_t = {"_p_ImVectorT_ImGuiWindow_p_t", "ImVector< ImGuiWindow * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImVec2_t = {"_p_ImVectorT_ImVec2_t", "ImVector< ImVec2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImVec4_t = {"_p_ImVectorT_ImVec4_t", "ImVector< ImVec4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_char_const_p_t = {"_p_ImVectorT_char_const_p_t", "ImVector< char const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_char_t = {"_p_ImVectorT_char_t", "ImVector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_float_t = {"_p_ImVectorT_float_t", "ImVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_int_t = {"_p_ImVectorT_int_t", "ImVector< ImGuiItemFlags > *|ImVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_char_t = {"_p_ImVectorT_unsigned_char_t", "ImVector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_int_t = {"_p_ImVectorT_unsigned_int_t", "ImVector< ImGuiID > *|ImVector< ImU32 > *|ImVector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_short_t = {"_p_ImVectorT_unsigned_short_t", "ImVector< unsigned short > *|ImVector< ImWchar > *|ImVector< ImDrawIdx > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_void_p_t = {"_p_ImVectorT_void_p_t", "ImVector< ImTextureID > *|ImVector< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiContextHook__void = {"_p_f_p_ImGuiContext_p_ImGuiContextHook__void", "void (*)(ImGuiContext *,ImGuiContextHook *)|ImGuiContextHookCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void = {"_p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void", "void (*)(ImGuiContext *,ImGuiSettingsHandler *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void = {"_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void", "void (*)(ImGuiContext *,ImGuiSettingsHandler *,ImGuiTextBuffer *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void = {"_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void", "void *(*)(ImGuiContext *,ImGuiSettingsHandler *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void = {"_p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void", "void (*)(ImGuiContext *,ImGuiSettingsHandler *,void *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiInputTextCallbackData__int = {"_p_f_p_ImGuiInputTextCallbackData__int", "int (*)(ImGuiInputTextCallbackData *)|ImGuiInputTextCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiSizeCallbackData__void = {"_p_f_p_ImGuiSizeCallbackData__void", "void (*)(ImGuiSizeCallbackData *)|ImGuiSizeCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_ImVec2__void = {"_p_f_p_ImGuiViewport_ImVec2__void", "void (*)(ImGuiViewport *,ImVec2)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__ImVec2 = {"_p_f_p_ImGuiViewport__ImVec2", "ImVec2 (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__bool = {"_p_f_p_ImGuiViewport__bool", "bool (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__float = {"_p_f_p_ImGuiViewport__float", "float (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__void = {"_p_f_p_ImGuiViewport__void", "void (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_float__void = {"_p_f_p_ImGuiViewport_float__void", "void (*)(ImGuiViewport *,float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_p_q_const__char__void = {"_p_f_p_ImGuiViewport_p_q_const__char__void", "void (*)(ImGuiViewport *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_p_void__void = {"_p_f_p_ImGuiViewport_p_void__void", "void (*)(ImGuiViewport *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int = {"_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int", "int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)|int (*)(ImGuiViewport *,unsigned long long,void const *,unsigned long long *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void = {"_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void", "void (*)(ImDrawList const *,ImDrawCmd const *)|ImDrawCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__p_char = {"_p_f_p_void__p_char", "char *(*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int__float = {"_p_f_p_void_int__float", "float (*)(void *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_p_q_const__char__bool = {"_p_f_p_void_int_p_p_q_const__char__bool", "bool (*)(void *,int,char const **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char__void = {"_p_f_p_void_p_q_const__char__void", "void (*)(void *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void__void = {"_p_f_p_void_p_void__void", "void (*)(void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t_p_void__p_void = {"_p_f_size_t_p_void__p_void", "void *(*)(size_t,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "ImGuiDataAuthority *|ImGuiKey *|ImGuiMouseCursor *|int *|ImS32 *|ImGuiNavInput *|ImGuiMouseButton *|ImGuiLayoutType *|ImGuiCol *|ImGuiDir *|ImPoolIdx *|ImGuiCond *|ImGuiDataType *|ImFontAtlasFlags *|ImGuiFocusedFlags *|ImGuiHoveredFlags *|ImGuiKeyModFlags *|ImGuiTextFlags *|ImGuiNavHighlightFlags *|ImGuiInputTextFlags *|ImGuiViewportFlags *|ImGuiItemFlags *|ImGuiTabItemFlags *|ImGuiNavMoveFlags *|ImGuiDockNodeFlags *|ImGuiSelectableFlags *|ImGuiTreeNodeFlags *|ImGuiNavDirSourceFlags *|ImGuiTabBarFlags *|ImGuiSliderFlags *|ImDrawCornerFlags *|ImGuiSeparatorFlags *|ImGuiConfigFlags *|ImGuiColorEditFlags *|ImDrawListFlags *|ImGuiNextItemDataFlags *|ImGuiNextWindowDataFlags *|ImGuiStyleVar *|ImGuiItemStatusFlags *|ImGuiComboFlags *|ImGuiWindowFlags *|ImGuiBackendFlags *|ImGuiButtonFlags *|ImGuiColumnsFlags *|ImGuiPopupFlags *|ImGuiDragDropFlags *|ImGuiTooltipFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "ImS64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ImDrawList = {"_p_p_ImDrawList", "ImDrawList **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ImGuiDockNode = {"_p_p_ImGuiDockNode", "ImGuiDockNode **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_ImGuiInputTextCallbackData__int = {"_p_p_f_p_ImGuiInputTextCallbackData__int", "ImGuiTextEditCallback *|int (**)(ImGuiInputTextCallbackData *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|ImS16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "ImS8 *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|ImU8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "ImU32 *|ImGuiID *|unsigned int *|ImWchar32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "ImU64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "ImWchar *|ImU16 *|ImDrawIdx *|ImWchar16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_va_list = {"_p_va_list", "va_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "ImTextureID|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Bool,
  &_swigt__p_CustomRect,
  &_swigt__p_FILE,
  &_swigt__p_GlyphRangesBuilder,
  &_swigt__p_ImBitVector,
  &_swigt__p_ImChunkStreamT_ImGuiWindowSettings_t,
  &_swigt__p_ImColor,
  &_swigt__p_ImDrawChannel,
  &_swigt__p_ImDrawCmd,
  &_swigt__p_ImDrawData,
  &_swigt__p_ImDrawDataBuilder,
  &_swigt__p_ImDrawList,
  &_swigt__p_ImDrawListSharedData,
  &_swigt__p_ImDrawListSplitter,
  &_swigt__p_ImDrawVert,
  &_swigt__p_ImFont,
  &_swigt__p_ImFontAtlas,
  &_swigt__p_ImFontAtlasCustomRect,
  &_swigt__p_ImFontConfig,
  &_swigt__p_ImFontGlyph,
  &_swigt__p_ImFontGlyphRangesBuilder,
  &_swigt__p_ImGuiColorMod,
  &_swigt__p_ImGuiColumnData,
  &_swigt__p_ImGuiColumns,
  &_swigt__p_ImGuiContext,
  &_swigt__p_ImGuiContextHook,
  &_swigt__p_ImGuiDataTypeInfo,
  &_swigt__p_ImGuiDataTypeTempStorage,
  &_swigt__p_ImGuiDockContext,
  &_swigt__p_ImGuiDockNode,
  &_swigt__p_ImGuiGroupData,
  &_swigt__p_ImGuiIO,
  &_swigt__p_ImGuiInputTextCallbackData,
  &_swigt__p_ImGuiInputTextState,
  &_swigt__p_ImGuiLastItemDataBackup,
  &_swigt__p_ImGuiListClipper,
  &_swigt__p_ImGuiMenuColumns,
  &_swigt__p_ImGuiNavMoveResult,
  &_swigt__p_ImGuiNextItemData,
  &_swigt__p_ImGuiNextWindowData,
  &_swigt__p_ImGuiOnceUponAFrame,
  &_swigt__p_ImGuiPayload,
  &_swigt__p_ImGuiPlatformIO,
  &_swigt__p_ImGuiPlatformMonitor,
  &_swigt__p_ImGuiPopupData,
  &_swigt__p_ImGuiPtrOrIndex,
  &_swigt__p_ImGuiSettingsHandler,
  &_swigt__p_ImGuiShrinkWidthItem,
  &_swigt__p_ImGuiSizeCallbackData,
  &_swigt__p_ImGuiStorage,
  &_swigt__p_ImGuiStyle,
  &_swigt__p_ImGuiStyleMod,
  &_swigt__p_ImGuiTabBar,
  &_swigt__p_ImGuiTabItem,
  &_swigt__p_ImGuiTextBuffer,
  &_swigt__p_ImGuiTextFilter,
  &_swigt__p_ImGuiViewport,
  &_swigt__p_ImGuiViewportP,
  &_swigt__p_ImGuiWindow,
  &_swigt__p_ImGuiWindowClass,
  &_swigt__p_ImGuiWindowSettings,
  &_swigt__p_ImGuiWindowTempData,
  &_swigt__p_ImNewWrapper,
  &_swigt__p_ImPoolT_ImGuiTabBar_t,
  &_swigt__p_ImRect,
  &_swigt__p_ImStb__STB_TexteditState,
  &_swigt__p_ImVec1,
  &_swigt__p_ImVec2,
  &_swigt__p_ImVec2ih,
  &_swigt__p_ImVec4,
  &_swigt__p_ImVectorT_ImDrawChannel_t,
  &_swigt__p_ImVectorT_ImDrawCmd_t,
  &_swigt__p_ImVectorT_ImDrawList_p_t,
  &_swigt__p_ImVectorT_ImDrawVert_t,
  &_swigt__p_ImVectorT_ImFontAtlasCustomRect_t,
  &_swigt__p_ImVectorT_ImFontConfig_t,
  &_swigt__p_ImVectorT_ImFontGlyph_t,
  &_swigt__p_ImVectorT_ImFont_p_t,
  &_swigt__p_ImVectorT_ImGuiColorMod_t,
  &_swigt__p_ImVectorT_ImGuiColumnData_t,
  &_swigt__p_ImVectorT_ImGuiColumns_t,
  &_swigt__p_ImVectorT_ImGuiContextHook_t,
  &_swigt__p_ImVectorT_ImGuiDockNodeSettings_t,
  &_swigt__p_ImVectorT_ImGuiDockRequest_t,
  &_swigt__p_ImVectorT_ImGuiGroupData_t,
  &_swigt__p_ImVectorT_ImGuiPlatformMonitor_t,
  &_swigt__p_ImVectorT_ImGuiPopupData_t,
  &_swigt__p_ImVectorT_ImGuiPtrOrIndex_t,
  &_swigt__p_ImVectorT_ImGuiSettingsHandler_t,
  &_swigt__p_ImVectorT_ImGuiShrinkWidthItem_t,
  &_swigt__p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t,
  &_swigt__p_ImVectorT_ImGuiStyleMod_t,
  &_swigt__p_ImVectorT_ImGuiTabItem_t,
  &_swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,
  &_swigt__p_ImVectorT_ImGuiViewportP_p_t,
  &_swigt__p_ImVectorT_ImGuiViewport_p_t,
  &_swigt__p_ImVectorT_ImGuiWindow_p_t,
  &_swigt__p_ImVectorT_ImVec2_t,
  &_swigt__p_ImVectorT_ImVec4_t,
  &_swigt__p_ImVectorT_char_const_p_t,
  &_swigt__p_ImVectorT_char_t,
  &_swigt__p_ImVectorT_float_t,
  &_swigt__p_ImVectorT_int_t,
  &_swigt__p_ImVectorT_unsigned_char_t,
  &_swigt__p_ImVectorT_unsigned_int_t,
  &_swigt__p_ImVectorT_unsigned_short_t,
  &_swigt__p_ImVectorT_void_p_t,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiContextHook__void,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void,
  &_swigt__p_f_p_ImGuiInputTextCallbackData__int,
  &_swigt__p_f_p_ImGuiSizeCallbackData__void,
  &_swigt__p_f_p_ImGuiViewport_ImVec2__void,
  &_swigt__p_f_p_ImGuiViewport__ImVec2,
  &_swigt__p_f_p_ImGuiViewport__bool,
  &_swigt__p_f_p_ImGuiViewport__float,
  &_swigt__p_f_p_ImGuiViewport__void,
  &_swigt__p_f_p_ImGuiViewport_float__void,
  &_swigt__p_f_p_ImGuiViewport_p_q_const__char__void,
  &_swigt__p_f_p_ImGuiViewport_p_void__void,
  &_swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,
  &_swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,
  &_swigt__p_f_p_void__p_char,
  &_swigt__p_f_p_void_int__float,
  &_swigt__p_f_p_void_int_p_p_q_const__char__bool,
  &_swigt__p_f_p_void_p_q_const__char__void,
  &_swigt__p_f_p_void_p_void__void,
  &_swigt__p_f_size_t_p_void__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_ImDrawList,
  &_swigt__p_p_ImGuiDockNode,
  &_swigt__p_p_char,
  &_swigt__p_p_f_p_ImGuiInputTextCallbackData__int,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_va_list,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Bool[] = {  {&_swigt__p_Bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CustomRect[] = {  {&_swigt__p_CustomRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GlyphRangesBuilder[] = {  {&_swigt__p_GlyphRangesBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImBitVector[] = {  {&_swigt__p_ImBitVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImChunkStreamT_ImGuiWindowSettings_t[] = {  {&_swigt__p_ImChunkStreamT_ImGuiWindowSettings_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImColor[] = {  {&_swigt__p_ImColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawChannel[] = {  {&_swigt__p_ImDrawChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawCmd[] = {  {&_swigt__p_ImDrawCmd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawData[] = {  {&_swigt__p_ImDrawData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawDataBuilder[] = {  {&_swigt__p_ImDrawDataBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawList[] = {  {&_swigt__p_ImDrawList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawListSharedData[] = {  {&_swigt__p_ImDrawListSharedData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawListSplitter[] = {  {&_swigt__p_ImDrawListSplitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawVert[] = {  {&_swigt__p_ImDrawVert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFont[] = {  {&_swigt__p_ImFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontAtlas[] = {  {&_swigt__p_ImFontAtlas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontAtlasCustomRect[] = {  {&_swigt__p_ImFontAtlasCustomRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontConfig[] = {  {&_swigt__p_ImFontConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontGlyph[] = {  {&_swigt__p_ImFontGlyph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontGlyphRangesBuilder[] = {  {&_swigt__p_ImFontGlyphRangesBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiColorMod[] = {  {&_swigt__p_ImGuiColorMod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiColumnData[] = {  {&_swigt__p_ImGuiColumnData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiColumns[] = {  {&_swigt__p_ImGuiColumns, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiContext[] = {  {&_swigt__p_ImGuiContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiContextHook[] = {  {&_swigt__p_ImGuiContextHook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiDataTypeInfo[] = {  {&_swigt__p_ImGuiDataTypeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiDataTypeTempStorage[] = {  {&_swigt__p_ImGuiDataTypeTempStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiDockContext[] = {  {&_swigt__p_ImGuiDockContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiDockNode[] = {  {&_swigt__p_ImGuiDockNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiGroupData[] = {  {&_swigt__p_ImGuiGroupData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiIO[] = {  {&_swigt__p_ImGuiIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiInputTextCallbackData[] = {  {&_swigt__p_ImGuiInputTextCallbackData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiInputTextState[] = {  {&_swigt__p_ImGuiInputTextState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiLastItemDataBackup[] = {  {&_swigt__p_ImGuiLastItemDataBackup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiListClipper[] = {  {&_swigt__p_ImGuiListClipper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiMenuColumns[] = {  {&_swigt__p_ImGuiMenuColumns, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiNavMoveResult[] = {  {&_swigt__p_ImGuiNavMoveResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiNextItemData[] = {  {&_swigt__p_ImGuiNextItemData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiNextWindowData[] = {  {&_swigt__p_ImGuiNextWindowData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiOnceUponAFrame[] = {  {&_swigt__p_ImGuiOnceUponAFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPayload[] = {  {&_swigt__p_ImGuiPayload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPlatformIO[] = {  {&_swigt__p_ImGuiPlatformIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPlatformMonitor[] = {  {&_swigt__p_ImGuiPlatformMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPopupData[] = {  {&_swigt__p_ImGuiPopupData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPtrOrIndex[] = {  {&_swigt__p_ImGuiPtrOrIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSettingsHandler[] = {  {&_swigt__p_ImGuiSettingsHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiShrinkWidthItem[] = {  {&_swigt__p_ImGuiShrinkWidthItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSizeCallbackData[] = {  {&_swigt__p_ImGuiSizeCallbackData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStorage[] = {  {&_swigt__p_ImGuiStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStyle[] = {  {&_swigt__p_ImGuiStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStyleMod[] = {  {&_swigt__p_ImGuiStyleMod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTabBar[] = {  {&_swigt__p_ImGuiTabBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTabItem[] = {  {&_swigt__p_ImGuiTabItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTextBuffer[] = {  {&_swigt__p_ImGuiTextBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTextFilter[] = {  {&_swigt__p_ImGuiTextFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiViewport[] = {  {&_swigt__p_ImGuiViewportP, _p_ImGuiViewportPTo_p_ImGuiViewport, 0, 0},  {&_swigt__p_ImGuiViewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiViewportP[] = {  {&_swigt__p_ImGuiViewportP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiWindow[] = {  {&_swigt__p_ImGuiWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiWindowClass[] = {  {&_swigt__p_ImGuiWindowClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiWindowSettings[] = {  {&_swigt__p_ImGuiWindowSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiWindowTempData[] = {  {&_swigt__p_ImGuiWindowTempData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImNewWrapper[] = {  {&_swigt__p_ImNewWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImPoolT_ImGuiTabBar_t[] = {  {&_swigt__p_ImPoolT_ImGuiTabBar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImRect[] = {  {&_swigt__p_ImRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImStb__STB_TexteditState[] = {  {&_swigt__p_ImStb__STB_TexteditState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec1[] = {  {&_swigt__p_ImVec1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec2[] = {  {&_swigt__p_ImVec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec2ih[] = {  {&_swigt__p_ImVec2ih, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec4[] = {  {&_swigt__p_ImVec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawChannel_t[] = {  {&_swigt__p_ImVectorT_ImDrawChannel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawCmd_t[] = {  {&_swigt__p_ImVectorT_ImDrawCmd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawList_p_t[] = {  {&_swigt__p_ImVectorT_ImDrawList_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawVert_t[] = {  {&_swigt__p_ImVectorT_ImDrawVert_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontAtlasCustomRect_t[] = {  {&_swigt__p_ImVectorT_ImFontAtlasCustomRect_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontConfig_t[] = {  {&_swigt__p_ImVectorT_ImFontConfig_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontGlyph_t[] = {  {&_swigt__p_ImVectorT_ImFontGlyph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFont_p_t[] = {  {&_swigt__p_ImVectorT_ImFont_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiColorMod_t[] = {  {&_swigt__p_ImVectorT_ImGuiColorMod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiColumnData_t[] = {  {&_swigt__p_ImVectorT_ImGuiColumnData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiColumns_t[] = {  {&_swigt__p_ImVectorT_ImGuiColumns_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiContextHook_t[] = {  {&_swigt__p_ImVectorT_ImGuiContextHook_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiDockNodeSettings_t[] = {  {&_swigt__p_ImVectorT_ImGuiDockNodeSettings_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiDockRequest_t[] = {  {&_swigt__p_ImVectorT_ImGuiDockRequest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiGroupData_t[] = {  {&_swigt__p_ImVectorT_ImGuiGroupData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiPlatformMonitor_t[] = {  {&_swigt__p_ImVectorT_ImGuiPlatformMonitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiPopupData_t[] = {  {&_swigt__p_ImVectorT_ImGuiPopupData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiPtrOrIndex_t[] = {  {&_swigt__p_ImVectorT_ImGuiPtrOrIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiSettingsHandler_t[] = {  {&_swigt__p_ImVectorT_ImGuiSettingsHandler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiShrinkWidthItem_t[] = {  {&_swigt__p_ImVectorT_ImGuiShrinkWidthItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t[] = {  {&_swigt__p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiStyleMod_t[] = {  {&_swigt__p_ImVectorT_ImGuiStyleMod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiTabItem_t[] = {  {&_swigt__p_ImVectorT_ImGuiTabItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t[] = {  {&_swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiViewportP_p_t[] = {  {&_swigt__p_ImVectorT_ImGuiViewportP_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiViewport_p_t[] = {  {&_swigt__p_ImVectorT_ImGuiViewport_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiWindow_p_t[] = {  {&_swigt__p_ImVectorT_ImGuiWindow_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImVec2_t[] = {  {&_swigt__p_ImVectorT_ImVec2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImVec4_t[] = {  {&_swigt__p_ImVectorT_ImVec4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_char_const_p_t[] = {  {&_swigt__p_ImVectorT_char_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_char_t[] = {  {&_swigt__p_ImVectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_float_t[] = {  {&_swigt__p_ImVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_int_t[] = {  {&_swigt__p_ImVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_char_t[] = {  {&_swigt__p_ImVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_int_t[] = {  {&_swigt__p_ImVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_short_t[] = {  {&_swigt__p_ImVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_void_p_t[] = {  {&_swigt__p_ImVectorT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiContextHook__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiContextHook__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiInputTextCallbackData__int[] = {  {&_swigt__p_f_p_ImGuiInputTextCallbackData__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiSizeCallbackData__void[] = {  {&_swigt__p_f_p_ImGuiSizeCallbackData__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_ImVec2__void[] = {  {&_swigt__p_f_p_ImGuiViewport_ImVec2__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__ImVec2[] = {  {&_swigt__p_f_p_ImGuiViewport__ImVec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__bool[] = {  {&_swigt__p_f_p_ImGuiViewport__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__float[] = {  {&_swigt__p_f_p_ImGuiViewport__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__void[] = {  {&_swigt__p_f_p_ImGuiViewport__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_float__void[] = {  {&_swigt__p_f_p_ImGuiViewport_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_p_q_const__char__void[] = {  {&_swigt__p_f_p_ImGuiViewport_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_p_void__void[] = {  {&_swigt__p_f_p_ImGuiViewport_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int[] = {  {&_swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void[] = {  {&_swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__p_char[] = {  {&_swigt__p_f_p_void__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int__float[] = {  {&_swigt__p_f_p_void_int__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_p_q_const__char__bool[] = {  {&_swigt__p_f_p_void_int_p_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char__void[] = {  {&_swigt__p_f_p_void_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void__void[] = {  {&_swigt__p_f_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t_p_void__p_void[] = {  {&_swigt__p_f_size_t_p_void__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ImDrawList[] = {  {&_swigt__p_p_ImDrawList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ImGuiDockNode[] = {  {&_swigt__p_p_ImGuiDockNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_ImGuiInputTextCallbackData__int[] = {  {&_swigt__p_p_f_p_ImGuiInputTextCallbackData__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_va_list[] = {  {&_swigt__p_va_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Bool,
  _swigc__p_CustomRect,
  _swigc__p_FILE,
  _swigc__p_GlyphRangesBuilder,
  _swigc__p_ImBitVector,
  _swigc__p_ImChunkStreamT_ImGuiWindowSettings_t,
  _swigc__p_ImColor,
  _swigc__p_ImDrawChannel,
  _swigc__p_ImDrawCmd,
  _swigc__p_ImDrawData,
  _swigc__p_ImDrawDataBuilder,
  _swigc__p_ImDrawList,
  _swigc__p_ImDrawListSharedData,
  _swigc__p_ImDrawListSplitter,
  _swigc__p_ImDrawVert,
  _swigc__p_ImFont,
  _swigc__p_ImFontAtlas,
  _swigc__p_ImFontAtlasCustomRect,
  _swigc__p_ImFontConfig,
  _swigc__p_ImFontGlyph,
  _swigc__p_ImFontGlyphRangesBuilder,
  _swigc__p_ImGuiColorMod,
  _swigc__p_ImGuiColumnData,
  _swigc__p_ImGuiColumns,
  _swigc__p_ImGuiContext,
  _swigc__p_ImGuiContextHook,
  _swigc__p_ImGuiDataTypeInfo,
  _swigc__p_ImGuiDataTypeTempStorage,
  _swigc__p_ImGuiDockContext,
  _swigc__p_ImGuiDockNode,
  _swigc__p_ImGuiGroupData,
  _swigc__p_ImGuiIO,
  _swigc__p_ImGuiInputTextCallbackData,
  _swigc__p_ImGuiInputTextState,
  _swigc__p_ImGuiLastItemDataBackup,
  _swigc__p_ImGuiListClipper,
  _swigc__p_ImGuiMenuColumns,
  _swigc__p_ImGuiNavMoveResult,
  _swigc__p_ImGuiNextItemData,
  _swigc__p_ImGuiNextWindowData,
  _swigc__p_ImGuiOnceUponAFrame,
  _swigc__p_ImGuiPayload,
  _swigc__p_ImGuiPlatformIO,
  _swigc__p_ImGuiPlatformMonitor,
  _swigc__p_ImGuiPopupData,
  _swigc__p_ImGuiPtrOrIndex,
  _swigc__p_ImGuiSettingsHandler,
  _swigc__p_ImGuiShrinkWidthItem,
  _swigc__p_ImGuiSizeCallbackData,
  _swigc__p_ImGuiStorage,
  _swigc__p_ImGuiStyle,
  _swigc__p_ImGuiStyleMod,
  _swigc__p_ImGuiTabBar,
  _swigc__p_ImGuiTabItem,
  _swigc__p_ImGuiTextBuffer,
  _swigc__p_ImGuiTextFilter,
  _swigc__p_ImGuiViewport,
  _swigc__p_ImGuiViewportP,
  _swigc__p_ImGuiWindow,
  _swigc__p_ImGuiWindowClass,
  _swigc__p_ImGuiWindowSettings,
  _swigc__p_ImGuiWindowTempData,
  _swigc__p_ImNewWrapper,
  _swigc__p_ImPoolT_ImGuiTabBar_t,
  _swigc__p_ImRect,
  _swigc__p_ImStb__STB_TexteditState,
  _swigc__p_ImVec1,
  _swigc__p_ImVec2,
  _swigc__p_ImVec2ih,
  _swigc__p_ImVec4,
  _swigc__p_ImVectorT_ImDrawChannel_t,
  _swigc__p_ImVectorT_ImDrawCmd_t,
  _swigc__p_ImVectorT_ImDrawList_p_t,
  _swigc__p_ImVectorT_ImDrawVert_t,
  _swigc__p_ImVectorT_ImFontAtlasCustomRect_t,
  _swigc__p_ImVectorT_ImFontConfig_t,
  _swigc__p_ImVectorT_ImFontGlyph_t,
  _swigc__p_ImVectorT_ImFont_p_t,
  _swigc__p_ImVectorT_ImGuiColorMod_t,
  _swigc__p_ImVectorT_ImGuiColumnData_t,
  _swigc__p_ImVectorT_ImGuiColumns_t,
  _swigc__p_ImVectorT_ImGuiContextHook_t,
  _swigc__p_ImVectorT_ImGuiDockNodeSettings_t,
  _swigc__p_ImVectorT_ImGuiDockRequest_t,
  _swigc__p_ImVectorT_ImGuiGroupData_t,
  _swigc__p_ImVectorT_ImGuiPlatformMonitor_t,
  _swigc__p_ImVectorT_ImGuiPopupData_t,
  _swigc__p_ImVectorT_ImGuiPtrOrIndex_t,
  _swigc__p_ImVectorT_ImGuiSettingsHandler_t,
  _swigc__p_ImVectorT_ImGuiShrinkWidthItem_t,
  _swigc__p_ImVectorT_ImGuiStorage__ImGuiStoragePair_t,
  _swigc__p_ImVectorT_ImGuiStyleMod_t,
  _swigc__p_ImVectorT_ImGuiTabItem_t,
  _swigc__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,
  _swigc__p_ImVectorT_ImGuiViewportP_p_t,
  _swigc__p_ImVectorT_ImGuiViewport_p_t,
  _swigc__p_ImVectorT_ImGuiWindow_p_t,
  _swigc__p_ImVectorT_ImVec2_t,
  _swigc__p_ImVectorT_ImVec4_t,
  _swigc__p_ImVectorT_char_const_p_t,
  _swigc__p_ImVectorT_char_t,
  _swigc__p_ImVectorT_float_t,
  _swigc__p_ImVectorT_int_t,
  _swigc__p_ImVectorT_unsigned_char_t,
  _swigc__p_ImVectorT_unsigned_int_t,
  _swigc__p_ImVectorT_unsigned_short_t,
  _swigc__p_ImVectorT_void_p_t,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_ImGuiContext_p_ImGuiContextHook__void,
  _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler__void,
  _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_ImGuiTextBuffer__void,
  _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_q_const__char__p_void,
  _swigc__p_f_p_ImGuiContext_p_ImGuiSettingsHandler_p_void_p_q_const__char__void,
  _swigc__p_f_p_ImGuiInputTextCallbackData__int,
  _swigc__p_f_p_ImGuiSizeCallbackData__void,
  _swigc__p_f_p_ImGuiViewport_ImVec2__void,
  _swigc__p_f_p_ImGuiViewport__ImVec2,
  _swigc__p_f_p_ImGuiViewport__bool,
  _swigc__p_f_p_ImGuiViewport__float,
  _swigc__p_f_p_ImGuiViewport__void,
  _swigc__p_f_p_ImGuiViewport_float__void,
  _swigc__p_f_p_ImGuiViewport_p_q_const__char__void,
  _swigc__p_f_p_ImGuiViewport_p_void__void,
  _swigc__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,
  _swigc__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,
  _swigc__p_f_p_void__p_char,
  _swigc__p_f_p_void_int__float,
  _swigc__p_f_p_void_int_p_p_q_const__char__bool,
  _swigc__p_f_p_void_p_q_const__char__void,
  _swigc__p_f_p_void_p_void__void,
  _swigc__p_f_size_t_p_void__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_ImDrawList,
  _swigc__p_p_ImGuiDockNode,
  _swigc__p_p_char,
  _swigc__p_p_f_p_ImGuiInputTextCallbackData__int,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_va_list,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

